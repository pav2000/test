
st7735test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000083c4  08005f68  08005f68  00015f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e32c  0800e32c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e32c  0800e32c  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e32c  0800e32c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e32c  0800e32c  0001e32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e330  0800e330  0001e330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800e334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003338  200000dc  0800e410  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20003414  0800e410  00023414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001172d  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e29  00000000  00000000  00031832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00035610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f0c  00000000  00000000  00036410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113b1  00000000  00000000  0005031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db34  00000000  00000000  000616cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c8  00000000  00000000  000ef254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f4c 	.word	0x08005f4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08005f4c 	.word	0x08005f4c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ClearTest>:
#endif
#endif

//-----------------------------------------------------------------------------
uint32_t ClearTest(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  uint32_t ctStartT = GetTime();
 8000162:	f003 f961 	bl	8003428 <HAL_GetTick>
 8000166:	6078      	str	r0, [r7, #4]
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000168:	2000      	movs	r0, #0
 800016a:	f002 f887 	bl	800227c <BSP_LCD_Clear>
  return(GetTime() - ctStartT);
 800016e:	f003 f95b 	bl	8003428 <HAL_GetTick>
 8000172:	4602      	mov	r2, r0
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	1ad3      	subs	r3, r2, r3
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <PixelTest>:

//-----------------------------------------------------------------------------
uint32_t PixelTest(uint32_t n)
{
 8000180:	b590      	push	{r4, r7, lr}
 8000182:	b087      	sub	sp, #28
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  uint16_t c, x, y;

  uint32_t ctStartT = GetTime();
 8000188:	f003 f94e 	bl	8003428 <HAL_GetTick>
 800018c:	6138      	str	r0, [r7, #16]
  for(uint32_t i = 0; i < n; i++)
 800018e:	2300      	movs	r3, #0
 8000190:	617b      	str	r3, [r7, #20]
 8000192:	e030      	b.n	80001f6 <PixelTest+0x76>
  {
    x = random() % BSP_LCD_GetXSize();
 8000194:	f004 febe 	bl	8004f14 <random>
 8000198:	4604      	mov	r4, r0
 800019a:	f002 f81f 	bl	80021dc <BSP_LCD_GetXSize>
 800019e:	4603      	mov	r3, r0
 80001a0:	fb94 f2f3 	sdiv	r2, r4, r3
 80001a4:	fb03 f302 	mul.w	r3, r3, r2
 80001a8:	1ae3      	subs	r3, r4, r3
 80001aa:	81fb      	strh	r3, [r7, #14]
    y = random() % BSP_LCD_GetYSize();
 80001ac:	f004 feb2 	bl	8004f14 <random>
 80001b0:	4604      	mov	r4, r0
 80001b2:	f002 f81f 	bl	80021f4 <BSP_LCD_GetYSize>
 80001b6:	4603      	mov	r3, r0
 80001b8:	fb94 f2f3 	sdiv	r2, r4, r3
 80001bc:	fb03 f302 	mul.w	r3, r3, r2
 80001c0:	1ae3      	subs	r3, r4, r3
 80001c2:	81bb      	strh	r3, [r7, #12]
    c = random() % 0xFFFF;
 80001c4:	f004 fea6 	bl	8004f14 <random>
 80001c8:	4602      	mov	r2, r0
 80001ca:	4b11      	ldr	r3, [pc, #68]	; (8000210 <PixelTest+0x90>)
 80001cc:	fb83 1302 	smull	r1, r3, r3, r2
 80001d0:	4413      	add	r3, r2
 80001d2:	13d9      	asrs	r1, r3, #15
 80001d4:	17d3      	asrs	r3, r2, #31
 80001d6:	1ac9      	subs	r1, r1, r3
 80001d8:	460b      	mov	r3, r1
 80001da:	041b      	lsls	r3, r3, #16
 80001dc:	1a5b      	subs	r3, r3, r1
 80001de:	1ad1      	subs	r1, r2, r3
 80001e0:	460b      	mov	r3, r1
 80001e2:	817b      	strh	r3, [r7, #10]
    BSP_LCD_DrawPixel(x, y, c);
 80001e4:	897a      	ldrh	r2, [r7, #10]
 80001e6:	89b9      	ldrh	r1, [r7, #12]
 80001e8:	89fb      	ldrh	r3, [r7, #14]
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 f936 	bl	800245c <BSP_LCD_DrawPixel>
  for(uint32_t i = 0; i < n; i++)
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	3301      	adds	r3, #1
 80001f4:	617b      	str	r3, [r7, #20]
 80001f6:	697a      	ldr	r2, [r7, #20]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3ca      	bcc.n	8000194 <PixelTest+0x14>
  }
  return(GetTime() - ctStartT);
 80001fe:	f003 f913 	bl	8003428 <HAL_GetTick>
 8000202:	4602      	mov	r2, r0
 8000204:	693b      	ldr	r3, [r7, #16]
 8000206:	1ad3      	subs	r3, r2, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	371c      	adds	r7, #28
 800020c:	46bd      	mov	sp, r7
 800020e:	bd90      	pop	{r4, r7, pc}
 8000210:	80008001 	.word	0x80008001

08000214 <LineTest>:

//-----------------------------------------------------------------------------
uint32_t LineTest(uint32_t n)
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b087      	sub	sp, #28
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  uint16_t x1, y1, x2, y2;

  uint32_t ctStartT = GetTime();
 800021c:	f003 f904 	bl	8003428 <HAL_GetTick>
 8000220:	6138      	str	r0, [r7, #16]
  for(uint32_t i = 0; i < n; i++)
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	e04a      	b.n	80002be <LineTest+0xaa>
  {
    x1 = random() % BSP_LCD_GetXSize();
 8000228:	f004 fe74 	bl	8004f14 <random>
 800022c:	4604      	mov	r4, r0
 800022e:	f001 ffd5 	bl	80021dc <BSP_LCD_GetXSize>
 8000232:	4603      	mov	r3, r0
 8000234:	fb94 f2f3 	sdiv	r2, r4, r3
 8000238:	fb03 f302 	mul.w	r3, r3, r2
 800023c:	1ae3      	subs	r3, r4, r3
 800023e:	81fb      	strh	r3, [r7, #14]
    y1 = random() % BSP_LCD_GetYSize();
 8000240:	f004 fe68 	bl	8004f14 <random>
 8000244:	4604      	mov	r4, r0
 8000246:	f001 ffd5 	bl	80021f4 <BSP_LCD_GetYSize>
 800024a:	4603      	mov	r3, r0
 800024c:	fb94 f2f3 	sdiv	r2, r4, r3
 8000250:	fb03 f302 	mul.w	r3, r3, r2
 8000254:	1ae3      	subs	r3, r4, r3
 8000256:	81bb      	strh	r3, [r7, #12]
    x2 = random() % BSP_LCD_GetXSize();
 8000258:	f004 fe5c 	bl	8004f14 <random>
 800025c:	4604      	mov	r4, r0
 800025e:	f001 ffbd 	bl	80021dc <BSP_LCD_GetXSize>
 8000262:	4603      	mov	r3, r0
 8000264:	fb94 f2f3 	sdiv	r2, r4, r3
 8000268:	fb03 f302 	mul.w	r3, r3, r2
 800026c:	1ae3      	subs	r3, r4, r3
 800026e:	817b      	strh	r3, [r7, #10]
    y2 = random() % BSP_LCD_GetYSize();
 8000270:	f004 fe50 	bl	8004f14 <random>
 8000274:	4604      	mov	r4, r0
 8000276:	f001 ffbd 	bl	80021f4 <BSP_LCD_GetYSize>
 800027a:	4603      	mov	r3, r0
 800027c:	fb94 f2f3 	sdiv	r2, r4, r3
 8000280:	fb03 f302 	mul.w	r3, r3, r2
 8000284:	1ae3      	subs	r3, r4, r3
 8000286:	813b      	strh	r3, [r7, #8]
    BSP_LCD_SetTextColor(RD(random() % 0xFFFF));
 8000288:	f004 fe44 	bl	8004f14 <random>
 800028c:	4602      	mov	r2, r0
 800028e:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <LineTest+0xc4>)
 8000290:	fb83 1302 	smull	r1, r3, r3, r2
 8000294:	4413      	add	r3, r2
 8000296:	13d9      	asrs	r1, r3, #15
 8000298:	17d3      	asrs	r3, r2, #31
 800029a:	1ac9      	subs	r1, r1, r3
 800029c:	460b      	mov	r3, r1
 800029e:	041b      	lsls	r3, r3, #16
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	1ad1      	subs	r1, r2, r3
 80002a4:	b28b      	uxth	r3, r1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 ffb0 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawLine(x1, y1, x2, y2);
 80002ac:	893b      	ldrh	r3, [r7, #8]
 80002ae:	897a      	ldrh	r2, [r7, #10]
 80002b0:	89b9      	ldrh	r1, [r7, #12]
 80002b2:	89f8      	ldrh	r0, [r7, #14]
 80002b4:	f002 f962 	bl	800257c <BSP_LCD_DrawLine>
  for(uint32_t i = 0; i < n; i++)
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	3301      	adds	r3, #1
 80002bc:	617b      	str	r3, [r7, #20]
 80002be:	697a      	ldr	r2, [r7, #20]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d3b0      	bcc.n	8000228 <LineTest+0x14>
  }
  return(GetTime() - ctStartT);
 80002c6:	f003 f8af 	bl	8003428 <HAL_GetTick>
 80002ca:	4602      	mov	r2, r0
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	1ad3      	subs	r3, r2, r3
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	371c      	adds	r7, #28
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd90      	pop	{r4, r7, pc}
 80002d8:	80008001 	.word	0x80008001

080002dc <FillRectTest>:

//-----------------------------------------------------------------------------
uint32_t FillRectTest(uint32_t n)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b087      	sub	sp, #28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  uint16_t x, y, w, h;

  uint32_t ctStartT = GetTime();
 80002e4:	f003 f8a0 	bl	8003428 <HAL_GetTick>
 80002e8:	6138      	str	r0, [r7, #16]
  for(uint32_t i = 0; i < n; i++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	e054      	b.n	800039a <FillRectTest+0xbe>
  {
    w = random() % (BSP_LCD_GetXSize() >> 1);
 80002f0:	f004 fe10 	bl	8004f14 <random>
 80002f4:	4604      	mov	r4, r0
 80002f6:	f001 ff71 	bl	80021dc <BSP_LCD_GetXSize>
 80002fa:	4603      	mov	r3, r0
 80002fc:	085b      	lsrs	r3, r3, #1
 80002fe:	b29b      	uxth	r3, r3
 8000300:	fb94 f2f3 	sdiv	r2, r4, r3
 8000304:	fb03 f302 	mul.w	r3, r3, r2
 8000308:	1ae3      	subs	r3, r4, r3
 800030a:	81fb      	strh	r3, [r7, #14]
    h = random() % (BSP_LCD_GetYSize() >> 1);
 800030c:	f004 fe02 	bl	8004f14 <random>
 8000310:	4604      	mov	r4, r0
 8000312:	f001 ff6f 	bl	80021f4 <BSP_LCD_GetYSize>
 8000316:	4603      	mov	r3, r0
 8000318:	085b      	lsrs	r3, r3, #1
 800031a:	b29b      	uxth	r3, r3
 800031c:	fb94 f2f3 	sdiv	r2, r4, r3
 8000320:	fb03 f302 	mul.w	r3, r3, r2
 8000324:	1ae3      	subs	r3, r4, r3
 8000326:	81bb      	strh	r3, [r7, #12]
    x = random() % (BSP_LCD_GetXSize() - w);
 8000328:	f004 fdf4 	bl	8004f14 <random>
 800032c:	4604      	mov	r4, r0
 800032e:	f001 ff55 	bl	80021dc <BSP_LCD_GetXSize>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	89fb      	ldrh	r3, [r7, #14]
 8000338:	1ad3      	subs	r3, r2, r3
 800033a:	fb94 f2f3 	sdiv	r2, r4, r3
 800033e:	fb03 f302 	mul.w	r3, r3, r2
 8000342:	1ae3      	subs	r3, r4, r3
 8000344:	817b      	strh	r3, [r7, #10]
    y = random() % (BSP_LCD_GetYSize() - h);
 8000346:	f004 fde5 	bl	8004f14 <random>
 800034a:	4604      	mov	r4, r0
 800034c:	f001 ff52 	bl	80021f4 <BSP_LCD_GetYSize>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	89bb      	ldrh	r3, [r7, #12]
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	fb94 f2f3 	sdiv	r2, r4, r3
 800035c:	fb03 f302 	mul.w	r3, r3, r2
 8000360:	1ae3      	subs	r3, r4, r3
 8000362:	813b      	strh	r3, [r7, #8]
    BSP_LCD_SetTextColor(RD(random() % 0xFFFF));
 8000364:	f004 fdd6 	bl	8004f14 <random>
 8000368:	4602      	mov	r2, r0
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <FillRectTest+0xd8>)
 800036c:	fb83 1302 	smull	r1, r3, r3, r2
 8000370:	4413      	add	r3, r2
 8000372:	13d9      	asrs	r1, r3, #15
 8000374:	17d3      	asrs	r3, r2, #31
 8000376:	1ac9      	subs	r1, r1, r3
 8000378:	460b      	mov	r3, r1
 800037a:	041b      	lsls	r3, r3, #16
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	1ad1      	subs	r1, r2, r3
 8000380:	b28b      	uxth	r3, r1
 8000382:	4618      	mov	r0, r3
 8000384:	f001 ff42 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(x, y, w, h);
 8000388:	89bb      	ldrh	r3, [r7, #12]
 800038a:	89fa      	ldrh	r2, [r7, #14]
 800038c:	8939      	ldrh	r1, [r7, #8]
 800038e:	8978      	ldrh	r0, [r7, #10]
 8000390:	f002 fac8 	bl	8002924 <BSP_LCD_FillRect>
  for(uint32_t i = 0; i < n; i++)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	3301      	adds	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	697a      	ldr	r2, [r7, #20]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d3a6      	bcc.n	80002f0 <FillRectTest+0x14>
  }
  return(GetTime() - ctStartT);
 80003a2:	f003 f841 	bl	8003428 <HAL_GetTick>
 80003a6:	4602      	mov	r2, r0
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	1ad3      	subs	r3, r2, r3
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	371c      	adds	r7, #28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd90      	pop	{r4, r7, pc}
 80003b4:	80008001 	.word	0x80008001

080003b8 <CharTest>:

//-----------------------------------------------------------------------------
uint32_t CharTest(uint32_t n)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  uint16_t x, y;
  uint8_t  c;
  sFONT * fp;

  uint32_t ctStartT = GetTime();
 80003c0:	f003 f832 	bl	8003428 <HAL_GetTick>
 80003c4:	61b8      	str	r0, [r7, #24]
  for(uint32_t i = 0; i < n; i++)
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
 80003ca:	e091      	b.n	80004f0 <CharTest+0x138>
  {
    c = random() % 5;
 80003cc:	f004 fda2 	bl	8004f14 <random>
 80003d0:	4602      	mov	r2, r0
 80003d2:	4b4e      	ldr	r3, [pc, #312]	; (800050c <CharTest+0x154>)
 80003d4:	fb83 1302 	smull	r1, r3, r3, r2
 80003d8:	1059      	asrs	r1, r3, #1
 80003da:	17d3      	asrs	r3, r2, #31
 80003dc:	1ac9      	subs	r1, r1, r3
 80003de:	460b      	mov	r3, r1
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	440b      	add	r3, r1
 80003e4:	1ad1      	subs	r1, r2, r3
 80003e6:	460b      	mov	r3, r1
 80003e8:	75fb      	strb	r3, [r7, #23]
    if(c == 0)
 80003ea:	7dfb      	ldrb	r3, [r7, #23]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d103      	bne.n	80003f8 <CharTest+0x40>
      BSP_LCD_SetFont(&Font8);
 80003f0:	4847      	ldr	r0, [pc, #284]	; (8000510 <CharTest+0x158>)
 80003f2:	f001 ff2b 	bl	800224c <BSP_LCD_SetFont>
 80003f6:	e01a      	b.n	800042e <CharTest+0x76>
    else if(c == 1)
 80003f8:	7dfb      	ldrb	r3, [r7, #23]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d103      	bne.n	8000406 <CharTest+0x4e>
      BSP_LCD_SetFont(&Font12);
 80003fe:	4845      	ldr	r0, [pc, #276]	; (8000514 <CharTest+0x15c>)
 8000400:	f001 ff24 	bl	800224c <BSP_LCD_SetFont>
 8000404:	e013      	b.n	800042e <CharTest+0x76>
    else if(c == 2)
 8000406:	7dfb      	ldrb	r3, [r7, #23]
 8000408:	2b02      	cmp	r3, #2
 800040a:	d103      	bne.n	8000414 <CharTest+0x5c>
      BSP_LCD_SetFont(&Font16);
 800040c:	4842      	ldr	r0, [pc, #264]	; (8000518 <CharTest+0x160>)
 800040e:	f001 ff1d 	bl	800224c <BSP_LCD_SetFont>
 8000412:	e00c      	b.n	800042e <CharTest+0x76>
    else if(c == 3)
 8000414:	7dfb      	ldrb	r3, [r7, #23]
 8000416:	2b03      	cmp	r3, #3
 8000418:	d103      	bne.n	8000422 <CharTest+0x6a>
      BSP_LCD_SetFont(&Font20);
 800041a:	4840      	ldr	r0, [pc, #256]	; (800051c <CharTest+0x164>)
 800041c:	f001 ff16 	bl	800224c <BSP_LCD_SetFont>
 8000420:	e005      	b.n	800042e <CharTest+0x76>
    else if(c == 4)
 8000422:	7dfb      	ldrb	r3, [r7, #23]
 8000424:	2b04      	cmp	r3, #4
 8000426:	d102      	bne.n	800042e <CharTest+0x76>
   //  BSP_LCD_SetFont(&Font24); // Места во флеше не хватает
      BSP_LCD_SetFont(&Font20);
 8000428:	483c      	ldr	r0, [pc, #240]	; (800051c <CharTest+0x164>)
 800042a:	f001 ff0f 	bl	800224c <BSP_LCD_SetFont>
    fp = BSP_LCD_GetFont();
 800042e:	f001 ff1b 	bl	8002268 <BSP_LCD_GetFont>
 8000432:	6138      	str	r0, [r7, #16]

    x = random() % (BSP_LCD_GetXSize() - fp->Width);
 8000434:	f004 fd6e 	bl	8004f14 <random>
 8000438:	4604      	mov	r4, r0
 800043a:	f001 fecf 	bl	80021dc <BSP_LCD_GetXSize>
 800043e:	4603      	mov	r3, r0
 8000440:	461a      	mov	r2, r3
 8000442:	693b      	ldr	r3, [r7, #16]
 8000444:	889b      	ldrh	r3, [r3, #4]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	fb94 f2f3 	sdiv	r2, r4, r3
 800044c:	fb03 f302 	mul.w	r3, r3, r2
 8000450:	1ae3      	subs	r3, r4, r3
 8000452:	81fb      	strh	r3, [r7, #14]
    y = random() % (BSP_LCD_GetYSize() - fp->Height);
 8000454:	f004 fd5e 	bl	8004f14 <random>
 8000458:	4604      	mov	r4, r0
 800045a:	f001 fecb 	bl	80021f4 <BSP_LCD_GetYSize>
 800045e:	4603      	mov	r3, r0
 8000460:	461a      	mov	r2, r3
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	88db      	ldrh	r3, [r3, #6]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	fb94 f2f3 	sdiv	r2, r4, r3
 800046c:	fb03 f302 	mul.w	r3, r3, r2
 8000470:	1ae3      	subs	r3, r4, r3
 8000472:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_SetTextColor(RD(random() % 0xFFFF));
 8000474:	f004 fd4e 	bl	8004f14 <random>
 8000478:	4602      	mov	r2, r0
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <CharTest+0x168>)
 800047c:	fb83 1302 	smull	r1, r3, r3, r2
 8000480:	4413      	add	r3, r2
 8000482:	13d9      	asrs	r1, r3, #15
 8000484:	17d3      	asrs	r3, r2, #31
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	460b      	mov	r3, r1
 800048a:	041b      	lsls	r3, r3, #16
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	1ad1      	subs	r1, r2, r3
 8000490:	b28b      	uxth	r3, r1
 8000492:	4618      	mov	r0, r3
 8000494:	f001 feba 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(RD(random() % 0xFFFF));
 8000498:	f004 fd3c 	bl	8004f14 <random>
 800049c:	4602      	mov	r2, r0
 800049e:	4b20      	ldr	r3, [pc, #128]	; (8000520 <CharTest+0x168>)
 80004a0:	fb83 1302 	smull	r1, r3, r3, r2
 80004a4:	4413      	add	r3, r2
 80004a6:	13d9      	asrs	r1, r3, #15
 80004a8:	17d3      	asrs	r3, r2, #31
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	460b      	mov	r3, r1
 80004ae:	041b      	lsls	r3, r3, #16
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	1ad1      	subs	r1, r2, r3
 80004b4:	b28b      	uxth	r3, r1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 feb8 	bl	800222c <BSP_LCD_SetBackColor>

    c = random() % 96 + ' ';
 80004bc:	f004 fd2a 	bl	8004f14 <random>
 80004c0:	4602      	mov	r2, r0
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <CharTest+0x16c>)
 80004c4:	fb83 1302 	smull	r1, r3, r3, r2
 80004c8:	1119      	asrs	r1, r3, #4
 80004ca:	17d3      	asrs	r3, r2, #31
 80004cc:	1ac9      	subs	r1, r1, r3
 80004ce:	460b      	mov	r3, r1
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	440b      	add	r3, r1
 80004d4:	015b      	lsls	r3, r3, #5
 80004d6:	1ad1      	subs	r1, r2, r3
 80004d8:	b2cb      	uxtb	r3, r1
 80004da:	3320      	adds	r3, #32
 80004dc:	75fb      	strb	r3, [r7, #23]
    BSP_LCD_DisplayChar(x, y, c);
 80004de:	7dfa      	ldrb	r2, [r7, #23]
 80004e0:	89b9      	ldrh	r1, [r7, #12]
 80004e2:	89fb      	ldrh	r3, [r7, #14]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fee7 	bl	80022b8 <BSP_LCD_DisplayChar>
  for(uint32_t i = 0; i < n; i++)
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	3301      	adds	r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
 80004f0:	69fa      	ldr	r2, [r7, #28]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	f4ff af69 	bcc.w	80003cc <CharTest+0x14>
  }
  return(GetTime() - ctStartT);
 80004fa:	f002 ff95 	bl	8003428 <HAL_GetTick>
 80004fe:	4602      	mov	r2, r0
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	1ad3      	subs	r3, r2, r3
}
 8000504:	4618      	mov	r0, r3
 8000506:	3724      	adds	r7, #36	; 0x24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd90      	pop	{r4, r7, pc}
 800050c:	66666667 	.word	0x66666667
 8000510:	2000001c 	.word	0x2000001c
 8000514:	20000004 	.word	0x20000004
 8000518:	2000000c 	.word	0x2000000c
 800051c:	20000014 	.word	0x20000014
 8000520:	80008001 	.word	0x80008001
 8000524:	2aaaaaab 	.word	0x2aaaaaab

08000528 <CircleTest>:

//-----------------------------------------------------------------------------
uint32_t CircleTest(uint32_t n)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  uint16_t c, x, y, r, rmax;

  rmax = BSP_LCD_GetXSize();
 8000530:	f001 fe54 	bl	80021dc <BSP_LCD_GetXSize>
 8000534:	4603      	mov	r3, r0
 8000536:	83fb      	strh	r3, [r7, #30]
  if(rmax > BSP_LCD_GetYSize())
 8000538:	f001 fe5c 	bl	80021f4 <BSP_LCD_GetYSize>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	8bfb      	ldrh	r3, [r7, #30]
 8000542:	4293      	cmp	r3, r2
 8000544:	d903      	bls.n	800054e <CircleTest+0x26>
    rmax = BSP_LCD_GetYSize();
 8000546:	f001 fe55 	bl	80021f4 <BSP_LCD_GetYSize>
 800054a:	4603      	mov	r3, r0
 800054c:	83fb      	strh	r3, [r7, #30]
  rmax >>= 2;
 800054e:	8bfb      	ldrh	r3, [r7, #30]
 8000550:	089b      	lsrs	r3, r3, #2
 8000552:	83fb      	strh	r3, [r7, #30]

  uint32_t ctStartT = GetTime();
 8000554:	f002 ff68 	bl	8003428 <HAL_GetTick>
 8000558:	6178      	str	r0, [r7, #20]
  for(uint32_t i = 0; i < n; i++)
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
 800055e:	e04f      	b.n	8000600 <CircleTest+0xd8>
  {
    do
      r = random() % rmax;
 8000560:	f004 fcd8 	bl	8004f14 <random>
 8000564:	4602      	mov	r2, r0
 8000566:	8bfb      	ldrh	r3, [r7, #30]
 8000568:	fb92 f1f3 	sdiv	r1, r2, r3
 800056c:	fb03 f301 	mul.w	r3, r3, r1
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	827b      	strh	r3, [r7, #18]
    while(r == 0);
 8000574:	8a7b      	ldrh	r3, [r7, #18]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0f2      	beq.n	8000560 <CircleTest+0x38>

    x = random() % (BSP_LCD_GetXSize() - (r << 1)) + r;
 800057a:	f004 fccb 	bl	8004f14 <random>
 800057e:	4604      	mov	r4, r0
 8000580:	f001 fe2c 	bl	80021dc <BSP_LCD_GetXSize>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	8a7b      	ldrh	r3, [r7, #18]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	fb94 f2f3 	sdiv	r2, r4, r3
 8000592:	fb03 f302 	mul.w	r3, r3, r2
 8000596:	1ae3      	subs	r3, r4, r3
 8000598:	b29a      	uxth	r2, r3
 800059a:	8a7b      	ldrh	r3, [r7, #18]
 800059c:	4413      	add	r3, r2
 800059e:	823b      	strh	r3, [r7, #16]
    y = random() % (BSP_LCD_GetYSize() - (r << 1)) + r;
 80005a0:	f004 fcb8 	bl	8004f14 <random>
 80005a4:	4604      	mov	r4, r0
 80005a6:	f001 fe25 	bl	80021f4 <BSP_LCD_GetYSize>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	8a7b      	ldrh	r3, [r7, #18]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	fb94 f2f3 	sdiv	r2, r4, r3
 80005b8:	fb03 f302 	mul.w	r3, r3, r2
 80005bc:	1ae3      	subs	r3, r4, r3
 80005be:	b29a      	uxth	r2, r3
 80005c0:	8a7b      	ldrh	r3, [r7, #18]
 80005c2:	4413      	add	r3, r2
 80005c4:	81fb      	strh	r3, [r7, #14]
    c = random() % 0xFFFF;
 80005c6:	f004 fca5 	bl	8004f14 <random>
 80005ca:	4602      	mov	r2, r0
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <CircleTest+0xf4>)
 80005ce:	fb83 1302 	smull	r1, r3, r3, r2
 80005d2:	4413      	add	r3, r2
 80005d4:	13d9      	asrs	r1, r3, #15
 80005d6:	17d3      	asrs	r3, r2, #31
 80005d8:	1ac9      	subs	r1, r1, r3
 80005da:	460b      	mov	r3, r1
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	1a5b      	subs	r3, r3, r1
 80005e0:	1ad1      	subs	r1, r2, r3
 80005e2:	460b      	mov	r3, r1
 80005e4:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_SetTextColor(RD(c));
 80005e6:	89bb      	ldrh	r3, [r7, #12]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fe0f 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(x, y, r);
 80005ee:	8a7a      	ldrh	r2, [r7, #18]
 80005f0:	89f9      	ldrh	r1, [r7, #14]
 80005f2:	8a3b      	ldrh	r3, [r7, #16]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 f883 	bl	8002700 <BSP_LCD_DrawCircle>
  for(uint32_t i = 0; i < n; i++)
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	3301      	adds	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	69ba      	ldr	r2, [r7, #24]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3ab      	bcc.n	8000560 <CircleTest+0x38>
  }
  return(GetTime() - ctStartT);
 8000608:	f002 ff0e 	bl	8003428 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	1ad3      	subs	r3, r2, r3
}
 8000612:	4618      	mov	r0, r3
 8000614:	3724      	adds	r7, #36	; 0x24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	bf00      	nop
 800061c:	80008001 	.word	0x80008001

08000620 <FillCircleTest>:

//-----------------------------------------------------------------------------
uint32_t FillCircleTest(uint32_t n)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint16_t c, x, y, r, rmax;

  rmax = BSP_LCD_GetXSize();
 8000628:	f001 fdd8 	bl	80021dc <BSP_LCD_GetXSize>
 800062c:	4603      	mov	r3, r0
 800062e:	83fb      	strh	r3, [r7, #30]
  if(rmax > BSP_LCD_GetYSize())
 8000630:	f001 fde0 	bl	80021f4 <BSP_LCD_GetYSize>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	8bfb      	ldrh	r3, [r7, #30]
 800063a:	4293      	cmp	r3, r2
 800063c:	d903      	bls.n	8000646 <FillCircleTest+0x26>
    rmax = BSP_LCD_GetYSize();
 800063e:	f001 fdd9 	bl	80021f4 <BSP_LCD_GetYSize>
 8000642:	4603      	mov	r3, r0
 8000644:	83fb      	strh	r3, [r7, #30]
  rmax >>= 2;
 8000646:	8bfb      	ldrh	r3, [r7, #30]
 8000648:	089b      	lsrs	r3, r3, #2
 800064a:	83fb      	strh	r3, [r7, #30]

  uint32_t ctStartT = GetTime();
 800064c:	f002 feec 	bl	8003428 <HAL_GetTick>
 8000650:	6178      	str	r0, [r7, #20]
  for(uint32_t i = 0; i < n; i++)
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	e04f      	b.n	80006f8 <FillCircleTest+0xd8>
  {
    do
      r = random() % rmax;
 8000658:	f004 fc5c 	bl	8004f14 <random>
 800065c:	4602      	mov	r2, r0
 800065e:	8bfb      	ldrh	r3, [r7, #30]
 8000660:	fb92 f1f3 	sdiv	r1, r2, r3
 8000664:	fb03 f301 	mul.w	r3, r3, r1
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	827b      	strh	r3, [r7, #18]
    while(r == 0);
 800066c:	8a7b      	ldrh	r3, [r7, #18]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f2      	beq.n	8000658 <FillCircleTest+0x38>

    x = random() % (BSP_LCD_GetXSize() - (r << 1)) + r;
 8000672:	f004 fc4f 	bl	8004f14 <random>
 8000676:	4604      	mov	r4, r0
 8000678:	f001 fdb0 	bl	80021dc <BSP_LCD_GetXSize>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	8a7b      	ldrh	r3, [r7, #18]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	fb94 f2f3 	sdiv	r2, r4, r3
 800068a:	fb03 f302 	mul.w	r3, r3, r2
 800068e:	1ae3      	subs	r3, r4, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	8a7b      	ldrh	r3, [r7, #18]
 8000694:	4413      	add	r3, r2
 8000696:	823b      	strh	r3, [r7, #16]
    y = random() % (BSP_LCD_GetYSize() - (r << 1)) + r;
 8000698:	f004 fc3c 	bl	8004f14 <random>
 800069c:	4604      	mov	r4, r0
 800069e:	f001 fda9 	bl	80021f4 <BSP_LCD_GetYSize>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	8a7b      	ldrh	r3, [r7, #18]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	fb94 f2f3 	sdiv	r2, r4, r3
 80006b0:	fb03 f302 	mul.w	r3, r3, r2
 80006b4:	1ae3      	subs	r3, r4, r3
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	8a7b      	ldrh	r3, [r7, #18]
 80006ba:	4413      	add	r3, r2
 80006bc:	81fb      	strh	r3, [r7, #14]
    c = random() % 0xFFFF;
 80006be:	f004 fc29 	bl	8004f14 <random>
 80006c2:	4602      	mov	r2, r0
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <FillCircleTest+0xf4>)
 80006c6:	fb83 1302 	smull	r1, r3, r3, r2
 80006ca:	4413      	add	r3, r2
 80006cc:	13d9      	asrs	r1, r3, #15
 80006ce:	17d3      	asrs	r3, r2, #31
 80006d0:	1ac9      	subs	r1, r1, r3
 80006d2:	460b      	mov	r3, r1
 80006d4:	041b      	lsls	r3, r3, #16
 80006d6:	1a5b      	subs	r3, r3, r1
 80006d8:	1ad1      	subs	r1, r2, r3
 80006da:	460b      	mov	r3, r1
 80006dc:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_SetTextColor(RD(c));
 80006de:	89bb      	ldrh	r3, [r7, #12]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fd93 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(x, y, r);
 80006e6:	8a7a      	ldrh	r2, [r7, #18]
 80006e8:	89f9      	ldrh	r1, [r7, #14]
 80006ea:	8a3b      	ldrh	r3, [r7, #16]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 f93d 	bl	800296c <BSP_LCD_FillCircle>
  for(uint32_t i = 0; i < n; i++)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	3301      	adds	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d3ab      	bcc.n	8000658 <FillCircleTest+0x38>
  }
  return(GetTime() - ctStartT);
 8000700:	f002 fe92 	bl	8003428 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	1ad3      	subs	r3, r2, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	bf00      	nop
 8000714:	80008001 	.word	0x80008001

08000718 <ColorTest>:

//-----------------------------------------------------------------------------
uint32_t ColorTest(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
  uint16_t c_rgb565, xs, ys;
  uint8_t  cy;

  uint32_t ctStartT = GetTime();
 800071e:	f002 fe83 	bl	8003428 <HAL_GetTick>
 8000722:	60b8      	str	r0, [r7, #8]
  xs = BSP_LCD_GetXSize();
 8000724:	f001 fd5a 	bl	80021dc <BSP_LCD_GetXSize>
 8000728:	4603      	mov	r3, r0
 800072a:	80fb      	strh	r3, [r7, #6]
  ys = BSP_LCD_GetYSize();
 800072c:	f001 fd62 	bl	80021f4 <BSP_LCD_GetYSize>
 8000730:	4603      	mov	r3, r0
 8000732:	80bb      	strh	r3, [r7, #4]
  for(uint16_t x = 0; x < xs; x++)
 8000734:	2300      	movs	r3, #0
 8000736:	81fb      	strh	r3, [r7, #14]
 8000738:	e06d      	b.n	8000816 <ColorTest+0xfe>
  {
    cy = (uint32_t)(x << 8) / xs;
 800073a:	89fb      	ldrh	r3, [r7, #14]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	461a      	mov	r2, r3
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	70fb      	strb	r3, [r7, #3]
    c_rgb565 = RGB888TORGB565(cy, cy, cy);
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21b      	sxth	r3, r3
 800074e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000752:	f023 0307 	bic.w	r3, r3, #7
 8000756:	b21a      	sxth	r2, r3
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	b21b      	sxth	r3, r3
 800075e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b21a      	sxth	r2, r3
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	b21b      	sxth	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b21b      	sxth	r3, r3
 8000774:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(RD(c_rgb565));
 8000776:	883b      	ldrh	r3, [r7, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fd47 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawVLine(x, 0, ys >> 2);
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	089b      	lsrs	r3, r3, #2
 8000782:	b29a      	uxth	r2, r3
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f001 febd 	bl	8002508 <BSP_LCD_DrawVLine>

    c_rgb565 = RGB888TORGB565(cy, 0, 0);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000798:	f023 0307 	bic.w	r3, r3, #7
 800079c:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(RD(c_rgb565));
 800079e:	883b      	ldrh	r3, [r7, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fd33 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawVLine(x, ys >> 2, ys >> 2);
 80007a6:	88bb      	ldrh	r3, [r7, #4]
 80007a8:	089b      	lsrs	r3, r3, #2
 80007aa:	b299      	uxth	r1, r3
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	089b      	lsrs	r3, r3, #2
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	89fb      	ldrh	r3, [r7, #14]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fea7 	bl	8002508 <BSP_LCD_DrawVLine>

    c_rgb565 = RGB888TORGB565(0, cy, 0);
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80007c4:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(RD(c_rgb565));
 80007c6:	883b      	ldrh	r3, [r7, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fd1f 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawVLine(x, ys >> 1, ys >> 2);
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	b299      	uxth	r1, r3
 80007d4:	88bb      	ldrh	r3, [r7, #4]
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fe93 	bl	8002508 <BSP_LCD_DrawVLine>

    c_rgb565 = RGB888TORGB565(0, 0, cy);
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	803b      	strh	r3, [r7, #0]
    BSP_LCD_SetTextColor(RD(c_rgb565));
 80007ea:	883b      	ldrh	r3, [r7, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fd0d 	bl	800220c <BSP_LCD_SetTextColor>
    BSP_LCD_DrawVLine(x, (ys >> 1) + (ys >> 2), ys >> 2);
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	88bb      	ldrh	r3, [r7, #4]
 80007fa:	089b      	lsrs	r3, r3, #2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4413      	add	r3, r2
 8000800:	b299      	uxth	r1, r3
 8000802:	88bb      	ldrh	r3, [r7, #4]
 8000804:	089b      	lsrs	r3, r3, #2
 8000806:	b29a      	uxth	r2, r3
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fe7c 	bl	8002508 <BSP_LCD_DrawVLine>
  for(uint16_t x = 0; x < xs; x++)
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	3301      	adds	r3, #1
 8000814:	81fb      	strh	r3, [r7, #14]
 8000816:	89fa      	ldrh	r2, [r7, #14]
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	429a      	cmp	r2, r3
 800081c:	d38d      	bcc.n	800073a <ColorTest+0x22>
  }
  return(GetTime() - ctStartT);
 800081e:	f002 fe03 	bl	8003428 <HAL_GetTick>
 8000822:	4602      	mov	r2, r0
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1ad3      	subs	r3, r2, r3
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <BitmapTest>:

//-----------------------------------------------------------------------------
#if BITMAP_TEST == 1
uint32_t BitmapTest(uint32_t n)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  extern const BITMAPSTRUCT beer_60x100_16;
  uint16_t x, y;

  uint32_t ctStartT = GetTime();
 8000838:	f002 fdf6 	bl	8003428 <HAL_GetTick>
 800083c:	6138      	str	r0, [r7, #16]
  for(uint32_t i = 0; i < n; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	e02c      	b.n	800089e <BitmapTest+0x6e>
  {
    x = random() % (BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth);
 8000844:	f004 fb66 	bl	8004f14 <random>
 8000848:	4603      	mov	r3, r0
 800084a:	461c      	mov	r4, r3
 800084c:	f001 fcc6 	bl	80021dc <BSP_LCD_GetXSize>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <BitmapTest+0x88>)
 8000856:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	fbb4 f2f3 	udiv	r2, r4, r3
 8000860:	fb03 f302 	mul.w	r3, r3, r2
 8000864:	1ae3      	subs	r3, r4, r3
 8000866:	81fb      	strh	r3, [r7, #14]
    y = random() % (BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight);
 8000868:	f004 fb54 	bl	8004f14 <random>
 800086c:	4603      	mov	r3, r0
 800086e:	461c      	mov	r4, r3
 8000870:	f001 fcc0 	bl	80021f4 <BSP_LCD_GetYSize>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <BitmapTest+0x88>)
 800087a:	f8d3 3016 	ldr.w	r3, [r3, #22]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	fbb4 f2f3 	udiv	r2, r4, r3
 8000884:	fb03 f302 	mul.w	r3, r3, r2
 8000888:	1ae3      	subs	r3, r4, r3
 800088a:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_DrawBitmap(x, y, (uint8_t *)&rombitmap);
 800088c:	89b9      	ldrh	r1, [r7, #12]
 800088e:	89fb      	ldrh	r3, [r7, #14]
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <BitmapTest+0x88>)
 8000892:	4618      	mov	r0, r3
 8000894:	f001 ffec 	bl	8002870 <BSP_LCD_DrawBitmap>
  for(uint32_t i = 0; i < n; i++)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3301      	adds	r3, #1
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3ce      	bcc.n	8000844 <BitmapTest+0x14>
  }
  return(GetTime() - ctStartT);
 80008a6:	f002 fdbf 	bl	8003428 <HAL_GetTick>
 80008aa:	4602      	mov	r2, r0
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	1ad3      	subs	r3, r2, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	371c      	adds	r7, #28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	08006150 	.word	0x08006150

080008bc <ScrollTest>:

//-----------------------------------------------------------------------------
uint32_t ScrollTest(uint32_t n)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t t;
  uint16_t ss, o, tf, bf;
  int16_t  i;
  ss = BSP_LCD_GetXSize();
 80008c4:	f001 fc8a 	bl	80021dc <BSP_LCD_GetXSize>
 80008c8:	4603      	mov	r3, r0
 80008ca:	827b      	strh	r3, [r7, #18]
  o = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	823b      	strh	r3, [r7, #16]
  if(BSP_LCD_GetYSize() > ss)
 80008d0:	f001 fc90 	bl	80021f4 <BSP_LCD_GetYSize>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	8a7b      	ldrh	r3, [r7, #18]
 80008da:	4293      	cmp	r3, r2
 80008dc:	d205      	bcs.n	80008ea <ScrollTest+0x2e>
  {
    ss = BSP_LCD_GetYSize();
 80008de:	f001 fc89 	bl	80021f4 <BSP_LCD_GetYSize>
 80008e2:	4603      	mov	r3, r0
 80008e4:	827b      	strh	r3, [r7, #18]
    o = 1;                              /* vertical display */
 80008e6:	2301      	movs	r3, #1
 80008e8:	823b      	strh	r3, [r7, #16]
  }
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80008ea:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80008ee:	f001 fc8d 	bl	800220c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80008f2:	201f      	movs	r0, #31
 80008f4:	f001 fc9a 	bl	800222c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 80008f8:	48b7      	ldr	r0, [pc, #732]	; (8000bd8 <ScrollTest+0x31c>)
 80008fa:	f001 fca7 	bl	800224c <BSP_LCD_SetFont>
  BSP_LCD_DisplayChar(0, 0, '1');
 80008fe:	2231      	movs	r2, #49	; 0x31
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f001 fcd8 	bl	80022b8 <BSP_LCD_DisplayChar>
  BSP_LCD_DisplayChar(BSP_LCD_GetXSize() - 8, 0, '2');
 8000908:	f001 fc68 	bl	80021dc <BSP_LCD_GetXSize>
 800090c:	4603      	mov	r3, r0
 800090e:	3b08      	subs	r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	2232      	movs	r2, #50	; 0x32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fcce 	bl	80022b8 <BSP_LCD_DisplayChar>

  BSP_LCD_SetFont(&Font16);
 800091c:	48af      	ldr	r0, [pc, #700]	; (8000bdc <ScrollTest+0x320>)
 800091e:	f001 fc95 	bl	800224c <BSP_LCD_SetFont>
  BSP_LCD_DisplayChar(0, BSP_LCD_GetYSize() - 16, '3');
 8000922:	f001 fc67 	bl	80021f4 <BSP_LCD_GetYSize>
 8000926:	4603      	mov	r3, r0
 8000928:	3b10      	subs	r3, #16
 800092a:	b29b      	uxth	r3, r3
 800092c:	2233      	movs	r2, #51	; 0x33
 800092e:	4619      	mov	r1, r3
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fcc1 	bl	80022b8 <BSP_LCD_DisplayChar>
  BSP_LCD_DisplayChar(BSP_LCD_GetXSize() - 12, BSP_LCD_GetYSize() - 16, '4');
 8000936:	f001 fc51 	bl	80021dc <BSP_LCD_GetXSize>
 800093a:	4603      	mov	r3, r0
 800093c:	3b0c      	subs	r3, #12
 800093e:	b29c      	uxth	r4, r3
 8000940:	f001 fc58 	bl	80021f4 <BSP_LCD_GetYSize>
 8000944:	4603      	mov	r3, r0
 8000946:	3b10      	subs	r3, #16
 8000948:	b29b      	uxth	r3, r3
 800094a:	2234      	movs	r2, #52	; 0x34
 800094c:	4619      	mov	r1, r3
 800094e:	4620      	mov	r0, r4
 8000950:	f001 fcb2 	bl	80022b8 <BSP_LCD_DisplayChar>
  if(o == 0)
 8000954:	8a3b      	ldrh	r3, [r7, #16]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d120      	bne.n	800099c <ScrollTest+0xe0>
  { /* horizontal display */
    tf = 12; bf = 16;
 800095a:	230c      	movs	r3, #12
 800095c:	81fb      	strh	r3, [r7, #14]
 800095e:	2310      	movs	r3, #16
 8000960:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_DrawBitmap(tf, (BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight) / 2, (uint8_t *)&rombitmap);
 8000962:	f001 fc47 	bl	80021f4 <BSP_LCD_GetYSize>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	4b9d      	ldr	r3, [pc, #628]	; (8000be0 <ScrollTest+0x324>)
 800096c:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	085b      	lsrs	r3, r3, #1
 8000974:	b299      	uxth	r1, r3
 8000976:	89fb      	ldrh	r3, [r7, #14]
 8000978:	4a99      	ldr	r2, [pc, #612]	; (8000be0 <ScrollTest+0x324>)
 800097a:	4618      	mov	r0, r3
 800097c:	f001 ff78 	bl	8002870 <BSP_LCD_DrawBitmap>
    ss -= (tf + bf + rombitmap.infoHeader.biWidth);
 8000980:	89fa      	ldrh	r2, [r7, #14]
 8000982:	89bb      	ldrh	r3, [r7, #12]
 8000984:	4413      	add	r3, r2
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b95      	ldr	r3, [pc, #596]	; (8000be0 <ScrollTest+0x324>)
 800098a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4413      	add	r3, r2
 8000992:	b29b      	uxth	r3, r3
 8000994:	8a7a      	ldrh	r2, [r7, #18]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	827b      	strh	r3, [r7, #18]
 800099a:	e01f      	b.n	80009dc <ScrollTest+0x120>
  }
  else
  { /* vertical display */
    tf = 12; bf = 16;
 800099c:	230c      	movs	r3, #12
 800099e:	81fb      	strh	r3, [r7, #14]
 80009a0:	2310      	movs	r3, #16
 80009a2:	81bb      	strh	r3, [r7, #12]
    BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth) / 2, tf, (uint8_t *)&rombitmap);
 80009a4:	f001 fc1a 	bl	80021dc <BSP_LCD_GetXSize>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b8c      	ldr	r3, [pc, #560]	; (8000be0 <ScrollTest+0x324>)
 80009ae:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	89f9      	ldrh	r1, [r7, #14]
 80009ba:	4a89      	ldr	r2, [pc, #548]	; (8000be0 <ScrollTest+0x324>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 ff57 	bl	8002870 <BSP_LCD_DrawBitmap>
    ss -= (tf + bf + rombitmap.infoHeader.biHeight);
 80009c2:	89fa      	ldrh	r2, [r7, #14]
 80009c4:	89bb      	ldrh	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b85      	ldr	r3, [pc, #532]	; (8000be0 <ScrollTest+0x324>)
 80009cc:	f8d3 3016 	ldr.w	r3, [r3, #22]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	8a7a      	ldrh	r2, [r7, #18]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	827b      	strh	r3, [r7, #18]
  }
  t = GetTime();
 80009dc:	f002 fd24 	bl	8003428 <HAL_GetTick>
 80009e0:	6178      	str	r0, [r7, #20]
  i = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	817b      	strh	r3, [r7, #10]
  while(i < ss)
 80009e6:	e017      	b.n	8000a18 <ScrollTest+0x15c>
  {
    while(GetTime() < (t + 20));
 80009e8:	bf00      	nop
 80009ea:	f002 fd1d 	bl	8003428 <HAL_GetTick>
 80009ee:	4602      	mov	r2, r0
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3314      	adds	r3, #20
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d3f8      	bcc.n	80009ea <ScrollTest+0x12e>
    t = GetTime();
 80009f8:	f002 fd16 	bl	8003428 <HAL_GetTick>
 80009fc:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 80009fe:	89ba      	ldrh	r2, [r7, #12]
 8000a00:	89f9      	ldrh	r1, [r7, #14]
 8000a02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 f9d4 	bl	8002db4 <BSP_LCD_Scroll>
    i++;
 8000a0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	3301      	adds	r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	817b      	strh	r3, [r7, #10]
  while(i < ss)
 8000a18:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a1c:	8a7b      	ldrh	r3, [r7, #18]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dbe2      	blt.n	80009e8 <ScrollTest+0x12c>
  }
  do
  {
    i--;
 8000a22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	817b      	strh	r3, [r7, #10]
    while(GetTime() < t + 20);
 8000a2e:	bf00      	nop
 8000a30:	f002 fcfa 	bl	8003428 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3314      	adds	r3, #20
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3f8      	bcc.n	8000a30 <ScrollTest+0x174>
    t = GetTime();
 8000a3e:	f002 fcf3 	bl	8003428 <HAL_GetTick>
 8000a42:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 8000a44:	89ba      	ldrh	r2, [r7, #12]
 8000a46:	89f9      	ldrh	r1, [r7, #14]
 8000a48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f9b1 	bl	8002db4 <BSP_LCD_Scroll>
  } while(i > 0);
 8000a52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dce3      	bgt.n	8000a22 <ScrollTest+0x166>

  while(GetTime() < t + 1000);
 8000a5a:	bf00      	nop
 8000a5c:	f002 fce4 	bl	8003428 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d3f7      	bcc.n	8000a5c <ScrollTest+0x1a0>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f001 fbcd 	bl	800220c <BSP_LCD_SetTextColor>
  if(o == 0)
 8000a72:	8a3b      	ldrh	r3, [r7, #16]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d131      	bne.n	8000adc <ScrollTest+0x220>
  { /* horizontal display */
    BSP_LCD_FillRect(tf, (BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight) / 2, rombitmap.infoHeader.biWidth, rombitmap.infoHeader.biHeight);
 8000a78:	f001 fbbc 	bl	80021f4 <BSP_LCD_GetYSize>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <ScrollTest+0x324>)
 8000a82:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	085b      	lsrs	r3, r3, #1
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <ScrollTest+0x324>)
 8000a8e:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b52      	ldr	r3, [pc, #328]	; (8000be0 <ScrollTest+0x324>)
 8000a96:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	89f8      	ldrh	r0, [r7, #14]
 8000a9e:	f001 ff41 	bl	8002924 <BSP_LCD_FillRect>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth - bf, (BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight) / 2, (uint8_t *)&rombitmap);
 8000aa2:	f001 fb9b 	bl	80021dc <BSP_LCD_GetXSize>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b4d      	ldr	r3, [pc, #308]	; (8000be0 <ScrollTest+0x324>)
 8000aac:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	89bb      	ldrh	r3, [r7, #12]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	b29c      	uxth	r4, r3
 8000abc:	f001 fb9a 	bl	80021f4 <BSP_LCD_GetYSize>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b46      	ldr	r3, [pc, #280]	; (8000be0 <ScrollTest+0x324>)
 8000ac6:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	085b      	lsrs	r3, r3, #1
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4a43      	ldr	r2, [pc, #268]	; (8000be0 <ScrollTest+0x324>)
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f001 fecb 	bl	8002870 <BSP_LCD_DrawBitmap>
 8000ada:	e030      	b.n	8000b3e <ScrollTest+0x282>
  }
  else
  { /* vertical display */
    BSP_LCD_FillRect((BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth) / 2, tf, rombitmap.infoHeader.biWidth, rombitmap.infoHeader.biHeight);
 8000adc:	f001 fb7e 	bl	80021dc <BSP_LCD_GetXSize>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <ScrollTest+0x324>)
 8000ae6:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	b298      	uxth	r0, r3
 8000af0:	4b3b      	ldr	r3, [pc, #236]	; (8000be0 <ScrollTest+0x324>)
 8000af2:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <ScrollTest+0x324>)
 8000afa:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	89f9      	ldrh	r1, [r7, #14]
 8000b02:	f001 ff0f 	bl	8002924 <BSP_LCD_FillRect>
    BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - rombitmap.infoHeader.biWidth) / 2, BSP_LCD_GetYSize() - rombitmap.infoHeader.biHeight - bf, (uint8_t *)&rombitmap);
 8000b06:	f001 fb69 	bl	80021dc <BSP_LCD_GetXSize>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <ScrollTest+0x324>)
 8000b10:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	085b      	lsrs	r3, r3, #1
 8000b18:	b29c      	uxth	r4, r3
 8000b1a:	f001 fb6b 	bl	80021f4 <BSP_LCD_GetYSize>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <ScrollTest+0x324>)
 8000b24:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	89bb      	ldrh	r3, [r7, #12]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4a2a      	ldr	r2, [pc, #168]	; (8000be0 <ScrollTest+0x324>)
 8000b36:	4619      	mov	r1, r3
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f001 fe99 	bl	8002870 <BSP_LCD_DrawBitmap>
  }
  t = GetTime();
 8000b3e:	f002 fc73 	bl	8003428 <HAL_GetTick>
 8000b42:	6178      	str	r0, [r7, #20]
  i = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	817b      	strh	r3, [r7, #10]
  while(i > 0 - ss)
 8000b48:	e017      	b.n	8000b7a <ScrollTest+0x2be>
  {
    while(GetTime() < (t + 20));
 8000b4a:	bf00      	nop
 8000b4c:	f002 fc6c 	bl	8003428 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3314      	adds	r3, #20
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d3f8      	bcc.n	8000b4c <ScrollTest+0x290>
    t = GetTime();
 8000b5a:	f002 fc65 	bl	8003428 <HAL_GetTick>
 8000b5e:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 8000b60:	89ba      	ldrh	r2, [r7, #12]
 8000b62:	89f9      	ldrh	r1, [r7, #14]
 8000b64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 f923 	bl	8002db4 <BSP_LCD_Scroll>
    i--;
 8000b6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	817b      	strh	r3, [r7, #10]
  while(i > 0 - ss)
 8000b7a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b7e:	8a7b      	ldrh	r3, [r7, #18]
 8000b80:	425b      	negs	r3, r3
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dce1      	bgt.n	8000b4a <ScrollTest+0x28e>
  }
  do
  {
    i++;
 8000b86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	817b      	strh	r3, [r7, #10]
    while(GetTime() < t + 20);
 8000b92:	bf00      	nop
 8000b94:	f002 fc48 	bl	8003428 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3314      	adds	r3, #20
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3f8      	bcc.n	8000b94 <ScrollTest+0x2d8>
    t = GetTime();
 8000ba2:	f002 fc41 	bl	8003428 <HAL_GetTick>
 8000ba6:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 8000ba8:	89ba      	ldrh	r2, [r7, #12]
 8000baa:	89f9      	ldrh	r1, [r7, #14]
 8000bac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 f8ff 	bl	8002db4 <BSP_LCD_Scroll>
  } while(i < 0);
 8000bb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	dbe3      	blt.n	8000b86 <ScrollTest+0x2ca>

  while(GetTime() < t + 1000);
 8000bbe:	bf00      	nop
 8000bc0:	f002 fc32 	bl	8003428 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d3f7      	bcc.n	8000bc0 <ScrollTest+0x304>

  i = -500;
 8000bd0:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8000bd4:	817b      	strh	r3, [r7, #10]
  while(i < 500)
 8000bd6:	e01d      	b.n	8000c14 <ScrollTest+0x358>
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	08006150 	.word	0x08006150
  {
    while(GetTime() < t + 10);
 8000be4:	bf00      	nop
 8000be6:	f002 fc1f 	bl	8003428 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	330a      	adds	r3, #10
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d3f8      	bcc.n	8000be6 <ScrollTest+0x32a>
    t = GetTime();
 8000bf4:	f002 fc18 	bl	8003428 <HAL_GetTick>
 8000bf8:	6178      	str	r0, [r7, #20]
    BSP_LCD_Scroll(i, tf, bf);
 8000bfa:	89ba      	ldrh	r2, [r7, #12]
 8000bfc:	89f9      	ldrh	r1, [r7, #14]
 8000bfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 f8d6 	bl	8002db4 <BSP_LCD_Scroll>
    i++;
 8000c08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	817b      	strh	r3, [r7, #10]
  while(i < 500)
 8000c14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c1c:	dbe2      	blt.n	8000be4 <ScrollTest+0x328>
  }

  while(GetTime() < t + 1000);
 8000c1e:	bf00      	nop
 8000c20:	f002 fc02 	bl	8003428 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3f7      	bcc.n	8000c20 <ScrollTest+0x364>
  BSP_LCD_Scroll(0, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2000      	movs	r0, #0
 8000c36:	f002 f8bd 	bl	8002db4 <BSP_LCD_Scroll>
  return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}

08000c44 <ReadPixelTest>:

//-----------------------------------------------------------------------------
#if READ_TEST == 1
uint32_t ReadPixelTest(uint32_t n)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b08b      	sub	sp, #44	; 0x2c
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	6078      	str	r0, [r7, #4]
  uint16_t x, y, x0, y0, xsize, ysize;
  uint32_t error = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]

  x0 = 20;
 8000c50:	2314      	movs	r3, #20
 8000c52:	82fb      	strh	r3, [r7, #22]
  y0 =  5;
 8000c54:	2305      	movs	r3, #5
 8000c56:	82bb      	strh	r3, [r7, #20]
  xsize = rombitmap.infoHeader.biWidth;
 8000c58:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <ReadPixelTest+0x134>)
 8000c5a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000c5e:	827b      	strh	r3, [r7, #18]
  ysize = rombitmap.infoHeader.biHeight;
 8000c60:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <ReadPixelTest+0x134>)
 8000c62:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000c66:	823b      	strh	r3, [r7, #16]

  /* Draw bitmap */
  BSP_LCD_DrawBitmap(x0, y0, (uint8_t *)&rombitmap);
 8000c68:	8ab9      	ldrh	r1, [r7, #20]
 8000c6a:	8afb      	ldrh	r3, [r7, #22]
 8000c6c:	4a42      	ldr	r2, [pc, #264]	; (8000d78 <ReadPixelTest+0x134>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fdfe 	bl	8002870 <BSP_LCD_DrawBitmap>

  /* Read bitmap (BSP_LCD_ReadPixel) */
  uint32_t ctStartT = GetTime();
 8000c74:	f002 fbd8 	bl	8003428 <HAL_GetTick>
 8000c78:	60f8      	str	r0, [r7, #12]
  while(n--)
 8000c7a:	e028      	b.n	8000cce <ReadPixelTest+0x8a>
    for(y = 0; y < ysize; y++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	83bb      	strh	r3, [r7, #28]
 8000c80:	e021      	b.n	8000cc6 <ReadPixelTest+0x82>
      for(x = 0; x < xsize; x++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	83fb      	strh	r3, [r7, #30]
 8000c86:	e017      	b.n	8000cb8 <ReadPixelTest+0x74>
        bitmap[y * xsize + x] = BSP_LCD_ReadPixel(x0 + x, y0 + y);
 8000c88:	8afa      	ldrh	r2, [r7, #22]
 8000c8a:	8bfb      	ldrh	r3, [r7, #30]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b298      	uxth	r0, r3
 8000c90:	8aba      	ldrh	r2, [r7, #20]
 8000c92:	8bbb      	ldrh	r3, [r7, #28]
 8000c94:	4413      	add	r3, r2
 8000c96:	b299      	uxth	r1, r3
 8000c98:	8bbb      	ldrh	r3, [r7, #28]
 8000c9a:	8a7a      	ldrh	r2, [r7, #18]
 8000c9c:	fb02 f203 	mul.w	r2, r2, r3
 8000ca0:	8bfb      	ldrh	r3, [r7, #30]
 8000ca2:	18d4      	adds	r4, r2, r3
 8000ca4:	f002 f828 	bl	8002cf8 <BSP_LCD_ReadPixel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <ReadPixelTest+0x138>)
 8000cae:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
      for(x = 0; x < xsize; x++)
 8000cb2:	8bfb      	ldrh	r3, [r7, #30]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	83fb      	strh	r3, [r7, #30]
 8000cb8:	8bfa      	ldrh	r2, [r7, #30]
 8000cba:	8a7b      	ldrh	r3, [r7, #18]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d3e3      	bcc.n	8000c88 <ReadPixelTest+0x44>
    for(y = 0; y < ysize; y++)
 8000cc0:	8bbb      	ldrh	r3, [r7, #28]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	83bb      	strh	r3, [r7, #28]
 8000cc6:	8bba      	ldrh	r2, [r7, #28]
 8000cc8:	8a3b      	ldrh	r3, [r7, #16]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3d9      	bcc.n	8000c82 <ReadPixelTest+0x3e>
  while(n--)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1d1      	bne.n	8000c7c <ReadPixelTest+0x38>
  ctStartT = GetTime() - ctStartT;
 8000cd8:	f002 fba6 	bl	8003428 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	60fb      	str	r3, [r7, #12]

  /* Check the read error */
  for(y = 0; y < ysize; y++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	83bb      	strh	r3, [r7, #28]
 8000ce8:	e029      	b.n	8000d3e <ReadPixelTest+0xfa>
    for(x = 0; x < xsize; x++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	83fb      	strh	r3, [r7, #30]
 8000cee:	e01f      	b.n	8000d30 <ReadPixelTest+0xec>
    {
      if(bitmap[y * xsize + x] != rombitmap.data[(ysize - 1 - y) * xsize + x])
 8000cf0:	8bbb      	ldrh	r3, [r7, #28]
 8000cf2:	8a7a      	ldrh	r2, [r7, #18]
 8000cf4:	fb02 f203 	mul.w	r2, r2, r3
 8000cf8:	8bfb      	ldrh	r3, [r7, #30]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <ReadPixelTest+0x138>)
 8000cfe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d02:	8a3b      	ldrh	r3, [r7, #16]
 8000d04:	1e59      	subs	r1, r3, #1
 8000d06:	8bbb      	ldrh	r3, [r7, #28]
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	8a79      	ldrh	r1, [r7, #18]
 8000d0c:	fb01 f103 	mul.w	r1, r1, r3
 8000d10:	8bfb      	ldrh	r3, [r7, #30]
 8000d12:	440b      	add	r3, r1
 8000d14:	4918      	ldr	r1, [pc, #96]	; (8000d78 <ReadPixelTest+0x134>)
 8000d16:	3318      	adds	r3, #24
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	440b      	add	r3, r1
 8000d1c:	88db      	ldrh	r3, [r3, #6]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d002      	beq.n	8000d2a <ReadPixelTest+0xe6>
        error++;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	3301      	adds	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
    for(x = 0; x < xsize; x++)
 8000d2a:	8bfb      	ldrh	r3, [r7, #30]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	83fb      	strh	r3, [r7, #30]
 8000d30:	8bfa      	ldrh	r2, [r7, #30]
 8000d32:	8a7b      	ldrh	r3, [r7, #18]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d3db      	bcc.n	8000cf0 <ReadPixelTest+0xac>
  for(y = 0; y < ysize; y++)
 8000d38:	8bbb      	ldrh	r3, [r7, #28]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	83bb      	strh	r3, [r7, #28]
 8000d3e:	8bba      	ldrh	r2, [r7, #28]
 8000d40:	8a3b      	ldrh	r3, [r7, #16]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3d1      	bcc.n	8000cea <ReadPixelTest+0xa6>
    }

  if(error)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <ReadPixelTest+0x112>
    printf("ReadPixelTest error: %d\r\n", (int)error);
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <ReadPixelTest+0x13c>)
 8000d52:	f004 f851 	bl	8004df8 <iprintf>

  BSP_LCD_DrawRGB16Image(x0 + 45, y0 + 10, xsize, ysize, &bitmap[0]);
 8000d56:	8afb      	ldrh	r3, [r7, #22]
 8000d58:	332d      	adds	r3, #45	; 0x2d
 8000d5a:	b298      	uxth	r0, r3
 8000d5c:	8abb      	ldrh	r3, [r7, #20]
 8000d5e:	330a      	adds	r3, #10
 8000d60:	b299      	uxth	r1, r3
 8000d62:	8a3b      	ldrh	r3, [r7, #16]
 8000d64:	8a7a      	ldrh	r2, [r7, #18]
 8000d66:	4c05      	ldr	r4, [pc, #20]	; (8000d7c <ReadPixelTest+0x138>)
 8000d68:	9400      	str	r4, [sp, #0]
 8000d6a:	f001 ffe3 	bl	8002d34 <BSP_LCD_DrawRGB16Image>
  return(ctStartT);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3724      	adds	r7, #36	; 0x24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	08006150 	.word	0x08006150
 8000d7c:	20000484 	.word	0x20000484
 8000d80:	08005f68 	.word	0x08005f68

08000d84 <ReadImageTest>:

//-----------------------------------------------------------------------------
uint32_t ReadImageTest(uint32_t n)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b08b      	sub	sp, #44	; 0x2c
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	6078      	str	r0, [r7, #4]
  uint16_t x, y, x0, y0, xsize, ysize;
  uint32_t error = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]

  x0 = 20;
 8000d90:	2314      	movs	r3, #20
 8000d92:	82fb      	strh	r3, [r7, #22]
  y0 =  5;
 8000d94:	2305      	movs	r3, #5
 8000d96:	82bb      	strh	r3, [r7, #20]
  xsize = rombitmap.infoHeader.biWidth;
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <ReadImageTest+0xf4>)
 8000d9a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000d9e:	827b      	strh	r3, [r7, #18]
  ysize = rombitmap.infoHeader.biHeight;
 8000da0:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <ReadImageTest+0xf4>)
 8000da2:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000da6:	823b      	strh	r3, [r7, #16]

  /* Draw bitmap */
  BSP_LCD_DrawBitmap(x0, y0, (uint8_t *)&rombitmap);
 8000da8:	8ab9      	ldrh	r1, [r7, #20]
 8000daa:	8afb      	ldrh	r3, [r7, #22]
 8000dac:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <ReadImageTest+0xf4>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fd5e 	bl	8002870 <BSP_LCD_DrawBitmap>

  /* Read bitmap (BSP_LCD_ReadRGB16Image) */
  uint32_t ctStartT = GetTime();
 8000db4:	f002 fb38 	bl	8003428 <HAL_GetTick>
 8000db8:	60f8      	str	r0, [r7, #12]
  while(n--)
 8000dba:	e007      	b.n	8000dcc <ReadImageTest+0x48>
    BSP_LCD_ReadRGB16Image(x0, y0, xsize, ysize, &bitmap[0]);
 8000dbc:	8a3b      	ldrh	r3, [r7, #16]
 8000dbe:	8a7a      	ldrh	r2, [r7, #18]
 8000dc0:	8ab9      	ldrh	r1, [r7, #20]
 8000dc2:	8af8      	ldrh	r0, [r7, #22]
 8000dc4:	4c2d      	ldr	r4, [pc, #180]	; (8000e7c <ReadImageTest+0xf8>)
 8000dc6:	9400      	str	r4, [sp, #0]
 8000dc8:	f001 ffd4 	bl	8002d74 <BSP_LCD_ReadRGB16Image>
  while(n--)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1e5a      	subs	r2, r3, #1
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f2      	bne.n	8000dbc <ReadImageTest+0x38>
  ctStartT = GetTime() - ctStartT;
 8000dd6:	f002 fb27 	bl	8003428 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Check the read error */
  for(y = 0; y < ysize; y++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	83bb      	strh	r3, [r7, #28]
 8000de6:	e029      	b.n	8000e3c <ReadImageTest+0xb8>
    for(x = 0; x < xsize; x++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	83fb      	strh	r3, [r7, #30]
 8000dec:	e01f      	b.n	8000e2e <ReadImageTest+0xaa>
    {
      if(bitmap[y * xsize + x] != rombitmap.data[(ysize - 1 - y) * xsize + x])
 8000dee:	8bbb      	ldrh	r3, [r7, #28]
 8000df0:	8a7a      	ldrh	r2, [r7, #18]
 8000df2:	fb02 f203 	mul.w	r2, r2, r3
 8000df6:	8bfb      	ldrh	r3, [r7, #30]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <ReadImageTest+0xf8>)
 8000dfc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e00:	8a3b      	ldrh	r3, [r7, #16]
 8000e02:	1e59      	subs	r1, r3, #1
 8000e04:	8bbb      	ldrh	r3, [r7, #28]
 8000e06:	1acb      	subs	r3, r1, r3
 8000e08:	8a79      	ldrh	r1, [r7, #18]
 8000e0a:	fb01 f103 	mul.w	r1, r1, r3
 8000e0e:	8bfb      	ldrh	r3, [r7, #30]
 8000e10:	440b      	add	r3, r1
 8000e12:	4919      	ldr	r1, [pc, #100]	; (8000e78 <ReadImageTest+0xf4>)
 8000e14:	3318      	adds	r3, #24
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	440b      	add	r3, r1
 8000e1a:	88db      	ldrh	r3, [r3, #6]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d002      	beq.n	8000e28 <ReadImageTest+0xa4>
        error++;
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
    for(x = 0; x < xsize; x++)
 8000e28:	8bfb      	ldrh	r3, [r7, #30]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	83fb      	strh	r3, [r7, #30]
 8000e2e:	8bfa      	ldrh	r2, [r7, #30]
 8000e30:	8a7b      	ldrh	r3, [r7, #18]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d3db      	bcc.n	8000dee <ReadImageTest+0x6a>
  for(y = 0; y < ysize; y++)
 8000e36:	8bbb      	ldrh	r3, [r7, #28]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	83bb      	strh	r3, [r7, #28]
 8000e3c:	8bba      	ldrh	r2, [r7, #28]
 8000e3e:	8a3b      	ldrh	r3, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3d1      	bcc.n	8000de8 <ReadImageTest+0x64>
    }

  if(error)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <ReadImageTest+0xd0>
    printf("ReadImageTest error: %d\r\n", (int)error);
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480c      	ldr	r0, [pc, #48]	; (8000e80 <ReadImageTest+0xfc>)
 8000e50:	f003 ffd2 	bl	8004df8 <iprintf>

  BSP_LCD_DrawRGB16Image(x0 - 15, y0 + 20, xsize, ysize, &bitmap[0]);
 8000e54:	8afb      	ldrh	r3, [r7, #22]
 8000e56:	3b0f      	subs	r3, #15
 8000e58:	b298      	uxth	r0, r3
 8000e5a:	8abb      	ldrh	r3, [r7, #20]
 8000e5c:	3314      	adds	r3, #20
 8000e5e:	b299      	uxth	r1, r3
 8000e60:	8a3b      	ldrh	r3, [r7, #16]
 8000e62:	8a7a      	ldrh	r2, [r7, #18]
 8000e64:	4c05      	ldr	r4, [pc, #20]	; (8000e7c <ReadImageTest+0xf8>)
 8000e66:	9400      	str	r4, [sp, #0]
 8000e68:	f001 ff64 	bl	8002d34 <BSP_LCD_DrawRGB16Image>
  return(ctStartT);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	08006150 	.word	0x08006150
 8000e7c:	20000484 	.word	0x20000484
 8000e80:	08005f84 	.word	0x08005f84

08000e84 <utf8rus>:

// ========================================
char OutputBuf[50+1];
int maxString=50;
char *utf8rus(char *source)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  int i,j,k;
  unsigned char n;
  char m[2] = { '0', '\0' };
 8000e8c:	2330      	movs	r3, #48	; 0x30
 8000e8e:	81bb      	strh	r3, [r7, #12]

  strcpy(OutputBuf, ""); k = strlen(source); i = j = 0;
 8000e90:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <utf8rus+0xec>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff f958 	bl	800014c <strlen>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	61fb      	str	r3, [r7, #28]

  while (i < k) {
 8000ea8:	e056      	b.n	8000f58 <utf8rus+0xd4>
    n = source[i]; i++;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	75fb      	strb	r3, [r7, #23]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	61fb      	str	r3, [r7, #28]

    if (n >= 0xC0) {
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2bbf      	cmp	r3, #191	; 0xbf
 8000ebe:	d936      	bls.n	8000f2e <utf8rus+0xaa>
      switch (n) {
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	2bd0      	cmp	r3, #208	; 0xd0
 8000ec4:	d002      	beq.n	8000ecc <utf8rus+0x48>
 8000ec6:	2bd1      	cmp	r3, #209	; 0xd1
 8000ec8:	d018      	beq.n	8000efc <utf8rus+0x78>
 8000eca:	e035      	b.n	8000f38 <utf8rus+0xb4>
        case 0xD0: {
          n = source[i]; i++;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	75fb      	strb	r3, [r7, #23]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
          if (n == 0x81) { n = 0xA8; break; }
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	2b81      	cmp	r3, #129	; 0x81
 8000ee0:	d102      	bne.n	8000ee8 <utf8rus+0x64>
 8000ee2:	23a8      	movs	r3, #168	; 0xa8
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	e027      	b.n	8000f38 <utf8rus+0xb4>
          if (n >= 0x90 && n <= 0xBF) n = n + 0x30;
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b8f      	cmp	r3, #143	; 0x8f
 8000eec:	d921      	bls.n	8000f32 <utf8rus+0xae>
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	2bbf      	cmp	r3, #191	; 0xbf
 8000ef2:	d81e      	bhi.n	8000f32 <utf8rus+0xae>
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	3330      	adds	r3, #48	; 0x30
 8000ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8000efa:	e01a      	b.n	8000f32 <utf8rus+0xae>
        }
        case 0xD1: {
          n = source[i]; i++;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	75fb      	strb	r3, [r7, #23]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
          if (n == 0x91) { n = 0xB8; break; }
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	2b91      	cmp	r3, #145	; 0x91
 8000f10:	d102      	bne.n	8000f18 <utf8rus+0x94>
 8000f12:	23b8      	movs	r3, #184	; 0xb8
 8000f14:	75fb      	strb	r3, [r7, #23]
 8000f16:	e00f      	b.n	8000f38 <utf8rus+0xb4>
          if (n >= 0x80 && n <= 0x8F) n = n + 0x70;
 8000f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da0a      	bge.n	8000f36 <utf8rus+0xb2>
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b8f      	cmp	r3, #143	; 0x8f
 8000f24:	d807      	bhi.n	8000f36 <utf8rus+0xb2>
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	3370      	adds	r3, #112	; 0x70
 8000f2a:	75fb      	strb	r3, [r7, #23]
          break;
 8000f2c:	e003      	b.n	8000f36 <utf8rus+0xb2>
        }
      }
    }
 8000f2e:	bf00      	nop
 8000f30:	e002      	b.n	8000f38 <utf8rus+0xb4>
          break;
 8000f32:	bf00      	nop
 8000f34:	e000      	b.n	8000f38 <utf8rus+0xb4>
          break;
 8000f36:	bf00      	nop

    m[0] = n; strcat(OutputBuf, m);
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	733b      	strb	r3, [r7, #12]
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <utf8rus+0xec>)
 8000f44:	f004 f826 	bl	8004f94 <strcat>
    j++; if (j >= maxString) break;
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <utf8rus+0xf0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	da04      	bge.n	8000f62 <utf8rus+0xde>
  while (i < k) {
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dba4      	blt.n	8000eaa <utf8rus+0x26>
 8000f60:	e000      	b.n	8000f64 <utf8rus+0xe0>
    j++; if (j >= maxString) break;
 8000f62:	bf00      	nop
  }
  return OutputBuf;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <utf8rus+0xec>)
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20003364 	.word	0x20003364
 8000f74:	20000000 	.word	0x20000000

08000f78 <mainApp>:
#ifdef osCMSIS
void StartDefaultTask(void const * argument)
#else
void mainApp(void)
#endif
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  uint32_t t;

  Delay(300);
 8000f7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f82:	f002 fa5b 	bl	800343c <HAL_Delay>

  BSP_LCD_Init();
 8000f86:	f001 f909 	bl	800219c <BSP_LCD_Init>

// ====================================
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f001 f976 	bl	800227c <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8000f90:	48c0      	ldr	r0, [pc, #768]	; (8001294 <mainApp+0x31c>)
 8000f92:	f001 f95b 	bl	800224c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(50000);
 8000f96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f9a:	f001 f937 	bl	800220c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f001 f944 	bl	800222c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(1,utf8rus("Привет мир!"));
 8000fa4:	48bc      	ldr	r0, [pc, #752]	; (8001298 <mainApp+0x320>)
 8000fa6:	f7ff ff6d 	bl	8000e84 <utf8rus>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4619      	mov	r1, r3
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f001 fa3c 	bl	800242c <BSP_LCD_DisplayStringAtLine>
  Delay(2000);
 8000fb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fb8:	f002 fa40 	bl	800343c <HAL_Delay>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f001 f95d 	bl	800227c <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8000fc2:	48b4      	ldr	r0, [pc, #720]	; (8001294 <mainApp+0x31c>)
 8000fc4:	f001 f942 	bl	800224c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(45000);
 8000fc8:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 8000fcc:	f001 f91e 	bl	800220c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(200);
 8000fd0:	20c8      	movs	r0, #200	; 0xc8
 8000fd2:	f001 f92b 	bl	800222c <BSP_LCD_SetBackColor>
  for (int i=0;i<255-' ';i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	e026      	b.n	800102a <mainApp+0xb2>
	  BSP_LCD_DisplayChar(8*(i%20), 13*(i/20),i+' ');
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4baf      	ldr	r3, [pc, #700]	; (800129c <mainApp+0x324>)
 8000fe0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fe4:	10d9      	asrs	r1, r3, #3
 8000fe6:	17d3      	asrs	r3, r2, #31
 8000fe8:	1ac9      	subs	r1, r1, r3
 8000fea:	460b      	mov	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	1ad1      	subs	r1, r2, r3
 8000ff4:	b28b      	uxth	r3, r1
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	b298      	uxth	r0, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4aa7      	ldr	r2, [pc, #668]	; (800129c <mainApp+0x324>)
 8000ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8001002:	10d2      	asrs	r2, r2, #3
 8001004:	17db      	asrs	r3, r3, #31
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	b29b      	uxth	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	0052      	lsls	r2, r2, #1
 800100e:	441a      	add	r2, r3
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	4413      	add	r3, r2
 8001014:	b299      	uxth	r1, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	3320      	adds	r3, #32
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	f001 f94a 	bl	80022b8 <BSP_LCD_DisplayChar>
  for (int i=0;i<255-' ';i++){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2bde      	cmp	r3, #222	; 0xde
 800102e:	ddd5      	ble.n	8000fdc <mainApp+0x64>
//  while(1){} ;


// ========================================

  t = random();
 8001030:	f003 ff70 	bl	8004f14 <random>
 8001034:	4603      	mov	r3, r0
 8001036:	603b      	str	r3, [r7, #0]


  Delay(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f002 f9ff 	bl	800343c <HAL_Delay>
  printf("Display ID = %X\r\n", (unsigned int)BSP_LCD_ReadID());
 800103e:	f001 fe49 	bl	8002cd4 <BSP_LCD_ReadID>
 8001042:	4603      	mov	r3, r0
 8001044:	4619      	mov	r1, r3
 8001046:	4896      	ldr	r0, [pc, #600]	; (80012a0 <mainApp+0x328>)
 8001048:	f003 fed6 	bl	8004df8 <iprintf>
  #endif 

  while(1)
  {
    #ifdef  __GNUC__
    _impure_ptr->_r48->_rand_next = 0;
 800104c:	4b95      	ldr	r3, [pc, #596]	; (80012a4 <mainApp+0x32c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    #endif

    Delay(100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f002 f9ec 	bl	800343c <HAL_Delay>
    t = 300;
 8001064:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001068:	603b      	str	r3, [r7, #0]
    POWERMETER_START;
    Delay(t);
 800106a:	6838      	ldr	r0, [r7, #0]
 800106c:	f002 f9e6 	bl	800343c <HAL_Delay>
    POWERMETER_STOP;
    POWERMETER_REF;
    printf("Delay 300\r\n");
 8001070:	488d      	ldr	r0, [pc, #564]	; (80012a8 <mainApp+0x330>)
 8001072:	f003 ff47 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 8001076:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107a:	f002 f9df 	bl	800343c <HAL_Delay>

    POWERMETER_START;
    t = ClearTest();
 800107e:	f7ff f86d 	bl	800015c <ClearTest>
 8001082:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Clear Test: %d ms", (int)t);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	4888      	ldr	r0, [pc, #544]	; (80012ac <mainApp+0x334>)
 800108a:	f003 feb5 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 800108e:	200a      	movs	r0, #10
 8001090:	f002 f9d4 	bl	800343c <HAL_Delay>
 8001094:	4886      	ldr	r0, [pc, #536]	; (80012b0 <mainApp+0x338>)
 8001096:	f003 ff35 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 800109a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109e:	f002 f9cd 	bl	800343c <HAL_Delay>

    POWERMETER_START;
    t = PixelTest(100000);
 80010a2:	4884      	ldr	r0, [pc, #528]	; (80012b4 <mainApp+0x33c>)
 80010a4:	f7ff f86c 	bl	8000180 <PixelTest>
 80010a8:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Pixel Test: %d ms", (int)t);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4882      	ldr	r0, [pc, #520]	; (80012b8 <mainApp+0x340>)
 80010b0:	f003 fea2 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 80010b4:	200a      	movs	r0, #10
 80010b6:	f002 f9c1 	bl	800343c <HAL_Delay>
 80010ba:	487d      	ldr	r0, [pc, #500]	; (80012b0 <mainApp+0x338>)
 80010bc:	f003 ff22 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 80010c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c4:	f002 f9ba 	bl	800343c <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f001 f8d7 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = LineTest(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f7ff f89f 	bl	8000214 <LineTest>
 80010d6:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Line Test: %d ms", (int)t);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	4877      	ldr	r0, [pc, #476]	; (80012bc <mainApp+0x344>)
 80010de:	f003 fe8b 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 80010e2:	200a      	movs	r0, #10
 80010e4:	f002 f9aa 	bl	800343c <HAL_Delay>
 80010e8:	4871      	ldr	r0, [pc, #452]	; (80012b0 <mainApp+0x338>)
 80010ea:	f003 ff0b 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	f002 f9a3 	bl	800343c <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f001 f8c0 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = FillRectTest(250);
 80010fc:	20fa      	movs	r0, #250	; 0xfa
 80010fe:	f7ff f8ed 	bl	80002dc <FillRectTest>
 8001102:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Fill Rect Test: %d ms", (int)t);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	486d      	ldr	r0, [pc, #436]	; (80012c0 <mainApp+0x348>)
 800110a:	f003 fe75 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 800110e:	200a      	movs	r0, #10
 8001110:	f002 f994 	bl	800343c <HAL_Delay>
 8001114:	4866      	ldr	r0, [pc, #408]	; (80012b0 <mainApp+0x338>)
 8001116:	f003 fef5 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 800111a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111e:	f002 f98d 	bl	800343c <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001122:	2000      	movs	r0, #0
 8001124:	f001 f8aa 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = CircleTest(DELAY_CHAPTER);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f7ff f9fc 	bl	8000528 <CircleTest>
 8001130:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Circle Test: %d ms", (int)t);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	4863      	ldr	r0, [pc, #396]	; (80012c4 <mainApp+0x34c>)
 8001138:	f003 fe5e 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 800113c:	200a      	movs	r0, #10
 800113e:	f002 f97d 	bl	800343c <HAL_Delay>
 8001142:	485b      	ldr	r0, [pc, #364]	; (80012b0 <mainApp+0x338>)
 8001144:	f003 fede 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 8001148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114c:	f002 f976 	bl	800343c <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001150:	2000      	movs	r0, #0
 8001152:	f001 f893 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = FillCircleTest(250);
 8001156:	20fa      	movs	r0, #250	; 0xfa
 8001158:	f7ff fa62 	bl	8000620 <FillCircleTest>
 800115c:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Fill Circle Test: %d ms", (int)t);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	4859      	ldr	r0, [pc, #356]	; (80012c8 <mainApp+0x350>)
 8001164:	f003 fe48 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 8001168:	200a      	movs	r0, #10
 800116a:	f002 f967 	bl	800343c <HAL_Delay>
 800116e:	4850      	ldr	r0, [pc, #320]	; (80012b0 <mainApp+0x338>)
 8001170:	f003 fec8 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	f002 f960 	bl	800343c <HAL_Delay>

    #if BITMAP_TEST == 1
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 800117c:	2000      	movs	r0, #0
 800117e:	f001 f87d 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = CharTest(5000);
 8001182:	f241 3088 	movw	r0, #5000	; 0x1388
 8001186:	f7ff f917 	bl	80003b8 <CharTest>
 800118a:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Char Test: %d ms", (int)t);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	484e      	ldr	r0, [pc, #312]	; (80012cc <mainApp+0x354>)
 8001192:	f003 fe31 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 8001196:	200a      	movs	r0, #10
 8001198:	f002 f950 	bl	800343c <HAL_Delay>
 800119c:	4844      	ldr	r0, [pc, #272]	; (80012b0 <mainApp+0x338>)
 800119e:	f003 feb1 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 80011a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a6:	f002 f949 	bl	800343c <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f001 f866 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = BitmapTest(100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f7ff fb3d 	bl	8000830 <BitmapTest>
 80011b6:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Bitmap Test: %d ms", (int)t);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4844      	ldr	r0, [pc, #272]	; (80012d0 <mainApp+0x358>)
 80011be:	f003 fe1b 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 80011c2:	200a      	movs	r0, #10
 80011c4:	f002 f93a 	bl	800343c <HAL_Delay>
 80011c8:	4839      	ldr	r0, [pc, #228]	; (80012b0 <mainApp+0x338>)
 80011ca:	f003 fe9b 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 80011ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d2:	f002 f933 	bl	800343c <HAL_Delay>

    #if READ_TEST == 1
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f001 f850 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = ReadPixelTest(20);
 80011dc:	2014      	movs	r0, #20
 80011de:	f7ff fd31 	bl	8000c44 <ReadPixelTest>
 80011e2:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("ReadPixel Test: %d ms", (int)t);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	483a      	ldr	r0, [pc, #232]	; (80012d4 <mainApp+0x35c>)
 80011ea:	f003 fe05 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 80011ee:	200a      	movs	r0, #10
 80011f0:	f002 f924 	bl	800343c <HAL_Delay>
 80011f4:	482e      	ldr	r0, [pc, #184]	; (80012b0 <mainApp+0x338>)
 80011f6:	f003 fe85 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 80011fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fe:	f002 f91d 	bl	800343c <HAL_Delay>

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001202:	2000      	movs	r0, #0
 8001204:	f001 f83a 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = ReadImageTest(20);
 8001208:	2014      	movs	r0, #20
 800120a:	f7ff fdbb 	bl	8000d84 <ReadImageTest>
 800120e:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("ReadImage Test: %d ms", (int)t);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	4830      	ldr	r0, [pc, #192]	; (80012d8 <mainApp+0x360>)
 8001216:	f003 fdef 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 800121a:	200a      	movs	r0, #10
 800121c:	f002 f90e 	bl	800343c <HAL_Delay>
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <mainApp+0x338>)
 8001222:	f003 fe6f 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 8001226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122a:	f002 f907 	bl	800343c <HAL_Delay>
    #endif

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 800122e:	2000      	movs	r0, #0
 8001230:	f001 f824 	bl	800227c <BSP_LCD_Clear>
    ScrollTest(0);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fb41 	bl	80008bc <ScrollTest>
    printf("Scroll Test\r\n");
 800123a:	4828      	ldr	r0, [pc, #160]	; (80012dc <mainApp+0x364>)
 800123c:	f003 fe62 	bl	8004f04 <puts>
    Delay(DELAY_CHAPTER);
 8001240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001244:	f002 f8fa 	bl	800343c <HAL_Delay>

    #endif /* #if BITMAP_TEST == 1 */

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001248:	2000      	movs	r0, #0
 800124a:	f001 f817 	bl	800227c <BSP_LCD_Clear>
    POWERMETER_START;
    t = ColorTest();
 800124e:	f7ff fa63 	bl	8000718 <ColorTest>
 8001252:	6038      	str	r0, [r7, #0]
    POWERMETER_STOP;
    printf("Color Test: %d ms", (int)t);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	4821      	ldr	r0, [pc, #132]	; (80012e0 <mainApp+0x368>)
 800125a:	f003 fdcd 	bl	8004df8 <iprintf>
    POWERMETER_PRINT;
 800125e:	200a      	movs	r0, #10
 8001260:	f002 f8ec 	bl	800343c <HAL_Delay>
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <mainApp+0x338>)
 8001266:	f003 fe4d 	bl	8004f04 <puts>
    Delay(3 * DELAY_CHAPTER);
 800126a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800126e:	f002 f8e5 	bl	800343c <HAL_Delay>

    BSP_LCD_DisplayOff();
 8001272:	f001 fc11 	bl	8002a98 <BSP_LCD_DisplayOff>
    Delay(DELAY_CHAPTER);
 8001276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127a:	f002 f8df 	bl	800343c <HAL_Delay>
    BSP_LCD_DisplayOn();
 800127e:	f001 fc01 	bl	8002a84 <BSP_LCD_DisplayOn>
    Delay(DELAY_CHAPTER);
 8001282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001286:	f002 f8d9 	bl	800343c <HAL_Delay>

    printf("\r\n");
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <mainApp+0x338>)
 800128c:	f003 fe3a 	bl	8004f04 <puts>
    _impure_ptr->_r48->_rand_next = 0;
 8001290:	e6dc      	b.n	800104c <mainApp+0xd4>
 8001292:	bf00      	nop
 8001294:	20000004 	.word	0x20000004
 8001298:	08005fa0 	.word	0x08005fa0
 800129c:	66666667 	.word	0x66666667
 80012a0:	08005fb8 	.word	0x08005fb8
 80012a4:	20000078 	.word	0x20000078
 80012a8:	08005fcc 	.word	0x08005fcc
 80012ac:	08005fd8 	.word	0x08005fd8
 80012b0:	08005fec 	.word	0x08005fec
 80012b4:	000186a0 	.word	0x000186a0
 80012b8:	08005ff0 	.word	0x08005ff0
 80012bc:	08006004 	.word	0x08006004
 80012c0:	08006018 	.word	0x08006018
 80012c4:	08006030 	.word	0x08006030
 80012c8:	08006044 	.word	0x08006044
 80012cc:	0800605c 	.word	0x0800605c
 80012d0:	08006070 	.word	0x08006070
 80012d4:	08006084 	.word	0x08006084
 80012d8:	0800609c 	.word	0x0800609c
 80012dc:	080060b4 	.word	0x080060b4
 80012e0:	080060c4 	.word	0x080060c4

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <__NVIC_EnableIRQ+0x34>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <LcdWrite8+0x2c>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8001380:	2002      	movs	r0, #2
 8001382:	f000 f983 	bl	800168c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8001386:	bf00      	nop
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LcdWrite8+0x30>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1fb      	bne.n	8001388 <LcdWrite8+0x18>
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40013000 	.word	0x40013000
 80013a0:	4226011c 	.word	0x4226011c

080013a4 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <LcdCmdWrite8+0x34>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 80013b4:	4a09      	ldr	r2, [pc, #36]	; (80013dc <LcdCmdWrite8+0x38>)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 80013ba:	2002      	movs	r0, #2
 80013bc:	f000 f966 	bl	800168c <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80013c0:	bf00      	nop
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <LcdCmdWrite8+0x3c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1fb      	bne.n	80013c2 <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 80013ca:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <LcdCmdWrite8+0x34>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	422181b4 	.word	0x422181b4
 80013dc:	40013000 	.word	0x40013000
 80013e0:	4226011c 	.word	0x4226011c

080013e4 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 80013e8:	bf00      	nop
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <WaitForDmaEnd+0x18>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1fb      	bne.n	80013ea <WaitForDmaEnd+0x6>
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	200000f8 	.word	0x200000f8

08001400 <DMA1_Channel3_IRQHandler>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

//-----------------------------------------------------------------------------
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <DMA1_Channel3_IRQHandler+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800140c:	2b00      	cmp	r3, #0
 800140e:	d023      	beq.n	8001458 <DMA1_Channel3_IRQHandler+0x58>
  {
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <DMA1_Channel3_IRQHandler+0x64>)
 8001412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001416:	605a      	str	r2, [r3, #4]
    DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <DMA1_Channel3_IRQHandler+0x68>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
    while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 800141e:	bf00      	nop
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <DMA1_Channel3_IRQHandler+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <DMA1_Channel3_IRQHandler+0x20>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <DMA1_Channel3_IRQHandler+0x6c>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8001432:	bf00      	nop
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <DMA1_Channel3_IRQHandler+0x70>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1fb      	bne.n	8001434 <DMA1_Channel3_IRQHandler+0x34>
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f925 	bl	800168c <LCD_IO_Delay>

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <DMA1_Channel3_IRQHandler+0x74>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <DMA1_Channel3_IRQHandler+0x50>
      LCD_CS_OFF;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <DMA1_Channel3_IRQHandler+0x78>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <DMA1_Channel3_IRQHandler+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
}
 8001456:	e003      	b.n	8001460 <DMA1_Channel3_IRQHandler+0x60>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <DMA1_Channel3_IRQHandler+0x64>)
 800145a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145e:	605a      	str	r2, [r3, #4]
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40020000 	.word	0x40020000
 8001468:	40020030 	.word	0x40020030
 800146c:	42260084 	.word	0x42260084
 8001470:	4226011c 	.word	0x4226011c
 8001474:	200000f8 	.word	0x200000f8
 8001478:	422181b8 	.word	0x422181b8

0800147c <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <LCD_IO_WriteMultiData+0x74>)
 800148a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148e:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <LCD_IO_WriteMultiData+0x78>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <LCD_IO_WriteMultiData+0x78>)
 8001496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800149a:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <LCD_IO_WriteMultiData+0x7c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 80014a2:	bf00      	nop
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <LCD_IO_WriteMultiData+0x7c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f9      	bne.n	80014a4 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 80014b0:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <LCD_IO_WriteMultiData+0x7c>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	60d3      	str	r3, [r2, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <LCD_IO_WriteMultiData+0x7c>)
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <LCD_IO_WriteMultiData+0x80>)
 80014ba:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <LCD_IO_WriteMultiData+0x7c>)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	6053      	str	r3, [r2, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 80014c2:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LCD_IO_WriteMultiData+0x7c>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <LCD_IO_WriteMultiData+0x84>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <LCD_IO_WriteMultiData+0x78>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <LCD_IO_WriteMultiData+0x78>)
 80014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d8:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <LCD_IO_WriteMultiData+0x7c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <LCD_IO_WriteMultiData+0x7c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40013000 	.word	0x40013000
 80014f8:	40020030 	.word	0x40020030
 80014fc:	4001300c 	.word	0x4001300c
 8001500:	42260084 	.word	0x42260084

08001504 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d108      	bne.n	8001528 <LCD_IO_WriteMultiData8+0x24>
  {
    d8s = *pData;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <LCD_IO_WriteMultiData8+0x94>)
 800151c:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <LCD_IO_WriteMultiData8+0x94>)
 8001520:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8001522:	2312      	movs	r3, #18
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e02f      	b.n	8001588 <LCD_IO_WriteMultiData8+0x84>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8001528:	2392      	movs	r3, #146	; 0x92
 800152a:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 800152c:	e02c      	b.n	8001588 <LCD_IO_WriteMultiData8+0x84>
  {
    if(Size <= DMA_MAXSIZE)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001534:	4293      	cmp	r3, r2
 8001536:	d80f      	bhi.n	8001558 <LCD_IO_WriteMultiData8+0x54>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <LCD_IO_WriteMultiData8+0x98>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff ff9a 	bl	800147c <LCD_IO_WriteMultiData>
      Size = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d01a      	beq.n	8001588 <LCD_IO_WriteMultiData8+0x84>
        WaitForDmaEnd();
 8001552:	f7ff ff47 	bl	80013e4 <WaitForDmaEnd>
 8001556:	e017      	b.n	8001588 <LCD_IO_WriteMultiData8+0x84>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <LCD_IO_WriteMultiData8+0x98>)
 800155a:	2202      	movs	r2, #2
 800155c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff ff89 	bl	800147c <LCD_IO_WriteMultiData>
      if(dinc)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <LCD_IO_WriteMultiData8+0x76>
        pData+= DMA_MAXSIZE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001576:	33fe      	adds	r3, #254	; 0xfe
 8001578:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001580:	3bfe      	subs	r3, #254	; 0xfe
 8001582:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001584:	f7ff ff2e 	bl	80013e4 <WaitForDmaEnd>
  while(Size)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1cf      	bne.n	800152e <LCD_IO_WriteMultiData8+0x2a>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200000fc 	.word	0x200000fc
 800159c:	200000f8 	.word	0x200000f8

080015a0 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <LCD_IO_WriteMultiData16+0x26>
  {
    d16s = *pData;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	881a      	ldrh	r2, [r3, #0]
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <LCD_IO_WriteMultiData16+0xdc>)
 80015b8:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <LCD_IO_WriteMultiData16+0xdc>)
 80015bc:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 80015be:	f240 5312 	movw	r3, #1298	; 0x512
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e051      	b.n	800166a <LCD_IO_WriteMultiData16+0xca>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 80015c6:	f240 5392 	movw	r3, #1426	; 0x592
 80015ca:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 80015cc:	e04d      	b.n	800166a <LCD_IO_WriteMultiData16+0xca>
  {
    if(Size <= DMA_MAXSIZE)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d80f      	bhi.n	80015f8 <LCD_IO_WriteMultiData16+0x58>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <LCD_IO_WriteMultiData16+0xe0>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff ff4a 	bl	800147c <LCD_IO_WriteMultiData>
      Size = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d03b      	beq.n	800166a <LCD_IO_WriteMultiData16+0xca>
        WaitForDmaEnd();
 80015f2:	f7ff fef7 	bl	80013e4 <WaitForDmaEnd>
 80015f6:	e038      	b.n	800166a <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4a22      	ldr	r2, [pc, #136]	; (8001684 <LCD_IO_WriteMultiData16+0xe4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d81b      	bhi.n	8001638 <LCD_IO_WriteMultiData16+0x98>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <LCD_IO_WriteMultiData16+0xe0>)
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800160c:	3bfe      	subs	r3, #254	; 0xfe
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4619      	mov	r1, r3
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff ff32 	bl	800147c <LCD_IO_WriteMultiData>
      if(dinc)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <LCD_IO_WriteMultiData16+0x8c>
        pData+= Size - DMA_MAXSIZE;
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <LCD_IO_WriteMultiData16+0xe8>)
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 800162c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001630:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001632:	f7ff fed7 	bl	80013e4 <WaitForDmaEnd>
 8001636:	e018      	b.n	800166a <LCD_IO_WriteMultiData16+0xca>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <LCD_IO_WriteMultiData16+0xe0>)
 800163a:	2202      	movs	r2, #2
 800163c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff ff19 	bl	800147c <LCD_IO_WriteMultiData>
      if(dinc)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <LCD_IO_WriteMultiData16+0xbc>
        pData+= DMA_MAXSIZE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8001656:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800165a:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001662:	3bfe      	subs	r3, #254	; 0xfe
 8001664:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001666:	f7ff febd 	bl	80013e4 <WaitForDmaEnd>
  while(Size)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ae      	bne.n	80015ce <LCD_IO_WriteMultiData16+0x2e>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000fe 	.word	0x200000fe
 8001680:	200000f8 	.word	0x200000f8
 8001684:	0001fffb 	.word	0x0001fffb
 8001688:	7fff0002 	.word	0x7fff0002

0800168c <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  while(c--);
 8001694:	bf00      	nop
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1e5a      	subs	r2, r3, #1
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1fa      	bne.n	8001696 <LCD_IO_Delay+0xa>
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f001 fec1 	bl	800343c <HAL_Delay>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
	...

080016d8 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  #define AFIO_CLOCK            0
  #define LCD_SPI_ALTERSET
  #endif

  /* GPIO, DMA Clocks */
  RCC->APB2ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <LCD_IO_Init+0xd0>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a31      	ldr	r2, [pc, #196]	; (80017a8 <LCD_IO_Init+0xd0>)
 80016e2:	f043 030c 	orr.w	r3, r3, #12
 80016e6:	6193      	str	r3, [r2, #24]
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  #if (DMANUM(LCD_DMA_TX) >= 1) || (DMANUM(LCD_DMA_RX) >= 1)
  RCC->AHBENR |= DMA1_CLOCK_TX | DMA1_CLOCK_RX;
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <LCD_IO_Init+0xd0>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	4a2e      	ldr	r2, [pc, #184]	; (80017a8 <LCD_IO_Init+0xd0>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6153      	str	r3, [r2, #20]
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <LCD_IO_Init+0xd4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80016fc:	4a2b      	ldr	r2, [pc, #172]	; (80017ac <LCD_IO_Init+0xd4>)
 80016fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001702:	6013      	str	r3, [r2, #0]
  LCD_RST_OFF;
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <LCD_IO_Init+0xd8>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <LCD_IO_Init+0xdc>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <LCD_IO_Init+0xe0>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <LCD_IO_Init+0xd4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <LCD_IO_Init+0xd4>)
 8001720:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001724:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <LCD_IO_Init+0xd4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800172e:	4a1f      	ldr	r2, [pc, #124]	; (80017ac <LCD_IO_Init+0xd4>)
 8001730:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001734:	6013      	str	r3, [r2, #0]

  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <LCD_IO_Init+0xe4>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <LCD_IO_Init+0xe8>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_SCK);
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <LCD_IO_Init+0xec>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800174a:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <LCD_IO_Init+0xec>)
 800174c:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8001750:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_ALTER_50MHZ, LCD_MOSI);
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <LCD_IO_Init+0xec>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <LCD_IO_Init+0xec>)
 800175c:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8001760:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <LCD_IO_Init+0xf0>)
 8001764:	f240 324f 	movw	r2, #847	; 0x34f
 8001768:	601a      	str	r2, [r3, #0]

  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <LCD_IO_Init+0xf0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <LCD_IO_Init+0xf0>)
 8001770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001774:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8001776:	200a      	movs	r0, #10
 8001778:	f7ff ff98 	bl	80016ac <LCD_Delay>
  LCD_RST_ON;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <LCD_IO_Init+0xd8>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8001782:	200a      	movs	r0, #10
 8001784:	f7ff ff92 	bl	80016ac <LCD_Delay>
  LCD_RST_OFF;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <LCD_IO_Init+0xd8>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 800178e:	200a      	movs	r0, #10
 8001790:	f7ff ff8c 	bl	80016ac <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #if DMANUM(LCD_DMA_TX) > 0
  NVIC_SetPriority(DMAX_CHANNEL_IRQ(LCD_DMA_TX), LCD_DMA_IRQ_PR);
 8001794:	210f      	movs	r1, #15
 8001796:	200d      	movs	r0, #13
 8001798:	f7ff fdc0 	bl	800131c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMAX_CHANNEL_IRQ(LCD_DMA_TX));
 800179c:	200d      	movs	r0, #13
 800179e:	f7ff fda1 	bl	80012e4 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010c04 	.word	0x40010c04
 80017b0:	422181b0 	.word	0x422181b0
 80017b4:	422181b4 	.word	0x422181b4
 80017b8:	422181b8 	.word	0x422181b8
 80017bc:	42210194 	.word	0x42210194
 80017c0:	42420330 	.word	0x42420330
 80017c4:	40010800 	.word	0x40010800
 80017c8:	40013000 	.word	0x40013000

080017cc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 80017d6:	f7ff fe05 	bl	80013e4 <WaitForDmaEnd>
  LcdSpiMode8();
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <LCD_IO_WriteCmd8+0x30>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <LCD_IO_WriteCmd8+0x34>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fddb 	bl	80013a4 <LcdCmdWrite8>
  LCD_CS_OFF;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <LCD_IO_WriteCmd8+0x34>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	4226002c 	.word	0x4226002c
 8001800:	422181b8 	.word	0x422181b8

08001804 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 800180e:	f7ff fde9 	bl	80013e4 <WaitForDmaEnd>
  LcdSpiMode8();
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <LCD_IO_WriteData8+0x30>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <LCD_IO_WriteData8+0x34>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fda5 	bl	8001370 <LcdWrite8>
  LCD_CS_OFF;
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <LCD_IO_WriteData8+0x34>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	4226002c 	.word	0x4226002c
 8001838:	422181b8 	.word	0x422181b8

0800183c <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	603a      	str	r2, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	460b      	mov	r3, r1
 800184a:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 800184c:	f7ff fdca 	bl	80013e4 <WaitForDmaEnd>
  LcdSpiMode8();
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fda0 	bl	80013a4 <LcdCmdWrite8>
  LcdSpiMode16();
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fe95 	bl	80015a0 <LCD_IO_WriteMultiData16>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	4226002c 	.word	0x4226002c
 8001884:	422181b8 	.word	0x422181b8

08001888 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001896:	f7ff fda5 	bl	80013e4 <WaitForDmaEnd>
  LcdSpiMode8();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd7b 	bl	80013a4 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80018ae:	2201      	movs	r2, #1
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	68b8      	ldr	r0, [r7, #8]
 80018b4:	f7ff fe26 	bl	8001504 <LCD_IO_WriteMultiData8>
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	4226002c 	.word	0x4226002c
 80018c4:	422181b8 	.word	0x422181b8

080018c8 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 80018d6:	f7ff fd85 	bl	80013e4 <WaitForDmaEnd>
  LcdSpiMode8();
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <LCD_IO_WriteCmd8MultipleData16+0x44>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fd5b 	bl	80013a4 <LcdCmdWrite8>
  LcdSpiMode16();
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 80018f4:	2201      	movs	r2, #1
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	68b8      	ldr	r0, [r7, #8]
 80018fa:	f7ff fe51 	bl	80015a0 <LCD_IO_WriteMultiData16>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	4226002c 	.word	0x4226002c
 800190c:	422181b8 	.word	0x422181b8

08001910 <LCD_IO_ReadCmd8MultipleData8>:
  LcdCmdWrite16(Cmd);
  LCD_IO_WriteMultiData16(pData, Size, 1);
}

#if LCD_SPI_MODE == 0
__weak void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize) {}
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <LCD_IO_ReadCmd8MultipleData24to16>:
__weak void LCD_IO_ReadCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
__weak void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
 800192a:	b480      	push	{r7}
 800192c:	b085      	sub	sp, #20
 800192e:	af00      	add	r7, sp, #0
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <st7735_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt);}

//-----------------------------------------------------------------------------
void st7735_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  if((Is_st7735_Initialized & ST7735_LCD_INITIALIZED) == 0)
 8001948:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <st7735_Init+0xe4>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d115      	bne.n	8001980 <st7735_Init+0x3c>
  {
    Is_st7735_Initialized |= ST7735_LCD_INITIALIZED;
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <st7735_Init+0xe4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <st7735_Init+0xe4>)
 8001960:	701a      	strb	r2, [r3, #0]
    if((Is_st7735_Initialized & ST7735_IO_INITIALIZED) == 0)
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <st7735_Init+0xe4>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <st7735_Init+0x2e>
      LCD_IO_Init();
 800196e:	f7ff feb3 	bl	80016d8 <LCD_IO_Init>
    Is_st7735_Initialized |= ST7735_IO_INITIALIZED;
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <st7735_Init+0xe4>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <st7735_Init+0xe4>)
 800197e:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f7ff fe93 	bl	80016ac <LCD_Delay>
  LCD_IO_WriteCmd8(ST7735_SWRESET);
 8001986:	2001      	movs	r0, #1
 8001988:	f7ff ff20 	bl	80017cc <LCD_IO_WriteCmd8>
  LCD_Delay(1);
 800198c:	2001      	movs	r0, #1
 800198e:	f7ff fe8d 	bl	80016ac <LCD_Delay>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ST7735_GMCTRP1, (uint8_t *)"\x09\x16\x09\x20\x21\x1B\x13\x19\x17\x15\x1E\x2B\x04\x05\x02\x0E", 16);
 8001992:	2210      	movs	r2, #16
 8001994:	4925      	ldr	r1, [pc, #148]	; (8001a2c <st7735_Init+0xe8>)
 8001996:	20e0      	movs	r0, #224	; 0xe0
 8001998:	f7ff ff76 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ST7735_GMCTRN1, (uint8_t *)"\x0B\x14\x08\x1E\x22\x1D\x18\x1E\x1B\x1A\x24\x2B\x06\x06\x02\x0F", 16);
 800199c:	2210      	movs	r2, #16
 800199e:	4924      	ldr	r1, [pc, #144]	; (8001a30 <st7735_Init+0xec>)
 80019a0:	20e1      	movs	r0, #225	; 0xe1
 80019a2:	f7ff ff71 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ST7735_PWCTR1, (uint8_t *)"\x17\x15", 2);
 80019a6:	2202      	movs	r2, #2
 80019a8:	4922      	ldr	r1, [pc, #136]	; (8001a34 <st7735_Init+0xf0>)
 80019aa:	20c0      	movs	r0, #192	; 0xc0
 80019ac:	f7ff ff6c 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ST7735_PWCTR2, (uint8_t *)"\x41", 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	4921      	ldr	r1, [pc, #132]	; (8001a38 <st7735_Init+0xf4>)
 80019b4:	20c1      	movs	r0, #193	; 0xc1
 80019b6:	f7ff ff67 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ST7735_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 80019ba:	2203      	movs	r2, #3
 80019bc:	491f      	ldr	r1, [pc, #124]	; (8001a3c <st7735_Init+0xf8>)
 80019be:	20c5      	movs	r0, #197	; 0xc5
 80019c0:	f7ff ff62 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8MultipleData8(ST7735_COLMOD, (uint8_t *)"\x55", 1); // Interface Pixel Format (16 bit)
 80019c4:	2201      	movs	r2, #1
 80019c6:	491e      	ldr	r1, [pc, #120]	; (8001a40 <st7735_Init+0xfc>)
 80019c8:	203a      	movs	r0, #58	; 0x3a
 80019ca:	f7ff ff5d 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xB0, (uint8_t *)"\x80", 1); // Interface Mode Control (SDO NOT USE)
 80019ce:	2201      	movs	r2, #1
 80019d0:	491c      	ldr	r1, [pc, #112]	; (8001a44 <st7735_Init+0x100>)
 80019d2:	20b0      	movs	r0, #176	; 0xb0
 80019d4:	f7ff ff58 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xB1, (uint8_t *)"\xA0", 1);// Frame rate (60Hz)
 80019d8:	2201      	movs	r2, #1
 80019da:	491b      	ldr	r1, [pc, #108]	; (8001a48 <st7735_Init+0x104>)
 80019dc:	20b1      	movs	r0, #177	; 0xb1
 80019de:	f7ff ff53 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xB4, (uint8_t *)"\x02", 1);// Display Inversion Control (2-dot)
 80019e2:	2201      	movs	r2, #1
 80019e4:	4919      	ldr	r1, [pc, #100]	; (8001a4c <st7735_Init+0x108>)
 80019e6:	20b4      	movs	r0, #180	; 0xb4
 80019e8:	f7ff ff4e 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xB6, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 80019ec:	2202      	movs	r2, #2
 80019ee:	4918      	ldr	r1, [pc, #96]	; (8001a50 <st7735_Init+0x10c>)
 80019f0:	20b6      	movs	r0, #182	; 0xb6
 80019f2:	f7ff ff49 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE9, (uint8_t *)"\x00", 1);// Set Image Functio (Disable 24 bit data)
 80019f6:	2201      	movs	r2, #1
 80019f8:	4916      	ldr	r1, [pc, #88]	; (8001a54 <st7735_Init+0x110>)
 80019fa:	20e9      	movs	r0, #233	; 0xe9
 80019fc:	f7ff ff44 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\xA9\x51\x2C\x82", 4);// Adjust Control (D7 stream, loose)
 8001a00:	2204      	movs	r2, #4
 8001a02:	4915      	ldr	r1, [pc, #84]	; (8001a58 <st7735_Init+0x114>)
 8001a04:	20f7      	movs	r0, #247	; 0xf7
 8001a06:	f7ff ff3f 	bl	8001888 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ST7735_MADCTL); LCD_IO_WriteData8(ST7735_MAD_DATA_RIGHT_THEN_DOWN);
 8001a0a:	2036      	movs	r0, #54	; 0x36
 8001a0c:	f7ff fede 	bl	80017cc <LCD_IO_WriteCmd8>
 8001a10:	2060      	movs	r0, #96	; 0x60
 8001a12:	f7ff fef7 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_SLPOUT);    // Exit Sleep
 8001a16:	2011      	movs	r0, #17
 8001a18:	f7ff fed8 	bl	80017cc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ST7735_DISPON);    // Display on
 8001a1c:	2029      	movs	r0, #41	; 0x29
 8001a1e:	f7ff fed5 	bl	80017cc <LCD_IO_WriteCmd8>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000100 	.word	0x20000100
 8001a2c:	080060d8 	.word	0x080060d8
 8001a30:	080060ec 	.word	0x080060ec
 8001a34:	08006100 	.word	0x08006100
 8001a38:	08006104 	.word	0x08006104
 8001a3c:	08006108 	.word	0x08006108
 8001a40:	0800610c 	.word	0x0800610c
 8001a44:	08006110 	.word	0x08006110
 8001a48:	08006114 	.word	0x08006114
 8001a4c:	08006118 	.word	0x08006118
 8001a50:	0800611c 	.word	0x0800611c
 8001a54:	08006120 	.word	0x08006120
 8001a58:	08006124 	.word	0x08006124

08001a5c <st7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOn(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fe2e 	bl	80016c2 <LCD_IO_Bl_OnOff>
  LCD_IO_WriteCmd8(ST7735_SLPOUT);    // Exit Sleep
 8001a66:	2011      	movs	r0, #17
 8001a68:	f7ff feb0 	bl	80017cc <LCD_IO_WriteCmd8>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <st7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOff(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  LCD_IO_WriteCmd8(ST7735_SLPIN);    // Sleep
 8001a74:	2010      	movs	r0, #16
 8001a76:	f7ff fea9 	bl	80017cc <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fe21 	bl	80016c2 <LCD_IO_Bl_OnOff>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <st7735_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t st7735_GetLcdPixelWidth(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ST7735_SIZE_X;
 8001a88:	23a0      	movs	r3, #160	; 0xa0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <st7735_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t st7735_GetLcdPixelHeight(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  return ST7735_SIZE_Y;
 8001a96:	2380      	movs	r3, #128	; 0x80
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <st7735_ReadID>:
  * @brief  Get the ST7735 ID.
  * @param  None
  * @retval The ST7735 ID
  */
uint16_t st7735_ReadID(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  LCD_IO_ReadCmd8MultipleData8(ST7735_RDDID, (uint8_t *)&dt, 3, 0);
 8001aaa:	1d39      	adds	r1, r7, #4
 8001aac:	2300      	movs	r3, #0
 8001aae:	2203      	movs	r2, #3
 8001ab0:	2004      	movs	r0, #4
 8001ab2:	f7ff ff2d 	bl	8001910 <LCD_IO_ReadCmd8MultipleData8>
  if(dt == 0xF0897C) // ID1 = 0x7C, ID2 = 0x89, ID3 = 0xF0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <st7735_ReadID+0x30>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d102      	bne.n	8001ac4 <st7735_ReadID+0x24>
    return 0x7735;
 8001abe:	f247 7335 	movw	r3, #30517	; 0x7735
 8001ac2:	e000      	b.n	8001ac6 <st7735_ReadID+0x26>
  else
    return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	00f0897c 	.word	0x00f0897c

08001ad4 <st7735_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void st7735_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	460a      	mov	r2, r1
 8001ade:	80fb      	strh	r3, [r7, #6]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	80bb      	strh	r3, [r7, #4]
  ST7735_SETCURSOR(Xpos, Ypos);
 8001ae4:	202a      	movs	r0, #42	; 0x2a
 8001ae6:	f7ff fe71 	bl	80017cc <LCD_IO_WriteCmd8>
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fe86 	bl	8001804 <LCD_IO_WriteData8>
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fe81 	bl	8001804 <LCD_IO_WriteData8>
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fe7a 	bl	8001804 <LCD_IO_WriteData8>
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fe75 	bl	8001804 <LCD_IO_WriteData8>
 8001b1a:	202b      	movs	r0, #43	; 0x2b
 8001b1c:	f7ff fe56 	bl	80017cc <LCD_IO_WriteCmd8>
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fe6b 	bl	8001804 <LCD_IO_WriteData8>
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe66 	bl	8001804 <LCD_IO_WriteData8>
 8001b38:	88bb      	ldrh	r3, [r7, #4]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fe5f 	bl	8001804 <LCD_IO_WriteData8>
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fe5a 	bl	8001804 <LCD_IO_WriteData8>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <st7735_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void st7735_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
 8001b62:	460b      	mov	r3, r1
 8001b64:	80bb      	strh	r3, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	807b      	strh	r3, [r7, #2]
  ST7735_SETCURSOR(Xpos, Ypos);
 8001b6a:	202a      	movs	r0, #42	; 0x2a
 8001b6c:	f7ff fe2e 	bl	80017cc <LCD_IO_WriteCmd8>
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe43 	bl	8001804 <LCD_IO_WriteData8>
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe3e 	bl	8001804 <LCD_IO_WriteData8>
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fe37 	bl	8001804 <LCD_IO_WriteData8>
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fe32 	bl	8001804 <LCD_IO_WriteData8>
 8001ba0:	202b      	movs	r0, #43	; 0x2b
 8001ba2:	f7ff fe13 	bl	80017cc <LCD_IO_WriteCmd8>
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fe28 	bl	8001804 <LCD_IO_WriteData8>
 8001bb4:	88bb      	ldrh	r3, [r7, #4]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe23 	bl	8001804 <LCD_IO_WriteData8>
 8001bbe:	88bb      	ldrh	r3, [r7, #4]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fe1c 	bl	8001804 <LCD_IO_WriteData8>
 8001bcc:	88bb      	ldrh	r3, [r7, #4]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe17 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ST7735_RAMWR, RGBCode, 1);
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	202c      	movs	r0, #44	; 0x2c
 8001bde:	f7ff fe2d 	bl	800183c <LCD_IO_WriteCmd8DataFill16>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <st7735_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t st7735_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	460a      	mov	r2, r1
 8001bf4:	80fb      	strh	r3, [r7, #6]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ST7735_SETCURSOR(Xpos, Ypos);
 8001bfa:	202a      	movs	r0, #42	; 0x2a
 8001bfc:	f7ff fde6 	bl	80017cc <LCD_IO_WriteCmd8>
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fdfb 	bl	8001804 <LCD_IO_WriteData8>
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fdf6 	bl	8001804 <LCD_IO_WriteData8>
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fdef 	bl	8001804 <LCD_IO_WriteData8>
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fdea 	bl	8001804 <LCD_IO_WriteData8>
 8001c30:	202b      	movs	r0, #43	; 0x2b
 8001c32:	f7ff fdcb 	bl	80017cc <LCD_IO_WriteCmd8>
 8001c36:	88bb      	ldrh	r3, [r7, #4]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fde0 	bl	8001804 <LCD_IO_WriteData8>
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fddb 	bl	8001804 <LCD_IO_WriteData8>
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fdd4 	bl	8001804 <LCD_IO_WriteData8>
 8001c5c:	88bb      	ldrh	r3, [r7, #4]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fdcf 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ST7735_RAMRD, &ret, 1, 1);
 8001c66:	f107 010e 	add.w	r1, r7, #14
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	202e      	movs	r0, #46	; 0x2e
 8001c70:	f7ff fe5b 	bl	800192a <LCD_IO_ReadCmd8MultipleData24to16>
  return(ret);
 8001c74:	89fb      	ldrh	r3, [r7, #14]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <st7735_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void st7735_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4604      	mov	r4, r0
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4623      	mov	r3, r4
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	4603      	mov	r3, r0
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8001c9e:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <st7735_SetDisplayWindow+0xc8>)
 8001ca0:	88bb      	ldrh	r3, [r7, #4]
 8001ca2:	8013      	strh	r3, [r2, #0]
 8001ca4:	88ba      	ldrh	r2, [r7, #4]
 8001ca6:	883b      	ldrh	r3, [r7, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <st7735_SetDisplayWindow+0xcc>)
 8001cb2:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ST7735_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8001cb4:	202a      	movs	r0, #42	; 0x2a
 8001cb6:	f7ff fd89 	bl	80017cc <LCD_IO_WriteCmd8>
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fd9e 	bl	8001804 <LCD_IO_WriteData8>
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fd99 	bl	8001804 <LCD_IO_WriteData8>
 8001cd2:	88fa      	ldrh	r2, [r7, #6]
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	121b      	asrs	r3, r3, #8
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fd90 	bl	8001804 <LCD_IO_WriteData8>
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fd85 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8001cfa:	202b      	movs	r0, #43	; 0x2b
 8001cfc:	f7ff fd66 	bl	80017cc <LCD_IO_WriteCmd8>
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fd7b 	bl	8001804 <LCD_IO_WriteData8>
 8001d0e:	88bb      	ldrh	r3, [r7, #4]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fd76 	bl	8001804 <LCD_IO_WriteData8>
 8001d18:	88ba      	ldrh	r2, [r7, #4]
 8001d1a:	883b      	ldrh	r3, [r7, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	121b      	asrs	r3, r3, #8
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd6d 	bl	8001804 <LCD_IO_WriteData8>
 8001d2a:	88bb      	ldrh	r3, [r7, #4]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	883b      	ldrh	r3, [r7, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fd62 	bl	8001804 <LCD_IO_WriteData8>
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	20000102 	.word	0x20000102
 8001d4c:	20000104 	.word	0x20000104

08001d50 <st7735_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void st7735_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4604      	mov	r4, r0
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4623      	mov	r3, r4
 8001d60:	80fb      	strh	r3, [r7, #6]
 8001d62:	4603      	mov	r3, r0
 8001d64:	80bb      	strh	r3, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	807b      	strh	r3, [r7, #2]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd8(ST7735_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8001d6e:	202a      	movs	r0, #42	; 0x2a
 8001d70:	f7ff fd2c 	bl	80017cc <LCD_IO_WriteCmd8>
 8001d74:	88bb      	ldrh	r3, [r7, #4]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fd41 	bl	8001804 <LCD_IO_WriteData8>
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd3c 	bl	8001804 <LCD_IO_WriteData8>
 8001d8c:	88ba      	ldrh	r2, [r7, #4]
 8001d8e:	883b      	ldrh	r3, [r7, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	3b01      	subs	r3, #1
 8001d94:	121b      	asrs	r3, r3, #8
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fd33 	bl	8001804 <LCD_IO_WriteData8>
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fd28 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8001db4:	202b      	movs	r0, #43	; 0x2b
 8001db6:	f7ff fd09 	bl	80017cc <LCD_IO_WriteCmd8>
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fd1e 	bl	8001804 <LCD_IO_WriteData8>
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fd19 	bl	8001804 <LCD_IO_WriteData8>
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fd12 	bl	8001804 <LCD_IO_WriteData8>
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fd0d 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ST7735_RAMWR, RGBCode, Length);
 8001dea:	883a      	ldrh	r2, [r7, #0]
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	4619      	mov	r1, r3
 8001df0:	202c      	movs	r0, #44	; 0x2c
 8001df2:	f7ff fd23 	bl	800183c <LCD_IO_WriteCmd8DataFill16>
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}

08001dfe <st7735_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void st7735_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001dfe:	b590      	push	{r4, r7, lr}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4604      	mov	r4, r0
 8001e06:	4608      	mov	r0, r1
 8001e08:	4611      	mov	r1, r2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4623      	mov	r3, r4
 8001e0e:	80fb      	strh	r3, [r7, #6]
 8001e10:	4603      	mov	r3, r0
 8001e12:	80bb      	strh	r3, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd8(ST7735_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8001e1c:	202a      	movs	r0, #42	; 0x2a
 8001e1e:	f7ff fcd5 	bl	80017cc <LCD_IO_WriteCmd8>
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fcea 	bl	8001804 <LCD_IO_WriteData8>
 8001e30:	88bb      	ldrh	r3, [r7, #4]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fce5 	bl	8001804 <LCD_IO_WriteData8>
 8001e3a:	88bb      	ldrh	r3, [r7, #4]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fcde 	bl	8001804 <LCD_IO_WriteData8>
 8001e48:	88bb      	ldrh	r3, [r7, #4]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fcd9 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8001e52:	202b      	movs	r0, #43	; 0x2b
 8001e54:	f7ff fcba 	bl	80017cc <LCD_IO_WriteCmd8>
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fccf 	bl	8001804 <LCD_IO_WriteData8>
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fcca 	bl	8001804 <LCD_IO_WriteData8>
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	883b      	ldrh	r3, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	3b01      	subs	r3, #1
 8001e78:	121b      	asrs	r3, r3, #8
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fcc1 	bl	8001804 <LCD_IO_WriteData8>
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	883b      	ldrh	r3, [r7, #0]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fcb6 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ST7735_RAMWR, RGBCode, Length);
 8001e98:	883a      	ldrh	r2, [r7, #0]
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	202c      	movs	r0, #44	; 0x2c
 8001ea0:	f7ff fccc 	bl	800183c <LCD_IO_WriteCmd8DataFill16>
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd90      	pop	{r4, r7, pc}

08001eac <st7735_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void st7735_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4623      	mov	r3, r4
 8001ebc:	80fb      	strh	r3, [r7, #6]
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80bb      	strh	r3, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	807b      	strh	r3, [r7, #2]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd8(ST7735_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8001eca:	202a      	movs	r0, #42	; 0x2a
 8001ecc:	f7ff fc7e 	bl	80017cc <LCD_IO_WriteCmd8>
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fc93 	bl	8001804 <LCD_IO_WriteData8>
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fc8e 	bl	8001804 <LCD_IO_WriteData8>
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	4413      	add	r3, r2
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	121b      	asrs	r3, r3, #8
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fc85 	bl	8001804 <LCD_IO_WriteData8>
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fc7a 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8001f10:	202b      	movs	r0, #43	; 0x2b
 8001f12:	f7ff fc5b 	bl	80017cc <LCD_IO_WriteCmd8>
 8001f16:	88bb      	ldrh	r3, [r7, #4]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fc70 	bl	8001804 <LCD_IO_WriteData8>
 8001f24:	88bb      	ldrh	r3, [r7, #4]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fc6b 	bl	8001804 <LCD_IO_WriteData8>
 8001f2e:	88ba      	ldrh	r2, [r7, #4]
 8001f30:	883b      	ldrh	r3, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	3b01      	subs	r3, #1
 8001f36:	121b      	asrs	r3, r3, #8
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fc62 	bl	8001804 <LCD_IO_WriteData8>
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	883b      	ldrh	r3, [r7, #0]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc57 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ST7735_RAMWR, RGBCode, Xsize * Ysize);
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	883a      	ldrh	r2, [r7, #0]
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	8b3b      	ldrh	r3, [r7, #24]
 8001f62:	4619      	mov	r1, r3
 8001f64:	202c      	movs	r0, #44	; 0x2c
 8001f66:	f7ff fc69 	bl	800183c <LCD_IO_WriteCmd8DataFill16>
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
	...

08001f74 <st7735_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void st7735_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	603a      	str	r2, [r7, #0]
 8001f7e:	80fb      	strh	r3, [r7, #6]
 8001f80:	460b      	mov	r3, r1
 8001f82:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3302      	adds	r3, #2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3304      	adds	r3, #4
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	330a      	adds	r3, #10
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	330c      	adds	r3, #12
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4413      	add	r3, r2
 8001fcc:	603b      	str	r3, [r7, #0]

  LCD_IO_WriteCmd8(ST7735_MADCTL); LCD_IO_WriteData8(ST7735_MAD_DATA_RIGHT_THEN_UP);
 8001fce:	2036      	movs	r0, #54	; 0x36
 8001fd0:	f7ff fbfc 	bl	80017cc <LCD_IO_WriteCmd8>
 8001fd4:	2020      	movs	r0, #32
 8001fd6:	f7ff fc15 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(ST7735_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ST7735_SIZE_Y - 1 - yStart);
 8001fda:	202b      	movs	r0, #43	; 0x2b
 8001fdc:	f7ff fbf6 	bl	80017cc <LCD_IO_WriteCmd8>
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <st7735_DrawBitmap+0xd4>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001fe8:	121b      	asrs	r3, r3, #8
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fc09 	bl	8001804 <LCD_IO_WriteData8>
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <st7735_DrawBitmap+0xd4>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fc00 	bl	8001804 <LCD_IO_WriteData8>
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <st7735_DrawBitmap+0xd8>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800200c:	121b      	asrs	r3, r3, #8
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fbf7 	bl	8001804 <LCD_IO_WriteData8>
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <st7735_DrawBitmap+0xd8>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002020:	b2db      	uxtb	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fbee 	bl	8001804 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ST7735_RAMWR, (uint16_t *)pbmp, size);
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	202c      	movs	r0, #44	; 0x2c
 800202e:	f7ff fc4b 	bl	80018c8 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ST7735_MADCTL); LCD_IO_WriteData8(ST7735_MAD_DATA_RIGHT_THEN_DOWN);
 8002032:	2036      	movs	r0, #54	; 0x36
 8002034:	f7ff fbca 	bl	80017cc <LCD_IO_WriteCmd8>
 8002038:	2060      	movs	r0, #96	; 0x60
 800203a:	f7ff fbe3 	bl	8001804 <LCD_IO_WriteData8>
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000104 	.word	0x20000104
 800204c:	20000102 	.word	0x20000102

08002050 <st7735_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void st7735_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4604      	mov	r4, r0
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4623      	mov	r3, r4
 8002060:	80fb      	strh	r3, [r7, #6]
 8002062:	4603      	mov	r3, r0
 8002064:	80bb      	strh	r3, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	807b      	strh	r3, [r7, #2]
 800206a:	4613      	mov	r3, r2
 800206c:	803b      	strh	r3, [r7, #0]
  st7735_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800206e:	883b      	ldrh	r3, [r7, #0]
 8002070:	887a      	ldrh	r2, [r7, #2]
 8002072:	88b9      	ldrh	r1, [r7, #4]
 8002074:	88f8      	ldrh	r0, [r7, #6]
 8002076:	f7ff fe03 	bl	8001c80 <st7735_SetDisplayWindow>
  LCD_IO_WriteCmd8MultipleData16(ST7735_RAMWR, pData, Xsize * Ysize);
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	883a      	ldrh	r2, [r7, #0]
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	461a      	mov	r2, r3
 8002084:	69b9      	ldr	r1, [r7, #24]
 8002086:	202c      	movs	r0, #44	; 0x2c
 8002088:	f7ff fc1e 	bl	80018c8 <LCD_IO_WriteCmd8MultipleData16>
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <st7735_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void st7735_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4604      	mov	r4, r0
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	80fb      	strh	r3, [r7, #6]
 80020a6:	4603      	mov	r3, r0
 80020a8:	80bb      	strh	r3, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	807b      	strh	r3, [r7, #2]
 80020ae:	4613      	mov	r3, r2
 80020b0:	803b      	strh	r3, [r7, #0]
  st7735_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80020b2:	883b      	ldrh	r3, [r7, #0]
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	88b9      	ldrh	r1, [r7, #4]
 80020b8:	88f8      	ldrh	r0, [r7, #6]
 80020ba:	f7ff fde1 	bl	8001c80 <st7735_SetDisplayWindow>
  LCD_IO_ReadCmd8MultipleData24to16(ST7735_RAMRD, pData, Xsize * Ysize, 1);
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	883a      	ldrh	r2, [r7, #0]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	2301      	movs	r3, #1
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	202e      	movs	r0, #46	; 0x2e
 80020ce:	f7ff fc2c 	bl	800192a <LCD_IO_ReadCmd8MultipleData24to16>
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}
	...

080020dc <st7735_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void st7735_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
 80020e6:	460b      	mov	r3, r1
 80020e8:	80bb      	strh	r3, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ST7735_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <st7735_Scroll+0xb8>)
 80020f0:	885b      	ldrh	r3, [r3, #2]
 80020f2:	88ba      	ldrh	r2, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d104      	bne.n	8002102 <st7735_Scroll+0x26>
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <st7735_Scroll+0xb8>)
 80020fa:	88db      	ldrh	r3, [r3, #6]
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d013      	beq.n	800212a <st7735_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 8002102:	4a24      	ldr	r2, [pc, #144]	; (8002194 <st7735_Scroll+0xb8>)
 8002104:	88bb      	ldrh	r3, [r7, #4]
 8002106:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <st7735_Scroll+0xb8>)
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ST7735_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 800210e:	88ba      	ldrh	r2, [r7, #4]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4413      	add	r3, r2
 8002114:	b29b      	uxth	r3, r3
 8002116:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800211a:	b29a      	uxth	r2, r3
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <st7735_Scroll+0xb8>)
 800211e:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ST7735_VSCRDEF, &scrparam[1], 3);
 8002120:	2203      	movs	r2, #3
 8002122:	491d      	ldr	r1, [pc, #116]	; (8002198 <st7735_Scroll+0xbc>)
 8002124:	2033      	movs	r0, #51	; 0x33
 8002126:	f7ff fbcf 	bl	80018c8 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 800212a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212e:	425b      	negs	r3, r3
 8002130:	4a18      	ldr	r2, [pc, #96]	; (8002194 <st7735_Scroll+0xb8>)
 8002132:	8892      	ldrh	r2, [r2, #4]
 8002134:	fb93 f1f2 	sdiv	r1, r3, r2
 8002138:	fb02 f201 	mul.w	r2, r2, r1
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8002140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002144:	2b00      	cmp	r3, #0
 8002146:	da0a      	bge.n	800215e <st7735_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <st7735_Scroll+0xb8>)
 800214a:	889a      	ldrh	r2, [r3, #4]
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	4413      	add	r3, r2
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <st7735_Scroll+0xb8>)
 8002154:	885b      	ldrh	r3, [r3, #2]
 8002156:	4413      	add	r3, r2
 8002158:	b29b      	uxth	r3, r3
 800215a:	80fb      	strh	r3, [r7, #6]
 800215c:	e005      	b.n	800216a <st7735_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <st7735_Scroll+0xb8>)
 8002160:	885a      	ldrh	r2, [r3, #2]
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	4413      	add	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 800216a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <st7735_Scroll+0xb8>)
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <st7735_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <st7735_Scroll+0xb8>)
 800217a:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ST7735_VSCRSADD, scrparam[0], 1);
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <st7735_Scroll+0xb8>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	4619      	mov	r1, r3
 8002184:	2037      	movs	r0, #55	; 0x37
 8002186:	f7ff fb59 	bl	800183c <LCD_IO_WriteCmd8DataFill16>
  }
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000108 	.word	0x20000108
 8002198:	2000010a 	.word	0x2000010a

0800219c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <BSP_LCD_Init+0x34>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <BSP_LCD_Init+0x38>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <BSP_LCD_Init+0x38>)
 80021b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ba:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <BSP_LCD_Init+0x38>)
 80021be:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <BSP_LCD_Init+0x3c>)
 80021c0:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80021c6:	79fb      	ldrb	r3, [r7, #7]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000068 	.word	0x20000068
 80021d4:	20003398 	.word	0x20003398
 80021d8:	2000001c 	.word	0x2000001c

080021dc <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <BSP_LCD_GetXSize+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	4798      	blx	r3
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000068 	.word	0x20000068

080021f4 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <BSP_LCD_GetYSize+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	4798      	blx	r3
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000068 	.word	0x20000068

0800220c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	4a03      	ldr	r2, [pc, #12]	; (8002228 <BSP_LCD_SetTextColor+0x1c>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20003398 	.word	0x20003398

0800222c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	4a03      	ldr	r2, [pc, #12]	; (8002248 <BSP_LCD_SetBackColor+0x1c>)
 800223a:	6053      	str	r3, [r2, #4]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20003398 	.word	0x20003398

0800224c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <BSP_LCD_SetFont+0x18>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6093      	str	r3, [r2, #8]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20003398 	.word	0x20003398

08002268 <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <BSP_LCD_GetFont+0x10>)
 800226e:	689b      	ldr	r3, [r3, #8]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20003398 	.word	0x20003398

0800227c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af02      	add	r7, sp, #8
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <BSP_LCD_Clear+0x38>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800228c:	f7ff ffa6 	bl	80021dc <BSP_LCD_GetXSize>
 8002290:	4603      	mov	r3, r0
 8002292:	461d      	mov	r5, r3
 8002294:	f7ff ffae 	bl	80021f4 <BSP_LCD_GetYSize>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	462a      	mov	r2, r5
 80022a4:	2100      	movs	r1, #0
 80022a6:	2000      	movs	r0, #0
 80022a8:	47a0      	blx	r4
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdb0      	pop	{r4, r5, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000068 	.word	0x20000068

080022b8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	80fb      	strh	r3, [r7, #6]
 80022c2:	460b      	mov	r3, r1
 80022c4:	80bb      	strh	r3, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <BSP_LCD_DisplayChar+0x50>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80022d4:	490c      	ldr	r1, [pc, #48]	; (8002308 <BSP_LCD_DisplayChar+0x50>)
 80022d6:	6889      	ldr	r1, [r1, #8]
 80022d8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80022da:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <BSP_LCD_DisplayChar+0x50>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	889b      	ldrh	r3, [r3, #4]
 80022e4:	3307      	adds	r3, #7
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	da00      	bge.n	80022ec <BSP_LCD_DisplayChar+0x34>
 80022ea:	3307      	adds	r3, #7
 80022ec:	10db      	asrs	r3, r3, #3
 80022ee:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80022f2:	441a      	add	r2, r3
 80022f4:	88b9      	ldrh	r1, [r7, #4]
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fbd7 	bl	8002aac <DrawChar>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20003398 	.word	0x20003398

0800230c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60ba      	str	r2, [r7, #8]
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	81fb      	strh	r3, [r7, #14]
 800231a:	460b      	mov	r3, r1
 800231c:	81bb      	strh	r3, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002322:	2301      	movs	r3, #1
 8002324:	83fb      	strh	r3, [r7, #30]
 8002326:	2300      	movs	r3, #0
 8002328:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002336:	e002      	b.n	800233e <BSP_LCD_DisplayStringAt+0x32>
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	3301      	adds	r3, #1
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	617a      	str	r2, [r7, #20]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f6      	bne.n	8002338 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800234a:	f7ff ff47 	bl	80021dc <BSP_LCD_GetXSize>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b35      	ldr	r3, [pc, #212]	; (8002428 <BSP_LCD_DisplayStringAt+0x11c>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	889b      	ldrh	r3, [r3, #4]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d014      	beq.n	8002390 <BSP_LCD_DisplayStringAt+0x84>
 8002366:	2b03      	cmp	r3, #3
 8002368:	dc23      	bgt.n	80023b2 <BSP_LCD_DisplayStringAt+0xa6>
 800236a:	2b01      	cmp	r3, #1
 800236c:	d002      	beq.n	8002374 <BSP_LCD_DisplayStringAt+0x68>
 800236e:	2b02      	cmp	r3, #2
 8002370:	d011      	beq.n	8002396 <BSP_LCD_DisplayStringAt+0x8a>
 8002372:	e01e      	b.n	80023b2 <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <BSP_LCD_DisplayStringAt+0x11c>)
 800237c:	6892      	ldr	r2, [r2, #8]
 800237e:	8892      	ldrh	r2, [r2, #4]
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	89fb      	ldrh	r3, [r7, #14]
 800238a:	4413      	add	r3, r2
 800238c:	83fb      	strh	r3, [r7, #30]
      break;
 800238e:	e013      	b.n	80023b8 <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	83fb      	strh	r3, [r7, #30]
      break;
 8002394:	e010      	b.n	80023b8 <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	b29b      	uxth	r3, r3
 800239e:	4a22      	ldr	r2, [pc, #136]	; (8002428 <BSP_LCD_DisplayStringAt+0x11c>)
 80023a0:	6892      	ldr	r2, [r2, #8]
 80023a2:	8892      	ldrh	r2, [r2, #4]
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	89fb      	ldrh	r3, [r7, #14]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	83fb      	strh	r3, [r7, #30]
      break;
 80023b0:	e002      	b.n	80023b8 <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	83fb      	strh	r3, [r7, #30]
      break;
 80023b6:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80023b8:	e012      	b.n	80023e0 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	89b9      	ldrh	r1, [r7, #12]
 80023c0:	8bfb      	ldrh	r3, [r7, #30]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff78 	bl	80022b8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <BSP_LCD_DisplayStringAt+0x11c>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	889a      	ldrh	r2, [r3, #4]
 80023ce:	8bfb      	ldrh	r3, [r7, #30]
 80023d0:	4413      	add	r3, r2
 80023d2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3301      	adds	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
    i++;
 80023da:	8bbb      	ldrh	r3, [r7, #28]
 80023dc:	3301      	adds	r3, #1
 80023de:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2dc      	uxtb	r4, r3
 80023ee:	f7ff fef5 	bl	80021dc <BSP_LCD_GetXSize>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4619      	mov	r1, r3
 80023f6:	8bbb      	ldrh	r3, [r7, #28]
 80023f8:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <BSP_LCD_DisplayStringAt+0x11c>)
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	8892      	ldrh	r2, [r2, #4]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	1acb      	subs	r3, r1, r3
 8002404:	b29b      	uxth	r3, r3
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <BSP_LCD_DisplayStringAt+0x11c>)
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	8892      	ldrh	r2, [r2, #4]
 800240c:	4293      	cmp	r3, r2
 800240e:	bfac      	ite	ge
 8002410:	2301      	movge	r3, #1
 8002412:	2300      	movlt	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4023      	ands	r3, r4
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1cd      	bne.n	80023ba <BSP_LCD_DisplayStringAt+0xae>
  }
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	3724      	adds	r7, #36	; 0x24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}
 8002428:	20003398 	.word	0x20003398

0800242c <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0...5: if the Current fonts is Font24
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002438:	f7ff ff16 	bl	8002268 <BSP_LCD_GetFont>
 800243c:	4603      	mov	r3, r0
 800243e:	88db      	ldrh	r3, [r3, #6]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	b299      	uxth	r1, r3
 8002448:	2303      	movs	r3, #3
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff ff5d 	bl	800230c <BSP_LCD_DisplayStringAt>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
 8002466:	460b      	mov	r3, r1
 8002468:	80bb      	strh	r3, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <BSP_LCD_DrawPixel+0x34>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <BSP_LCD_DrawPixel+0x34>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	88b9      	ldrh	r1, [r7, #4]
 8002482:	88f8      	ldrh	r0, [r7, #6]
 8002484:	4798      	blx	r3
  }
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000068 	.word	0x20000068

08002494 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
 800249e:	460b      	mov	r3, r1
 80024a0:	80bb      	strh	r3, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <BSP_LCD_DrawHLine+0x6c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <BSP_LCD_DrawHLine+0x6c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6a1c      	ldr	r4, [r3, #32]
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <BSP_LCD_DrawHLine+0x70>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b298      	uxth	r0, r3
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	88ba      	ldrh	r2, [r7, #4]
 80024c4:	88f9      	ldrh	r1, [r7, #6]
 80024c6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80024c8:	e015      	b.n	80024f6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	e00e      	b.n	80024ee <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	4413      	add	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <BSP_LCD_DrawHLine+0x70>)
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	b292      	uxth	r2, r2
 80024e0:	88b9      	ldrh	r1, [r7, #4]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ffba 	bl	800245c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3ec      	bcc.n	80024d0 <BSP_LCD_DrawHLine+0x3c>
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd90      	pop	{r4, r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000068 	.word	0x20000068
 8002504:	20003398 	.word	0x20003398

08002508 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	80fb      	strh	r3, [r7, #6]
 8002512:	460b      	mov	r3, r1
 8002514:	80bb      	strh	r3, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <BSP_LCD_DrawVLine+0x6c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <BSP_LCD_DrawVLine+0x6c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <BSP_LCD_DrawVLine+0x70>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b298      	uxth	r0, r3
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	88ba      	ldrh	r2, [r7, #4]
 8002538:	88f9      	ldrh	r1, [r7, #6]
 800253a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 800253c:	e015      	b.n	800256a <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e00e      	b.n	8002562 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	b29a      	uxth	r2, r3
 8002548:	88bb      	ldrh	r3, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	b299      	uxth	r1, r3
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <BSP_LCD_DrawVLine+0x70>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff80 	bl	800245c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3301      	adds	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	429a      	cmp	r2, r3
 8002568:	d3ec      	bcc.n	8002544 <BSP_LCD_DrawVLine+0x3c>
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	bf00      	nop
 8002574:	20000068 	.word	0x20000068
 8002578:	20003398 	.word	0x20003398

0800257c <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b08b      	sub	sp, #44	; 0x2c
 8002580:	af00      	add	r7, sp, #0
 8002582:	4604      	mov	r4, r0
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4623      	mov	r3, r4
 800258c:	80fb      	strh	r3, [r7, #6]
 800258e:	4603      	mov	r3, r0
 8002590:	80bb      	strh	r3, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	807b      	strh	r3, [r7, #2]
 8002596:	4613      	mov	r3, r2
 8002598:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800259a:	2300      	movs	r3, #0
 800259c:	823b      	strh	r3, [r7, #16]
 800259e:	2300      	movs	r3, #0
 80025a0:	81fb      	strh	r3, [r7, #14]
 80025a2:	2300      	movs	r3, #0
 80025a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025a6:	2300      	movs	r3, #0
 80025a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80025aa:	2300      	movs	r3, #0
 80025ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80025ae:	2300      	movs	r3, #0
 80025b0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80025b2:	2300      	movs	r3, #0
 80025b4:	83fb      	strh	r3, [r7, #30]
 80025b6:	2300      	movs	r3, #0
 80025b8:	83bb      	strh	r3, [r7, #28]
 80025ba:	2300      	movs	r3, #0
 80025bc:	837b      	strh	r3, [r7, #26]
 80025be:	2300      	movs	r3, #0
 80025c0:	833b      	strh	r3, [r7, #24]
 80025c2:	2300      	movs	r3, #0
 80025c4:	82fb      	strh	r3, [r7, #22]
 80025c6:	2300      	movs	r3, #0
 80025c8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bfb8      	it	lt
 80025d8:	425b      	neglt	r3, r3
 80025da:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80025dc:	883a      	ldrh	r2, [r7, #0]
 80025de:	88bb      	ldrh	r3, [r7, #4]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bfb8      	it	lt
 80025e6:	425b      	neglt	r3, r3
 80025e8:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 80025ee:	88bb      	ldrh	r3, [r7, #4]
 80025f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d304      	bcc.n	8002604 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80025fe:	2301      	movs	r3, #1
 8002600:	843b      	strh	r3, [r7, #32]
 8002602:	e005      	b.n	8002610 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002608:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800260a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800260e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002610:	883a      	ldrh	r2, [r7, #0]
 8002612:	88bb      	ldrh	r3, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d304      	bcc.n	8002622 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002618:	2301      	movs	r3, #1
 800261a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800261c:	2301      	movs	r3, #1
 800261e:	83bb      	strh	r3, [r7, #28]
 8002620:	e005      	b.n	800262e <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002626:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800262c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800262e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002636:	429a      	cmp	r2, r3
 8002638:	db10      	blt.n	800265c <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800263a:	2300      	movs	r3, #0
 800263c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800263e:	2300      	movs	r3, #0
 8002640:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002642:	8a3b      	ldrh	r3, [r7, #16]
 8002644:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002646:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800264a:	0fda      	lsrs	r2, r3, #31
 800264c:	4413      	add	r3, r2
 800264e:	105b      	asrs	r3, r3, #1
 8002650:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002652:	89fb      	ldrh	r3, [r7, #14]
 8002654:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002656:	8a3b      	ldrh	r3, [r7, #16]
 8002658:	82bb      	strh	r3, [r7, #20]
 800265a:	e00f      	b.n	800267c <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800265c:	2300      	movs	r3, #0
 800265e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002660:	2300      	movs	r3, #0
 8002662:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800266c:	0fda      	lsrs	r2, r3, #31
 800266e:	4413      	add	r3, r2
 8002670:	105b      	asrs	r3, r3, #1
 8002672:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002674:	8a3b      	ldrh	r3, [r7, #16]
 8002676:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002678:	89fb      	ldrh	r3, [r7, #14]
 800267a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800267c:	2300      	movs	r3, #0
 800267e:	827b      	strh	r3, [r7, #18]
 8002680:	e031      	b.n	80026e6 <BSP_LCD_DrawLine+0x16a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 8002682:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002684:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <BSP_LCD_DrawLine+0x180>)
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	b292      	uxth	r2, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fee5 	bl	800245c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002692:	8b3a      	ldrh	r2, [r7, #24]
 8002694:	8afb      	ldrh	r3, [r7, #22]
 8002696:	4413      	add	r3, r2
 8002698:	b29b      	uxth	r3, r3
 800269a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 800269c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80026a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	db0e      	blt.n	80026c6 <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 80026a8:	8b3a      	ldrh	r2, [r7, #24]
 80026aa:	8b7b      	ldrh	r3, [r7, #26]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80026b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80026b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026b6:	4413      	add	r3, r2
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80026bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026be:	8bfb      	ldrh	r3, [r7, #30]
 80026c0:	4413      	add	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80026c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80026c8:	8c3b      	ldrh	r3, [r7, #32]
 80026ca:	4413      	add	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80026d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026d2:	8bbb      	ldrh	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80026da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	827b      	strh	r3, [r7, #18]
 80026e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	ddc7      	ble.n	8002682 <BSP_LCD_DrawLine+0x106>
  }
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	372c      	adds	r7, #44	; 0x2c
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	20003398 	.word	0x20003398

08002700 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	80fb      	strh	r3, [r7, #6]
 800270a:	460b      	mov	r3, r1
 800270c:	80bb      	strh	r3, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	f1c3 0303 	rsb	r3, r3, #3
 800271a:	617b      	str	r3, [r7, #20]
  CurX = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8002724:	e097      	b.n	8002856 <BSP_LCD_DrawCircle+0x156>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	b29a      	uxth	r2, r3
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	4413      	add	r3, r2
 800272e:	b298      	uxth	r0, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	b29b      	uxth	r3, r3
 8002734:	88ba      	ldrh	r2, [r7, #4]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	b29b      	uxth	r3, r3
 800273a:	4a4c      	ldr	r2, [pc, #304]	; (800286c <BSP_LCD_DrawCircle+0x16c>)
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	b292      	uxth	r2, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f7ff fe8b 	bl	800245c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	b29b      	uxth	r3, r3
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	b298      	uxth	r0, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	b29b      	uxth	r3, r3
 8002754:	88ba      	ldrh	r2, [r7, #4]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	b29b      	uxth	r3, r3
 800275a:	4a44      	ldr	r2, [pc, #272]	; (800286c <BSP_LCD_DrawCircle+0x16c>)
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	b292      	uxth	r2, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7ff fe7b 	bl	800245c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	b29a      	uxth	r2, r3
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	4413      	add	r3, r2
 800276e:	b298      	uxth	r0, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	b29b      	uxth	r3, r3
 8002774:	88ba      	ldrh	r2, [r7, #4]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	b29b      	uxth	r3, r3
 800277a:	4a3c      	ldr	r2, [pc, #240]	; (800286c <BSP_LCD_DrawCircle+0x16c>)
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	b292      	uxth	r2, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f7ff fe6b 	bl	800245c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	b29b      	uxth	r3, r3
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	b298      	uxth	r0, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	b29b      	uxth	r3, r3
 8002794:	88ba      	ldrh	r2, [r7, #4]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b29b      	uxth	r3, r3
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <BSP_LCD_DrawCircle+0x16c>)
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	b292      	uxth	r2, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7ff fe5b 	bl	800245c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	4413      	add	r3, r2
 80027ae:	b298      	uxth	r0, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	88bb      	ldrh	r3, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4a2c      	ldr	r2, [pc, #176]	; (800286c <BSP_LCD_DrawCircle+0x16c>)
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	b292      	uxth	r2, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f7ff fe4b 	bl	800245c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	b298      	uxth	r0, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	88bb      	ldrh	r3, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4a24      	ldr	r2, [pc, #144]	; (800286c <BSP_LCD_DrawCircle+0x16c>)
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	b292      	uxth	r2, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7ff fe3b 	bl	800245c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4413      	add	r3, r2
 80027ee:	b298      	uxth	r0, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	88bb      	ldrh	r3, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <BSP_LCD_DrawCircle+0x16c>)
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	b292      	uxth	r2, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f7ff fe2b 	bl	800245c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	b29b      	uxth	r3, r3
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	b298      	uxth	r0, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	b29a      	uxth	r2, r3
 8002814:	88bb      	ldrh	r3, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	b29b      	uxth	r3, r3
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <BSP_LCD_DrawCircle+0x16c>)
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	b292      	uxth	r2, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f7ff fe1b 	bl	800245c <BSP_LCD_DrawPixel>

    if (D < 0)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da06      	bge.n	800283a <BSP_LCD_DrawCircle+0x13a>
    { 
      D += (CurX << 2) + 6;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	009a      	lsls	r2, r3, #2
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4413      	add	r3, r2
 8002834:	3306      	adds	r3, #6
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	e00a      	b.n	8002850 <BSP_LCD_DrawCircle+0x150>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	009a      	lsls	r2, r3, #2
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	4413      	add	r3, r2
 8002846:	330a      	adds	r3, #10
 8002848:	617b      	str	r3, [r7, #20]
      CurY--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b01      	subs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	3301      	adds	r3, #1
 8002854:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	429a      	cmp	r2, r3
 800285c:	f67f af63 	bls.w	8002726 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20003398 	.word	0x20003398

08002870 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	603a      	str	r2, [r7, #0]
 800287a:	80fb      	strh	r3, [r7, #6]
 800287c:	460b      	mov	r3, r1
 800287e:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3312      	adds	r3, #18
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	3313      	adds	r3, #19
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	441a      	add	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3314      	adds	r3, #20
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	441a      	add	r2, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3315      	adds	r3, #21
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	061b      	lsls	r3, r3, #24
 80028ac:	4413      	add	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	3316      	adds	r3, #22
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3317      	adds	r3, #23
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	441a      	add	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3318      	adds	r3, #24
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	441a      	add	r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	3319      	adds	r3, #25
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	4413      	add	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	88b9      	ldrh	r1, [r7, #4]
 80028e2:	88f8      	ldrh	r0, [r7, #6]
 80028e4:	f000 f9d4 	bl	8002c90 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <BSP_LCD_DrawBitmap+0xb0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <BSP_LCD_DrawBitmap+0xb0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	88b9      	ldrh	r1, [r7, #4]
 80028fa:	88f8      	ldrh	r0, [r7, #6]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002900:	f7ff fc6c 	bl	80021dc <BSP_LCD_GetXSize>
 8002904:	4603      	mov	r3, r0
 8002906:	461c      	mov	r4, r3
 8002908:	f7ff fc74 	bl	80021f4 <BSP_LCD_GetYSize>
 800290c:	4603      	mov	r3, r0
 800290e:	4622      	mov	r2, r4
 8002910:	2100      	movs	r1, #0
 8002912:	2000      	movs	r0, #0
 8002914:	f000 f9bc 	bl	8002c90 <SetDisplayWindow>
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	20000068 	.word	0x20000068

08002924 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002924:	b5b0      	push	{r4, r5, r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af02      	add	r7, sp, #8
 800292a:	4604      	mov	r4, r0
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4623      	mov	r3, r4
 8002934:	80fb      	strh	r3, [r7, #6]
 8002936:	4603      	mov	r3, r0
 8002938:	80bb      	strh	r3, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	807b      	strh	r3, [r7, #2]
 800293e:	4613      	mov	r3, r2
 8002940:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <BSP_LCD_FillRect+0x40>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002948:	4b07      	ldr	r3, [pc, #28]	; (8002968 <BSP_LCD_FillRect+0x44>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	883d      	ldrh	r5, [r7, #0]
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	88b9      	ldrh	r1, [r7, #4]
 8002954:	88f8      	ldrh	r0, [r7, #6]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	462b      	mov	r3, r5
 800295a:	47a0      	blx	r4
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bdb0      	pop	{r4, r5, r7, pc}
 8002964:	20000068 	.word	0x20000068
 8002968:	20003398 	.word	0x20003398

0800296c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
 8002976:	460b      	mov	r3, r1
 8002978:	80bb      	strh	r3, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	f1c3 0303 	rsb	r3, r3, #3
 8002986:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <BSP_LCD_FillCircle+0x114>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fc38 	bl	800220c <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 800299c:	e061      	b.n	8002a62 <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d021      	beq.n	80029e8 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	b298      	uxth	r0, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	88bb      	ldrh	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	b299      	uxth	r1, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	f7ff fd67 	bl	8002494 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	b298      	uxth	r0, r3
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	88ba      	ldrh	r2, [r7, #4]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	b299      	uxth	r1, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7ff fd56 	bl	8002494 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d021      	beq.n	8002a32 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	b298      	uxth	r0, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	88ba      	ldrh	r2, [r7, #4]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	b299      	uxth	r1, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f7ff fd42 	bl	8002494 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	b298      	uxth	r0, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	88bb      	ldrh	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	b299      	uxth	r1, r3
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f7ff fd31 	bl	8002494 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da06      	bge.n	8002a46 <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	009a      	lsls	r2, r3, #2
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3306      	adds	r3, #6
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e00a      	b.n	8002a5c <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	009a      	lsls	r2, r3, #2
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	4413      	add	r3, r2
 8002a52:	330a      	adds	r3, #10
 8002a54:	617b      	str	r3, [r7, #20]
      CurY--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d999      	bls.n	800299e <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	88b9      	ldrh	r1, [r7, #4]
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fe45 	bl	8002700 <BSP_LCD_DrawCircle>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20003398 	.word	0x20003398

08002a84 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8002a88:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <BSP_LCD_DisplayOn+0x10>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4798      	blx	r3
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000068 	.word	0x20000068

08002a98 <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOff();
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <BSP_LCD_DisplayOff+0x10>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	4798      	blx	r3
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000068 	.word	0x20000068

08002aac <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	603a      	str	r2, [r7, #0]
 8002ab6:	80fb      	strh	r3, [r7, #6]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	82fb      	strh	r3, [r7, #22]
 8002acc:	2300      	movs	r3, #0
 8002ace:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8002adc:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <DrawChar+0x1c0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	88db      	ldrh	r3, [r3, #6]
 8002ae2:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8002ae4:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <DrawChar+0x1c0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	889b      	ldrh	r3, [r3, #4]
 8002aea:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8002aec:	8afb      	ldrh	r3, [r7, #22]
 8002aee:	8aba      	ldrh	r2, [r7, #20]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	331b      	adds	r3, #27
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <DrawChar+0x1c4>)
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8002b02:	8afb      	ldrh	r3, [r7, #22]
 8002b04:	8aba      	ldrh	r2, [r7, #20]
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	331b      	adds	r3, #27
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	141a      	asrs	r2, r3, #16
 8002b10:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <DrawChar+0x1c8>)
 8002b12:	b292      	uxth	r2, r2
 8002b14:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8002b16:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <DrawChar+0x1cc>)
 8002b18:	2236      	movs	r2, #54	; 0x36
 8002b1a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8002b1c:	4a57      	ldr	r2, [pc, #348]	; (8002c7c <DrawChar+0x1d0>)
 8002b1e:	8abb      	ldrh	r3, [r7, #20]
 8002b20:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8002b22:	8abb      	ldrh	r3, [r7, #20]
 8002b24:	141a      	asrs	r2, r3, #16
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <DrawChar+0x1d4>)
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8002b2c:	4a55      	ldr	r2, [pc, #340]	; (8002c84 <DrawChar+0x1d8>)
 8002b2e:	8afb      	ldrh	r3, [r7, #22]
 8002b30:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8002b32:	8afb      	ldrh	r3, [r7, #22]
 8002b34:	141a      	asrs	r2, r3, #16
 8002b36:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <DrawChar+0x1dc>)
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8002b3c:	8abb      	ldrh	r3, [r7, #20]
 8002b3e:	3307      	adds	r3, #7
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	da00      	bge.n	8002b46 <DrawChar+0x9a>
 8002b44:	3307      	adds	r3, #7
 8002b46:	10db      	asrs	r3, r3, #3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	8abb      	ldrh	r3, [r7, #20]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	e078      	b.n	8002c4e <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8002b5c:	8abb      	ldrh	r3, [r7, #20]
 8002b5e:	3307      	adds	r3, #7
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da00      	bge.n	8002b66 <DrawChar+0xba>
 8002b64:	3307      	adds	r3, #7
 8002b66:	10db      	asrs	r3, r3, #3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	fb03 f302 	mul.w	r3, r3, r2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8002b76:	8abb      	ldrh	r3, [r7, #20]
 8002b78:	3b11      	subs	r3, #17
 8002b7a:	2b07      	cmp	r3, #7
 8002b7c:	d80c      	bhi.n	8002b98 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3301      	adds	r3, #1
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	3202      	adds	r2, #2
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 8002b98:	8abb      	ldrh	r3, [r7, #20]
 8002b9a:	3b09      	subs	r3, #9
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d807      	bhi.n	8002bb0 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	3201      	adds	r2, #1
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8002bb0:	8abb      	ldrh	r3, [r7, #20]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	2b07      	cmp	r3, #7
 8002bb6:	d802      	bhi.n	8002bbe <DrawChar+0x112>
    {
      line =  pchar[0];
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
 8002bc2:	e03d      	b.n	8002c40 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8002bc4:	8afa      	ldrh	r2, [r7, #22]
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	8aba      	ldrh	r2, [r7, #20]
 8002bce:	fb02 f203 	mul.w	r2, r2, r3
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	331b      	adds	r3, #27
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8002bdc:	8aba      	ldrh	r2, [r7, #20]
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	1ad2      	subs	r2, r2, r3
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	4413      	add	r3, r2
 8002be6:	3b01      	subs	r3, #1
 8002be8:	2201      	movs	r2, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d010      	beq.n	8002c1a <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <DrawChar+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b2d9      	uxtb	r1, r3
 8002bfe:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <DrawChar+0x1e0>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	460a      	mov	r2, r1
 8002c06:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <DrawChar+0x1c0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0a1a      	lsrs	r2, r3, #8
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2d1      	uxtb	r1, r2
 8002c14:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <DrawChar+0x1e0>)
 8002c16:	54d1      	strb	r1, [r2, r3]
 8002c18:	e00f      	b.n	8002c3a <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <DrawChar+0x1c0>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	b2d9      	uxtb	r1, r3
 8002c20:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <DrawChar+0x1e0>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4413      	add	r3, r2
 8002c26:	460a      	mov	r2, r1
 8002c28:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <DrawChar+0x1c0>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0a1a      	lsrs	r2, r3, #8
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	3301      	adds	r3, #1
 8002c34:	b2d1      	uxtb	r1, r2
 8002c36:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <DrawChar+0x1e0>)
 8002c38:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	8abb      	ldrh	r3, [r7, #20]
 8002c42:	6a3a      	ldr	r2, [r7, #32]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3bd      	bcc.n	8002bc4 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	8afb      	ldrh	r3, [r7, #22]
 8002c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d382      	bcc.n	8002b5c <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8002c56:	88b9      	ldrh	r1, [r7, #4]
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <DrawChar+0x1e0>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fe07 	bl	8002870 <BSP_LCD_DrawBitmap>
}
 8002c62:	bf00      	nop
 8002c64:	3728      	adds	r7, #40	; 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20003398 	.word	0x20003398
 8002c70:	20000112 	.word	0x20000112
 8002c74:	20000114 	.word	0x20000114
 8002c78:	2000011a 	.word	0x2000011a
 8002c7c:	20000122 	.word	0x20000122
 8002c80:	20000124 	.word	0x20000124
 8002c84:	20000126 	.word	0x20000126
 8002c88:	20000128 	.word	0x20000128
 8002c8c:	20000110 	.word	0x20000110

08002c90 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	80fb      	strh	r3, [r7, #6]
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	80bb      	strh	r3, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	807b      	strh	r3, [r7, #2]
 8002caa:	4613      	mov	r3, r2
 8002cac:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <SetDisplayWindow+0x40>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <SetDisplayWindow+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69dc      	ldr	r4, [r3, #28]
 8002cbe:	883b      	ldrh	r3, [r7, #0]
 8002cc0:	887a      	ldrh	r2, [r7, #2]
 8002cc2:	88b9      	ldrh	r1, [r7, #4]
 8002cc4:	88f8      	ldrh	r0, [r7, #6]
 8002cc6:	47a0      	blx	r4
  }  
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	20000068 	.word	0x20000068

08002cd4 <BSP_LCD_ReadID>:
  * @brief  Get display ID
  * @param  none
  * @retval ID number
  */
uint16_t BSP_LCD_ReadID(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  if(lcd_drv->ReadID)
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <BSP_LCD_ReadID+0x20>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <BSP_LCD_ReadID+0x1a>
    return lcd_drv->ReadID();
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <BSP_LCD_ReadID+0x20>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4798      	blx	r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	e000      	b.n	8002cf0 <BSP_LCD_ReadID+0x1c>
  else
    return 0;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000068 	.word	0x20000068

08002cf8 <BSP_LCD_ReadPixel>:
  * @param  Xpos: LCD X position
  * @param  Ypos: LCD Y position
  * @retval RGB565 pixel color
  */
uint16_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	460a      	mov	r2, r1
 8002d02:	80fb      	strh	r3, [r7, #6]
 8002d04:	4613      	mov	r3, r2
 8002d06:	80bb      	strh	r3, [r7, #4]
  if(lcd_drv->ReadPixel != NULL)
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <BSP_LCD_ReadPixel+0x38>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <BSP_LCD_ReadPixel+0x2c>
    return lcd_drv->ReadPixel(Xpos, Ypos);
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <BSP_LCD_ReadPixel+0x38>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	88b9      	ldrh	r1, [r7, #4]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4798      	blx	r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	e000      	b.n	8002d26 <BSP_LCD_ReadPixel+0x2e>
  else
    return 0;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000068 	.word	0x20000068

08002d34 <BSP_LCD_DrawRGB16Image>:
  * @param  Height: image height
  * @param  *pData: image data pointer
  * @retval None
  */
void BSP_LCD_DrawRGB16Image(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002d34:	b5b0      	push	{r4, r5, r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	80fb      	strh	r3, [r7, #6]
 8002d46:	4603      	mov	r3, r0
 8002d48:	80bb      	strh	r3, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	807b      	strh	r3, [r7, #2]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	803b      	strh	r3, [r7, #0]
  lcd_drv->DrawRGBImage(Xpos, Ypos, Xsize, Ysize, pData);
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <BSP_LCD_DrawRGB16Image+0x3c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002d58:	883d      	ldrh	r5, [r7, #0]
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	88b9      	ldrh	r1, [r7, #4]
 8002d5e:	88f8      	ldrh	r0, [r7, #6]
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	462b      	mov	r3, r5
 8002d66:	47a0      	blx	r4
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d70:	20000068 	.word	0x20000068

08002d74 <BSP_LCD_ReadRGB16Image>:
  * @param  Height: image height
  * @param  *pData: image data pointer
  * @retval *pData
  */
void BSP_LCD_ReadRGB16Image(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8002d74:	b5b0      	push	{r4, r5, r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	80fb      	strh	r3, [r7, #6]
 8002d86:	4603      	mov	r3, r0
 8002d88:	80bb      	strh	r3, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	807b      	strh	r3, [r7, #2]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	803b      	strh	r3, [r7, #0]
  lcd_drv->ReadRGBImage(Xpos, Ypos, Xsize, Ysize, pData);
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <BSP_LCD_ReadRGB16Image+0x3c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8002d98:	883d      	ldrh	r5, [r7, #0]
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	88b9      	ldrh	r1, [r7, #4]
 8002d9e:	88f8      	ldrh	r0, [r7, #6]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	462b      	mov	r3, r5
 8002da6:	47a0      	blx	r4
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}
 8002db0:	20000068 	.word	0x20000068

08002db4 <BSP_LCD_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void BSP_LCD_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	80bb      	strh	r3, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	807b      	strh	r3, [r7, #2]
  lcd_drv->Scroll(Scroll, TopFix, BottonFix);
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <BSP_LCD_Scroll+0x2c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	887a      	ldrh	r2, [r7, #2]
 8002dce:	88b9      	ldrh	r1, [r7, #4]
 8002dd0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002dd4:	4798      	blx	r3
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000068 	.word	0x20000068

08002de4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002dec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002df0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002dfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e00:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002e04:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002e0c:	e000      	b.n	8002e10 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002e0e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002e10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f9      	beq.n	8002e0e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002e1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002e24:	687b      	ldr	r3, [r7, #4]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i = 0; i < len; i++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e009      	b.n	8002e56 <_write+0x26>
		ITM_SendChar(*ptr++);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	60ba      	str	r2, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ffca 	bl	8002de4 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3301      	adds	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	dbf1      	blt.n	8002e42 <_write+0x12>
	return len;
 8002e5e:	687b      	ldr	r3, [r7, #4]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e6c:	f000 fab4 	bl	80033d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e70:	f000 f807 	bl	8002e82 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e74:	f000 f8ac 	bl	8002fd0 <MX_GPIO_Init>
  MX_RTC_Init();
 8002e78:	f000 f860 	bl	8002f3c <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mainApp();
 8002e7c:	f7fe f87c 	bl	8000f78 <mainApp>
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <main+0x18>

08002e82 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b094      	sub	sp, #80	; 0x50
 8002e86:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e8c:	2228      	movs	r2, #40	; 0x28
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 ffa9 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002eb2:	2309      	movs	r3, #9
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ed2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fbbd 	bl	800365c <HAL_RCC_OscConfig>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002ee8:	f000 f8be 	bl	8003068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eec:	230f      	movs	r3, #15
 8002eee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002efc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fe27 	bl	8003b5c <HAL_RCC_ClockConfig>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f14:	f000 f8a8 	bl	8003068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f20:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 ffe3 	bl	8003ef0 <HAL_RCCEx_PeriphCLKConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002f30:	f000 f89a 	bl	8003068 <Error_Handler>
  }
}
 8002f34:	bf00      	nop
 8002f36:	3750      	adds	r7, #80	; 0x50
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	2100      	movs	r1, #0
 8002f46:	460a      	mov	r2, r1
 8002f48:	801a      	strh	r2, [r3, #0]
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002f4e:	2300      	movs	r3, #0
 8002f50:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <MX_RTC_Init+0x8c>)
 8002f54:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <MX_RTC_Init+0x90>)
 8002f56:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_RTC_Init+0x8c>)
 8002f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <MX_RTC_Init+0x8c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f66:	4818      	ldr	r0, [pc, #96]	; (8002fc8 <MX_RTC_Init+0x8c>)
 8002f68:	f001 f93c 	bl	80041e4 <HAL_RTC_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8002f72:	f000 f879 	bl	8003068 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2201      	movs	r2, #1
 8002f86:	4619      	mov	r1, r3
 8002f88:	480f      	ldr	r0, [pc, #60]	; (8002fc8 <MX_RTC_Init+0x8c>)
 8002f8a:	f001 f9c1 	bl	8004310 <HAL_RTC_SetTime>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8002f94:	f000 f868 	bl	8003068 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002fa8:	463b      	mov	r3, r7
 8002faa:	2201      	movs	r2, #1
 8002fac:	4619      	mov	r1, r3
 8002fae:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <MX_RTC_Init+0x8c>)
 8002fb0:	f001 fa46 	bl	8004440 <HAL_RTC_SetDate>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002fba:	f000 f855 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200033a4 	.word	0x200033a4
 8002fcc:	40002800 	.word	0x40002800

08002fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <MX_GPIO_Init+0x70>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	4a19      	ldr	r2, [pc, #100]	; (8003040 <MX_GPIO_Init+0x70>)
 8002fdc:	f043 0310 	orr.w	r3, r3, #16
 8002fe0:	6193      	str	r3, [r2, #24]
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <MX_GPIO_Init+0x70>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <MX_GPIO_Init+0x70>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	4a13      	ldr	r2, [pc, #76]	; (8003040 <MX_GPIO_Init+0x70>)
 8002ff4:	f043 0320 	orr.w	r3, r3, #32
 8002ff8:	6193      	str	r3, [r2, #24]
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_GPIO_Init+0x70>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <MX_GPIO_Init+0x70>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <MX_GPIO_Init+0x70>)
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	6193      	str	r3, [r2, #24]
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <MX_GPIO_Init+0x70>)
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <MX_GPIO_Init+0x70>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <MX_GPIO_Init+0x70>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6193      	str	r3, [r2, #24]
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <MX_GPIO_Init+0x70>)
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	683b      	ldr	r3, [r7, #0]

}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003056:	f000 f9d5 	bl	8003404 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40000800 	.word	0x40000800

08003068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_MspInit+0x5c>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <HAL_MspInit+0x5c>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6193      	str	r3, [r2, #24]
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_MspInit+0x5c>)
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_MspInit+0x5c>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <HAL_MspInit+0x5c>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	61d3      	str	r3, [r2, #28]
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <HAL_MspInit+0x5c>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_MspInit+0x60>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_MspInit+0x60>)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40010000 	.word	0x40010000

080030d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_RTC_MspInit+0x3c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d110      	bne.n	800310c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80030ea:	f000 faab 	bl	8003644 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_RTC_MspInit+0x40>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_RTC_MspInit+0x40>)
 80030f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030f8:	61d3      	str	r3, [r2, #28]
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RTC_MspInit+0x40>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RTC_MspInit+0x44>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40002800 	.word	0x40002800
 8003118:	40021000 	.word	0x40021000
 800311c:	4242043c 	.word	0x4242043c

08003120 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	; 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8003130:	2200      	movs	r2, #0
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	201e      	movs	r0, #30
 8003136:	f000 fa5a 	bl	80035ee <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800313a:	201e      	movs	r0, #30
 800313c:	f000 fa73 	bl	8003626 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_InitTick+0xa0>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_InitTick+0xa0>)
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	61d3      	str	r3, [r2, #28]
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_InitTick+0xa0>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003158:	f107 0210 	add.w	r2, r7, #16
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fe76 	bl	8003e54 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003168:	f000 fe4c 	bl	8003e04 <HAL_RCC_GetPCLK1Freq>
 800316c:	4603      	mov	r3, r0
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_InitTick+0xa4>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9b      	lsrs	r3, r3, #18
 800317c:	3b01      	subs	r3, #1
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_InitTick+0xa8>)
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <HAL_InitTick+0xac>)
 8003184:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_InitTick+0xa8>)
 8003188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800318c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <HAL_InitTick+0xa8>)
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_InitTick+0xa8>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_InitTick+0xa8>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80031a0:	4809      	ldr	r0, [pc, #36]	; (80031c8 <HAL_InitTick+0xa8>)
 80031a2:	f001 fbad 	bl	8004900 <HAL_TIM_Base_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80031ac:	4806      	ldr	r0, [pc, #24]	; (80031c8 <HAL_InitTick+0xa8>)
 80031ae:	f001 fbff 	bl	80049b0 <HAL_TIM_Base_Start_IT>
 80031b2:	4603      	mov	r3, r0
 80031b4:	e000      	b.n	80031b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3730      	adds	r7, #48	; 0x30
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	431bde83 	.word	0x431bde83
 80031c8:	200033b8 	.word	0x200033b8
 80031cc:	40000800 	.word	0x40000800

080031d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <HardFault_Handler+0x4>

080031e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <MemManage_Handler+0x4>

080031e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <BusFault_Handler+0x4>

080031ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <UsageFault_Handler+0x4>

080031f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <TIM4_IRQHandler+0x10>)
 800322a:	f001 fc13 	bl	8004a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200033b8 	.word	0x200033b8

08003238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
	return 1;
 800323c:	2301      	movs	r3, #1
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <_kill>:

int _kill(int pid, int sig)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003250:	f001 fda0 	bl	8004d94 <__errno>
 8003254:	4603      	mov	r3, r0
 8003256:	2216      	movs	r2, #22
 8003258:	601a      	str	r2, [r3, #0]
	return -1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_exit>:

void _exit (int status)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800326e:	f04f 31ff 	mov.w	r1, #4294967295
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ffe7 	bl	8003246 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003278:	e7fe      	b.n	8003278 <_exit+0x12>

0800327a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e00a      	b.n	80032a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800328c:	f3af 8000 	nop.w
 8003290:	4601      	mov	r1, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	60ba      	str	r2, [r7, #8]
 8003298:	b2ca      	uxtb	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	dbf0      	blt.n	800328c <_read+0x12>
	}

return len;
 80032aa:	687b      	ldr	r3, [r7, #4]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	return -1;
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032da:	605a      	str	r2, [r3, #4]
	return 0;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <_isatty>:

int _isatty(int file)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	return 1;
 80032f0:	2301      	movs	r3, #1
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	return 0;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <_sbrk+0x5c>)
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <_sbrk+0x60>)
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <_sbrk+0x64>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <_sbrk+0x64>)
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <_sbrk+0x68>)
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <_sbrk+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	429a      	cmp	r2, r3
 8003342:	d207      	bcs.n	8003354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003344:	f001 fd26 	bl	8004d94 <__errno>
 8003348:	4603      	mov	r3, r0
 800334a:	220c      	movs	r2, #12
 800334c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e009      	b.n	8003368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	4a05      	ldr	r2, [pc, #20]	; (8003378 <_sbrk+0x64>)
 8003364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20005000 	.word	0x20005000
 8003374:	00000800 	.word	0x00000800
 8003378:	20000478 	.word	0x20000478
 800337c:	20003418 	.word	0x20003418

08003380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800338c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800338e:	e003      	b.n	8003398 <LoopCopyDataInit>

08003390 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003392:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003394:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003396:	3104      	adds	r1, #4

08003398 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003398:	480a      	ldr	r0, [pc, #40]	; (80033c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800339c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800339e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80033a0:	d3f6      	bcc.n	8003390 <CopyDataInit>
  ldr r2, =_sbss
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80033a4:	e002      	b.n	80033ac <LoopFillZerobss>

080033a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80033a8:	f842 3b04 	str.w	r3, [r2], #4

080033ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80033ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80033b0:	d3f9      	bcc.n	80033a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033b2:	f7ff ffe5 	bl	8003380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b6:	f001 fcf3 	bl	8004da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033ba:	f7ff fd55 	bl	8002e68 <main>
  bx lr
 80033be:	4770      	bx	lr
  ldr r3, =_sidata
 80033c0:	0800e334 	.word	0x0800e334
  ldr r0, =_sdata
 80033c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80033c8:	200000dc 	.word	0x200000dc
  ldr r2, =_sbss
 80033cc:	200000dc 	.word	0x200000dc
  ldr r3, = _ebss
 80033d0:	20003414 	.word	0x20003414

080033d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033d4:	e7fe      	b.n	80033d4 <ADC1_2_IRQHandler>
	...

080033d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_Init+0x28>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <HAL_Init+0x28>)
 80033e2:	f043 0310 	orr.w	r3, r3, #16
 80033e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e8:	2003      	movs	r0, #3
 80033ea:	f000 f8f5 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7ff fe96 	bl	8003120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033f4:	f7ff fe3e 	bl	8003074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40022000 	.word	0x40022000

08003404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_IncTick+0x1c>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_IncTick+0x20>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4413      	add	r3, r2
 8003414:	4a03      	ldr	r2, [pc, #12]	; (8003424 <HAL_IncTick+0x20>)
 8003416:	6013      	str	r3, [r2, #0]
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	20000074 	.word	0x20000074
 8003424:	20003400 	.word	0x20003400

08003428 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return uwTick;
 800342c:	4b02      	ldr	r3, [pc, #8]	; (8003438 <HAL_GetTick+0x10>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	20003400 	.word	0x20003400

0800343c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff fff0 	bl	8003428 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d005      	beq.n	8003462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_Delay+0x44>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003462:	bf00      	nop
 8003464:	f7ff ffe0 	bl	8003428 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d8f7      	bhi.n	8003464 <HAL_Delay+0x28>
  {
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000074 	.word	0x20000074

08003484 <__NVIC_SetPriorityGrouping>:
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4906      	ldr	r1, [pc, #24]	; (800351c <__NVIC_EnableIRQ+0x34>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	e000e100 	.word	0xe000e100

08003520 <__NVIC_SetPriority>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	2b00      	cmp	r3, #0
 8003532:	db0a      	blt.n	800354a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	490c      	ldr	r1, [pc, #48]	; (800356c <__NVIC_SetPriority+0x4c>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	440b      	add	r3, r1
 8003544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003548:	e00a      	b.n	8003560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4908      	ldr	r1, [pc, #32]	; (8003570 <__NVIC_SetPriority+0x50>)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	3b04      	subs	r3, #4
 8003558:	0112      	lsls	r2, r2, #4
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	440b      	add	r3, r1
 800355e:	761a      	strb	r2, [r3, #24]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e100 	.word	0xe000e100
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <NVIC_EncodePriority>:
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f1c3 0307 	rsb	r3, r3, #7
 800358e:	2b04      	cmp	r3, #4
 8003590:	bf28      	it	cs
 8003592:	2304      	movcs	r3, #4
 8003594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3304      	adds	r3, #4
 800359a:	2b06      	cmp	r3, #6
 800359c:	d902      	bls.n	80035a4 <NVIC_EncodePriority+0x30>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3b03      	subs	r3, #3
 80035a2:	e000      	b.n	80035a6 <NVIC_EncodePriority+0x32>
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	401a      	ands	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035bc:	f04f 31ff 	mov.w	r1, #4294967295
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	4313      	orrs	r3, r2
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3724      	adds	r7, #36	; 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff4f 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003600:	f7ff ff64 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	6978      	ldr	r0, [r7, #20]
 800360c:	f7ff ffb2 	bl	8003574 <NVIC_EncodePriority>
 8003610:	4602      	mov	r2, r0
 8003612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff81 	bl	8003520 <__NVIC_SetPriority>
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff57 	bl	80034e8 <__NVIC_EnableIRQ>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <HAL_PWR_EnableBkUpAccess+0x14>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	420e0020 	.word	0x420e0020

0800365c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e26c      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8087 	beq.w	800378a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800367c:	4b92      	ldr	r3, [pc, #584]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b04      	cmp	r3, #4
 8003686:	d00c      	beq.n	80036a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003688:	4b8f      	ldr	r3, [pc, #572]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d112      	bne.n	80036ba <HAL_RCC_OscConfig+0x5e>
 8003694:	4b8c      	ldr	r3, [pc, #560]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a0:	d10b      	bne.n	80036ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a2:	4b89      	ldr	r3, [pc, #548]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d06c      	beq.n	8003788 <HAL_RCC_OscConfig+0x12c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d168      	bne.n	8003788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e246      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x76>
 80036c4:	4b80      	ldr	r3, [pc, #512]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a7f      	ldr	r2, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e02e      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x98>
 80036da:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7a      	ldr	r2, [pc, #488]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a77      	ldr	r2, [pc, #476]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e01d      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0xbc>
 80036fe:	4b72      	ldr	r3, [pc, #456]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a71      	ldr	r2, [pc, #452]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e00b      	b.n	8003730 <HAL_RCC_OscConfig+0xd4>
 8003718:	4b6b      	ldr	r3, [pc, #428]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6a      	ldr	r2, [pc, #424]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800371e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b68      	ldr	r3, [pc, #416]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a67      	ldr	r2, [pc, #412]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800372a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7ff fe76 	bl	8003428 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7ff fe72 	bl	8003428 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e1fa      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0xe4>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7ff fe62 	bl	8003428 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7ff fe5e 	bl	8003428 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e1e6      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377a:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x10c>
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d063      	beq.n	800385e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003796:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d11c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x18c>
 80037ae:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d116      	bne.n	80037e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_RCC_OscConfig+0x176>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e1ba      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4939      	ldr	r1, [pc, #228]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	e03a      	b.n	800385e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7ff fe17 	bl	8003428 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fe:	f7ff fe13 	bl	8003428 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e19b      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4927      	ldr	r1, [pc, #156]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_RCC_OscConfig+0x270>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7ff fdf6 	bl	8003428 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003840:	f7ff fdf2 	bl	8003428 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e17a      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d03a      	beq.n	80038e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d019      	beq.n	80038a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003878:	f7ff fdd6 	bl	8003428 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003880:	f7ff fdd2 	bl	8003428 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e15a      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_RCC_OscConfig+0x26c>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800389e:	2001      	movs	r0, #1
 80038a0:	f000 fb08 	bl	8003eb4 <RCC_Delay>
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7ff fdbc 	bl	8003428 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b2:	e00f      	b.n	80038d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b4:	f7ff fdb8 	bl	8003428 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d908      	bls.n	80038d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e140      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	42420000 	.word	0x42420000
 80038d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	4b9e      	ldr	r3, [pc, #632]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e9      	bne.n	80038b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80a6 	beq.w	8003a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f2:	4b97      	ldr	r3, [pc, #604]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	4b94      	ldr	r3, [pc, #592]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4a93      	ldr	r2, [pc, #588]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	61d3      	str	r3, [r2, #28]
 800390a:	4b91      	ldr	r3, [pc, #580]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391a:	4b8e      	ldr	r3, [pc, #568]	; (8003b54 <HAL_RCC_OscConfig+0x4f8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d118      	bne.n	8003958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003926:	4b8b      	ldr	r3, [pc, #556]	; (8003b54 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a8a      	ldr	r2, [pc, #552]	; (8003b54 <HAL_RCC_OscConfig+0x4f8>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003932:	f7ff fd79 	bl	8003428 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393a:	f7ff fd75 	bl	8003428 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b64      	cmp	r3, #100	; 0x64
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e0fd      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <HAL_RCC_OscConfig+0x4f8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x312>
 8003960:	4b7b      	ldr	r3, [pc, #492]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4a7a      	ldr	r2, [pc, #488]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6213      	str	r3, [r2, #32]
 800396c:	e02d      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x334>
 8003976:	4b76      	ldr	r3, [pc, #472]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4a75      	ldr	r2, [pc, #468]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	6213      	str	r3, [r2, #32]
 8003982:	4b73      	ldr	r3, [pc, #460]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	4a72      	ldr	r2, [pc, #456]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	6213      	str	r3, [r2, #32]
 800398e:	e01c      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b05      	cmp	r3, #5
 8003996:	d10c      	bne.n	80039b2 <HAL_RCC_OscConfig+0x356>
 8003998:	4b6d      	ldr	r3, [pc, #436]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a6c      	ldr	r2, [pc, #432]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a69      	ldr	r2, [pc, #420]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	e00b      	b.n	80039ca <HAL_RCC_OscConfig+0x36e>
 80039b2:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4a66      	ldr	r2, [pc, #408]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6213      	str	r3, [r2, #32]
 80039be:	4b64      	ldr	r3, [pc, #400]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a63      	ldr	r2, [pc, #396]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80039c4:	f023 0304 	bic.w	r3, r3, #4
 80039c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d015      	beq.n	80039fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d2:	f7ff fd29 	bl	8003428 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7ff fd25 	bl	8003428 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0ab      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	4b57      	ldr	r3, [pc, #348]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ee      	beq.n	80039da <HAL_RCC_OscConfig+0x37e>
 80039fc:	e014      	b.n	8003a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fe:	f7ff fd13 	bl	8003428 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7ff fd0f 	bl	8003428 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e095      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1c:	4b4c      	ldr	r3, [pc, #304]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ee      	bne.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2e:	4b48      	ldr	r3, [pc, #288]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4a47      	ldr	r2, [pc, #284]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8081 	beq.w	8003b46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a44:	4b42      	ldr	r3, [pc, #264]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d061      	beq.n	8003b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d146      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a58:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <HAL_RCC_OscConfig+0x4fc>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7ff fce3 	bl	8003428 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a66:	f7ff fcdf 	bl	8003428 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e067      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a78:	4b35      	ldr	r3, [pc, #212]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a8e:	4b30      	ldr	r3, [pc, #192]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	492d      	ldr	r1, [pc, #180]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a19      	ldr	r1, [r3, #32]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	4927      	ldr	r1, [pc, #156]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x4fc>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7ff fcb3 	bl	8003428 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7ff fcaf 	bl	8003428 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e037      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x46a>
 8003ae4:	e02f      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <HAL_RCC_OscConfig+0x4fc>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7ff fc9c 	bl	8003428 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af4:	f7ff fc98 	bl	8003428 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e020      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x498>
 8003b12:	e018      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e013      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_OscConfig+0x4f4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42420060 	.word	0x42420060

08003b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0d0      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d910      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b67      	ldr	r3, [pc, #412]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 0207 	bic.w	r2, r3, #7
 8003b86:	4965      	ldr	r1, [pc, #404]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0b8      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	494d      	ldr	r1, [pc, #308]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d040      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d115      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e073      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06b      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4936      	ldr	r1, [pc, #216]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c4c:	f7ff fbec 	bl	8003428 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7ff fbe8 	bl	8003428 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e053      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 020c 	and.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d1eb      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d210      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 0207 	bic.w	r2, r3, #7
 8003c92:	4922      	ldr	r1, [pc, #136]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e032      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4916      	ldr	r1, [pc, #88]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490e      	ldr	r1, [pc, #56]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cea:	f000 f821 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490a      	ldr	r1, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x1cc>)
 8003d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1d0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fa08 	bl	8003120 <HAL_InitTick>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40022000 	.word	0x40022000
 8003d20:	40021000 	.word	0x40021000
 8003d24:	0800e1c8 	.word	0x0800e1c8
 8003d28:	2000006c 	.word	0x2000006c
 8003d2c:	20000070 	.word	0x20000070

08003d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d30:	b490      	push	{r4, r7}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d36:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d38:	1d3c      	adds	r4, r7, #4
 8003d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d40:	f240 2301 	movw	r3, #513	; 0x201
 8003d44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d002      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x40>
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x46>
 8003d6e:	e02d      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d72:	623b      	str	r3, [r7, #32]
      break;
 8003d74:	e02d      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	0c9b      	lsrs	r3, r3, #18
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d82:	4413      	add	r3, r2
 8003d84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	0c5b      	lsrs	r3, r3, #17
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003da2:	4413      	add	r3, r2
 8003da4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003da8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	4a0e      	ldr	r2, [pc, #56]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dae:	fb02 f203 	mul.w	r2, r2, r3
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dba:	e004      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	623b      	str	r3, [r7, #32]
      break;
 8003dca:	e002      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dce:	623b      	str	r3, [r7, #32]
      break;
 8003dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3728      	adds	r7, #40	; 0x28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc90      	pop	{r4, r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	0800612c 	.word	0x0800612c
 8003de4:	40021000 	.word	0x40021000
 8003de8:	007a1200 	.word	0x007a1200
 8003dec:	003d0900 	.word	0x003d0900

08003df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	2000006c 	.word	0x2000006c

08003e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e08:	f7ff fff2 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4903      	ldr	r1, [pc, #12]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	0800e1d8 	.word	0x0800e1d8

08003e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e30:	f7ff ffde 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0adb      	lsrs	r3, r3, #11
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4903      	ldr	r1, [pc, #12]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800e1d8 	.word	0x0800e1d8

08003e54 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	220f      	movs	r2, #15
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_RCC_GetClockConfig+0x58>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0203 	and.w	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <HAL_RCC_GetClockConfig+0x58>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_GetClockConfig+0x58>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_RCC_GetClockConfig+0x58>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	08db      	lsrs	r3, r3, #3
 8003e8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0207 	and.w	r2, r3, #7
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40022000 	.word	0x40022000

08003eb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <RCC_Delay+0x34>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <RCC_Delay+0x38>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	0a5b      	lsrs	r3, r3, #9
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ed0:	bf00      	nop
  }
  while (Delay --);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1e5a      	subs	r2, r3, #1
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f9      	bne.n	8003ed0 <RCC_Delay+0x1c>
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	2000006c 	.word	0x2000006c
 8003eec:	10624dd3 	.word	0x10624dd3

08003ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d07d      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f10:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10d      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1c:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4a4b      	ldr	r2, [pc, #300]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f26:	61d3      	str	r3, [r2, #28]
 8003f28:	4b49      	ldr	r3, [pc, #292]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	4b46      	ldr	r3, [pc, #280]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d118      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a42      	ldr	r2, [pc, #264]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f50:	f7ff fa6a 	bl	8003428 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f56:	e008      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f58:	f7ff fa66 	bl	8003428 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e06d      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	4b3a      	ldr	r3, [pc, #232]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d02e      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d027      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f94:	4b2e      	ldr	r3, [pc, #184]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f9e:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003faa:	4a29      	ldr	r2, [pc, #164]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d014      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7ff fa35 	bl	8003428 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7ff fa31 	bl	8003428 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e036      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ee      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4917      	ldr	r1, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004006:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	490b      	ldr	r1, [pc, #44]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004032:	4b07      	ldr	r3, [pc, #28]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4904      	ldr	r1, [pc, #16]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	40007000 	.word	0x40007000
 8004058:	42420440 	.word	0x42420440

0800405c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b08d      	sub	sp, #52	; 0x34
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004064:	4b5a      	ldr	r3, [pc, #360]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004066:	f107 040c 	add.w	r4, r7, #12
 800406a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800406c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004070:	f240 2301 	movw	r3, #513	; 0x201
 8004074:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	2300      	movs	r3, #0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	2300      	movs	r3, #0
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b10      	cmp	r3, #16
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b10      	cmp	r3, #16
 8004094:	f200 8091 	bhi.w	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d04c      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d07c      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80040a4:	e089      	b.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80040a6:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040ac:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8082 	beq.w	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	0c9b      	lsrs	r3, r3, #18
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80040c6:	4413      	add	r3, r2
 80040c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040cc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d018      	beq.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040d8:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	0c5b      	lsrs	r3, r3, #17
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80040e6:	4413      	add	r3, r2
 80040e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00d      	beq.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80040f8:	4a37      	ldr	r2, [pc, #220]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004108:	e004      	b.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	4a33      	ldr	r2, [pc, #204]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004114:	4b2f      	ldr	r3, [pc, #188]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004120:	d102      	bne.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004126:	e04a      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004136:	e042      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004138:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004148:	d108      	bne.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
 800415a:	e01f      	b.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004166:	d109      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004174:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
 800417a:	e00f      	b.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004186:	d11c      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d016      	beq.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004194:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800419a:	e012      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800419c:	e011      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800419e:	f7ff fe45 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 80041a2:	4602      	mov	r2, r0
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	0b9b      	lsrs	r3, r3, #14
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	3301      	adds	r3, #1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041b8:	e004      	b.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80041ba:	bf00      	nop
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80041c2:	bf00      	nop
    }
  }
  return (frequency);
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3734      	adds	r7, #52	; 0x34
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd90      	pop	{r4, r7, pc}
 80041ce:	bf00      	nop
 80041d0:	0800613c 	.word	0x0800613c
 80041d4:	40021000 	.word	0x40021000
 80041d8:	007a1200 	.word	0x007a1200
 80041dc:	003d0900 	.word	0x003d0900
 80041e0:	aaaaaaab 	.word	0xaaaaaaab

080041e4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e084      	b.n	8004304 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7c5b      	ldrb	r3, [r3, #17]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fe ff64 	bl	80030d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f9c8 	bl	80045ac <HAL_RTC_WaitForSynchro>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2204      	movs	r2, #4
 8004226:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e06b      	b.n	8004304 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fa81 	bl	8004734 <RTC_EnterInitMode>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2204      	movs	r2, #4
 800423c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e060      	b.n	8004304 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0207 	bic.w	r2, r2, #7
 8004250:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800425a:	4b2c      	ldr	r3, [pc, #176]	; (800430c <HAL_RTC_Init+0x128>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	4a2b      	ldr	r2, [pc, #172]	; (800430c <HAL_RTC_Init+0x128>)
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004266:	4b29      	ldr	r3, [pc, #164]	; (800430c <HAL_RTC_Init+0x128>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4926      	ldr	r1, [pc, #152]	; (800430c <HAL_RTC_Init+0x128>)
 8004274:	4313      	orrs	r3, r2
 8004276:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d003      	beq.n	800428a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e00e      	b.n	80042a8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800428a:	2001      	movs	r0, #1
 800428c:	f7ff fee6 	bl	800405c <HAL_RCCEx_GetPeriphCLKFreq>
 8004290:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2204      	movs	r2, #4
 800429c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e030      	b.n	8004304 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 010f 	bic.w	r1, r3, #15
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0c1a      	lsrs	r2, r3, #16
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	b291      	uxth	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fa55 	bl	8004784 <RTC_ExitInitMode>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d004      	beq.n	80042ea <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2204      	movs	r2, #4
 80042e4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e00c      	b.n	8004304 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004302:	2300      	movs	r3, #0
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40006c00 	.word	0x40006c00

08004310 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_RTC_SetTime+0x20>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e080      	b.n	8004436 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	7c1b      	ldrb	r3, [r3, #16]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_RTC_SetTime+0x30>
 800433c:	2302      	movs	r3, #2
 800433e:	e07a      	b.n	8004436 <HAL_RTC_SetTime+0x126>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2202      	movs	r2, #2
 800434a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d113      	bne.n	800437a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800435c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	4619      	mov	r1, r3
 8004366:	460b      	mov	r3, r1
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a5b      	subs	r3, r3, r1
 800436c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800436e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004374:	4413      	add	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	e01e      	b.n	80043b8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fa28 	bl	80047d4 <RTC_Bcd2ToByte>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800438c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa1d 	bl	80047d4 <RTC_Bcd2ToByte>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80043a6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	789b      	ldrb	r3, [r3, #2]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fa11 	bl	80047d4 <RTC_Bcd2ToByte>
 80043b2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80043b4:	4423      	add	r3, r4
 80043b6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80043b8:	6979      	ldr	r1, [r7, #20]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f953 	bl	8004666 <RTC_WriteTimeCounter>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2204      	movs	r2, #4
 80043ca:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e02f      	b.n	8004436 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0205 	bic.w	r2, r2, #5
 80043e4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f964 	bl	80046b4 <RTC_ReadAlarmCounter>
 80043ec:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d018      	beq.n	8004428 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d214      	bcs.n	8004428 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004404:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004408:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f96a 	bl	80046e6 <RTC_WriteAlarmCounter>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2204      	movs	r2, #4
 800441c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e006      	b.n	8004436 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	bd90      	pop	{r4, r7, pc}
	...

08004440 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	2300      	movs	r3, #0
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_RTC_SetDate+0x24>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e097      	b.n	8004598 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	7c1b      	ldrb	r3, [r3, #16]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_RTC_SetDate+0x34>
 8004470:	2302      	movs	r3, #2
 8004472:	e091      	b.n	8004598 <HAL_RTC_SetDate+0x158>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2202      	movs	r2, #2
 800447e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	78da      	ldrb	r2, [r3, #3]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	785a      	ldrb	r2, [r3, #1]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	789a      	ldrb	r2, [r3, #2]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	739a      	strb	r2, [r3, #14]
 800449e:	e01a      	b.n	80044d6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	78db      	ldrb	r3, [r3, #3]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f995 	bl	80047d4 <RTC_Bcd2ToByte>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f98c 	bl	80047d4 <RTC_Bcd2ToByte>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	789b      	ldrb	r3, [r3, #2]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f983 	bl	80047d4 <RTC_Bcd2ToByte>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	7bdb      	ldrb	r3, [r3, #15]
 80044da:	4618      	mov	r0, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	7b59      	ldrb	r1, [r3, #13]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	7b9b      	ldrb	r3, [r3, #14]
 80044e4:	461a      	mov	r2, r3
 80044e6:	f000 f993 	bl	8004810 <RTC_WeekDayNum>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	7b1a      	ldrb	r2, [r3, #12]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f883 	bl	8004606 <RTC_ReadTimeCounter>
 8004500:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4a26      	ldr	r2, [pc, #152]	; (80045a0 <HAL_RTC_SetDate+0x160>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b18      	cmp	r3, #24
 8004512:	d93a      	bls.n	800458a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <HAL_RTC_SetDate+0x164>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <HAL_RTC_SetDate+0x168>)
 8004520:	fb02 f303 	mul.w	r3, r2, r3
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800452a:	69f9      	ldr	r1, [r7, #28]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f89a 	bl	8004666 <RTC_WriteTimeCounter>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2204      	movs	r2, #4
 800453c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e027      	b.n	8004598 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f8b3 	bl	80046b4 <RTC_ReadAlarmCounter>
 800454e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d018      	beq.n	800458a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	429a      	cmp	r2, r3
 800455e:	d214      	bcs.n	800458a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004566:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800456a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800456c:	69b9      	ldr	r1, [r7, #24]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f8b9 	bl	80046e6 <RTC_WriteAlarmCounter>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2204      	movs	r2, #4
 800457e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e006      	b.n	8004598 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	91a2b3c5 	.word	0x91a2b3c5
 80045a4:	aaaaaaab 	.word	0xaaaaaaab
 80045a8:	00015180 	.word	0x00015180

080045ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e01d      	b.n	80045fe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0208 	bic.w	r2, r2, #8
 80045d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80045d2:	f7fe ff29 	bl	8003428 <HAL_GetTick>
 80045d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80045d8:	e009      	b.n	80045ee <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80045da:	f7fe ff25 	bl	8003428 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e8:	d901      	bls.n	80045ee <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e007      	b.n	80045fe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ee      	beq.n	80045da <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	827b      	strh	r3, [r7, #18]
 8004612:	2300      	movs	r3, #0
 8004614:	823b      	strh	r3, [r7, #16]
 8004616:	2300      	movs	r3, #0
 8004618:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004636:	8a7a      	ldrh	r2, [r7, #18]
 8004638:	8a3b      	ldrh	r3, [r7, #16]
 800463a:	429a      	cmp	r2, r3
 800463c:	d008      	beq.n	8004650 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800463e:	8a3b      	ldrh	r3, [r7, #16]
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	b29b      	uxth	r3, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e004      	b.n	800465a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004650:	8a7b      	ldrh	r3, [r7, #18]
 8004652:	041a      	lsls	r2, r3, #16
 8004654:	89fb      	ldrh	r3, [r7, #14]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800465a:	697b      	ldr	r3, [r7, #20]
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr

08004666 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f85d 	bl	8004734 <RTC_EnterInitMode>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	e011      	b.n	80046aa <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	0c12      	lsrs	r2, r2, #16
 800468e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	b292      	uxth	r2, r2
 8004698:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f872 	bl	8004784 <RTC_ExitInitMode>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	81fb      	strh	r3, [r7, #14]
 80046c0:	2300      	movs	r3, #0
 80046c2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80046d4:	89fb      	ldrh	r3, [r7, #14]
 80046d6:	041a      	lsls	r2, r3, #16
 80046d8:	89bb      	ldrh	r3, [r7, #12]
 80046da:	4313      	orrs	r3, r2
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f81d 	bl	8004734 <RTC_EnterInitMode>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e011      	b.n	800472a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	0c12      	lsrs	r2, r2, #16
 800470e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	b292      	uxth	r2, r2
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f832 	bl	8004784 <RTC_ExitInitMode>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800472a:	7bfb      	ldrb	r3, [r7, #15]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004740:	f7fe fe72 	bl	8003428 <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004746:	e009      	b.n	800475c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004748:	f7fe fe6e 	bl	8003428 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004756:	d901      	bls.n	800475c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e00f      	b.n	800477c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0ee      	beq.n	8004748 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0210 	orr.w	r2, r2, #16
 8004778:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0210 	bic.w	r2, r2, #16
 800479e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80047a0:	f7fe fe42 	bl	8003428 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047a6:	e009      	b.n	80047bc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80047a8:	f7fe fe3e 	bl	8003428 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b6:	d901      	bls.n	80047bc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e007      	b.n	80047cc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0ee      	beq.n	80047a8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4413      	add	r3, r2
 8004802:	b2db      	uxtb	r3, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
	...

08004810 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
 800481c:	4613      	mov	r3, r2
 800481e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800482e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d82d      	bhi.n	8004892 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	4a2c      	ldr	r2, [pc, #176]	; (80048f4 <RTC_WeekDayNum+0xe4>)
 8004844:	fba2 2303 	umull	r2, r3, r2, r3
 8004848:	085a      	lsrs	r2, r3, #1
 800484a:	78bb      	ldrb	r3, [r7, #2]
 800484c:	441a      	add	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	441a      	add	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	3b01      	subs	r3, #1
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	3b01      	subs	r3, #1
 800485e:	4926      	ldr	r1, [pc, #152]	; (80048f8 <RTC_WeekDayNum+0xe8>)
 8004860:	fba1 1303 	umull	r1, r3, r1, r3
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	3b01      	subs	r3, #1
 800486c:	4922      	ldr	r1, [pc, #136]	; (80048f8 <RTC_WeekDayNum+0xe8>)
 800486e:	fba1 1303 	umull	r1, r3, r1, r3
 8004872:	09db      	lsrs	r3, r3, #7
 8004874:	4413      	add	r3, r2
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <RTC_WeekDayNum+0xec>)
 800487a:	fba3 1302 	umull	r1, r3, r3, r2
 800487e:	1ad1      	subs	r1, r2, r3
 8004880:	0849      	lsrs	r1, r1, #1
 8004882:	440b      	add	r3, r1
 8004884:	0899      	lsrs	r1, r3, #2
 8004886:	460b      	mov	r3, r1
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	1a5b      	subs	r3, r3, r1
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e029      	b.n	80048e6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	4613      	mov	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	4a15      	ldr	r2, [pc, #84]	; (80048f4 <RTC_WeekDayNum+0xe4>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	085a      	lsrs	r2, r3, #1
 80048a6:	78bb      	ldrb	r3, [r7, #2]
 80048a8:	441a      	add	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	441a      	add	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4910      	ldr	r1, [pc, #64]	; (80048f8 <RTC_WeekDayNum+0xe8>)
 80048b8:	fba1 1303 	umull	r1, r3, r1, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	490d      	ldr	r1, [pc, #52]	; (80048f8 <RTC_WeekDayNum+0xe8>)
 80048c4:	fba1 1303 	umull	r1, r3, r1, r3
 80048c8:	09db      	lsrs	r3, r3, #7
 80048ca:	4413      	add	r3, r2
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <RTC_WeekDayNum+0xec>)
 80048d0:	fba3 1302 	umull	r1, r3, r3, r2
 80048d4:	1ad1      	subs	r1, r2, r3
 80048d6:	0849      	lsrs	r1, r1, #1
 80048d8:	440b      	add	r3, r1
 80048da:	0899      	lsrs	r1, r3, #2
 80048dc:	460b      	mov	r3, r1
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	1a5b      	subs	r3, r3, r1
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	b2db      	uxtb	r3, r3
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	38e38e39 	.word	0x38e38e39
 80048f8:	51eb851f 	.word	0x51eb851f
 80048fc:	24924925 	.word	0x24924925

08004900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e041      	b.n	8004996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f839 	bl	800499e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f000 f9b4 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d001      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e03a      	b.n	8004a3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <HAL_TIM_Base_Start_IT+0x98>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f2:	d009      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <HAL_TIM_Base_Start_IT+0x9c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d010      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	e007      	b.n	8004a3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800

08004a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d122      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d11b      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0202 	mvn.w	r2, #2
 8004a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8ed 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8e0 	bl	8004c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f8ef 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d122      	bne.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d11b      	bne.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0204 	mvn.w	r2, #4
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f8c3 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8b6 	bl	8004c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f8c5 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d122      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d11b      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0208 	mvn.w	r2, #8
 8004b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f899 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f88c 	bl	8004c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f89b 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d122      	bne.n	8004bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d11b      	bne.n	8004bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0210 	mvn.w	r2, #16
 8004b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2208      	movs	r2, #8
 8004b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f86f 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f862 	bl	8004c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f871 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d107      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0201 	mvn.w	r2, #1
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fe fa36 	bl	8003044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	d10e      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf0:	2b80      	cmp	r3, #128	; 0x80
 8004bf2:	d107      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8bf 	bl	8004d82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d10e      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d107      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f835 	bl	8004c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d10e      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d107      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0220 	mvn.w	r2, #32
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f88a 	bl	8004d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr

08004c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <TIM_Base_SetConfig+0xb8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0x30>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0x30>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <TIM_Base_SetConfig+0xbc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0x30>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a25      	ldr	r2, [pc, #148]	; (8004d6c <TIM_Base_SetConfig+0xc0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d108      	bne.n	8004cee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <TIM_Base_SetConfig+0xb8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00b      	beq.n	8004d0e <TIM_Base_SetConfig+0x62>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d007      	beq.n	8004d0e <TIM_Base_SetConfig+0x62>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <TIM_Base_SetConfig+0xbc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_Base_SetConfig+0x62>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <TIM_Base_SetConfig+0xc0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d108      	bne.n	8004d20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <TIM_Base_SetConfig+0xb8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d103      	bne.n	8004d54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	615a      	str	r2, [r3, #20]
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800

08004d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <__errno>:
 8004d94:	4b01      	ldr	r3, [pc, #4]	; (8004d9c <__errno+0x8>)
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000078 	.word	0x20000078

08004da0 <__libc_init_array>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	2600      	movs	r6, #0
 8004da4:	4d0c      	ldr	r5, [pc, #48]	; (8004dd8 <__libc_init_array+0x38>)
 8004da6:	4c0d      	ldr	r4, [pc, #52]	; (8004ddc <__libc_init_array+0x3c>)
 8004da8:	1b64      	subs	r4, r4, r5
 8004daa:	10a4      	asrs	r4, r4, #2
 8004dac:	42a6      	cmp	r6, r4
 8004dae:	d109      	bne.n	8004dc4 <__libc_init_array+0x24>
 8004db0:	f001 f8cc 	bl	8005f4c <_init>
 8004db4:	2600      	movs	r6, #0
 8004db6:	4d0a      	ldr	r5, [pc, #40]	; (8004de0 <__libc_init_array+0x40>)
 8004db8:	4c0a      	ldr	r4, [pc, #40]	; (8004de4 <__libc_init_array+0x44>)
 8004dba:	1b64      	subs	r4, r4, r5
 8004dbc:	10a4      	asrs	r4, r4, #2
 8004dbe:	42a6      	cmp	r6, r4
 8004dc0:	d105      	bne.n	8004dce <__libc_init_array+0x2e>
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc8:	4798      	blx	r3
 8004dca:	3601      	adds	r6, #1
 8004dcc:	e7ee      	b.n	8004dac <__libc_init_array+0xc>
 8004dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd2:	4798      	blx	r3
 8004dd4:	3601      	adds	r6, #1
 8004dd6:	e7f2      	b.n	8004dbe <__libc_init_array+0x1e>
 8004dd8:	0800e32c 	.word	0x0800e32c
 8004ddc:	0800e32c 	.word	0x0800e32c
 8004de0:	0800e32c 	.word	0x0800e32c
 8004de4:	0800e330 	.word	0x0800e330

08004de8 <memset>:
 8004de8:	4603      	mov	r3, r0
 8004dea:	4402      	add	r2, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <iprintf>:
 8004df8:	b40f      	push	{r0, r1, r2, r3}
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <iprintf+0x2c>)
 8004dfc:	b513      	push	{r0, r1, r4, lr}
 8004dfe:	681c      	ldr	r4, [r3, #0]
 8004e00:	b124      	cbz	r4, 8004e0c <iprintf+0x14>
 8004e02:	69a3      	ldr	r3, [r4, #24]
 8004e04:	b913      	cbnz	r3, 8004e0c <iprintf+0x14>
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 facc 	bl	80053a4 <__sinit>
 8004e0c:	ab05      	add	r3, sp, #20
 8004e0e:	4620      	mov	r0, r4
 8004e10:	9a04      	ldr	r2, [sp, #16]
 8004e12:	68a1      	ldr	r1, [r4, #8]
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	f000 fcb1 	bl	800577c <_vfiprintf_r>
 8004e1a:	b002      	add	sp, #8
 8004e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e20:	b004      	add	sp, #16
 8004e22:	4770      	bx	lr
 8004e24:	20000078 	.word	0x20000078

08004e28 <_puts_r>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	460e      	mov	r6, r1
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	b118      	cbz	r0, 8004e38 <_puts_r+0x10>
 8004e30:	6983      	ldr	r3, [r0, #24]
 8004e32:	b90b      	cbnz	r3, 8004e38 <_puts_r+0x10>
 8004e34:	f000 fab6 	bl	80053a4 <__sinit>
 8004e38:	69ab      	ldr	r3, [r5, #24]
 8004e3a:	68ac      	ldr	r4, [r5, #8]
 8004e3c:	b913      	cbnz	r3, 8004e44 <_puts_r+0x1c>
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 fab0 	bl	80053a4 <__sinit>
 8004e44:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <_puts_r+0xd0>)
 8004e46:	429c      	cmp	r4, r3
 8004e48:	d120      	bne.n	8004e8c <_puts_r+0x64>
 8004e4a:	686c      	ldr	r4, [r5, #4]
 8004e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e4e:	07db      	lsls	r3, r3, #31
 8004e50:	d405      	bmi.n	8004e5e <_puts_r+0x36>
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	0598      	lsls	r0, r3, #22
 8004e56:	d402      	bmi.n	8004e5e <_puts_r+0x36>
 8004e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5a:	f000 fb53 	bl	8005504 <__retarget_lock_acquire_recursive>
 8004e5e:	89a3      	ldrh	r3, [r4, #12]
 8004e60:	0719      	lsls	r1, r3, #28
 8004e62:	d51d      	bpl.n	8004ea0 <_puts_r+0x78>
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	b1db      	cbz	r3, 8004ea0 <_puts_r+0x78>
 8004e68:	3e01      	subs	r6, #1
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e70:	3b01      	subs	r3, #1
 8004e72:	60a3      	str	r3, [r4, #8]
 8004e74:	bb39      	cbnz	r1, 8004ec6 <_puts_r+0x9e>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	da38      	bge.n	8004eec <_puts_r+0xc4>
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	210a      	movs	r1, #10
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 f898 	bl	8004fb4 <__swbuf_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d011      	beq.n	8004eac <_puts_r+0x84>
 8004e88:	250a      	movs	r5, #10
 8004e8a:	e011      	b.n	8004eb0 <_puts_r+0x88>
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <_puts_r+0xd4>)
 8004e8e:	429c      	cmp	r4, r3
 8004e90:	d101      	bne.n	8004e96 <_puts_r+0x6e>
 8004e92:	68ac      	ldr	r4, [r5, #8]
 8004e94:	e7da      	b.n	8004e4c <_puts_r+0x24>
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <_puts_r+0xd8>)
 8004e98:	429c      	cmp	r4, r3
 8004e9a:	bf08      	it	eq
 8004e9c:	68ec      	ldreq	r4, [r5, #12]
 8004e9e:	e7d5      	b.n	8004e4c <_puts_r+0x24>
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 f8d8 	bl	8005058 <__swsetup_r>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d0dd      	beq.n	8004e68 <_puts_r+0x40>
 8004eac:	f04f 35ff 	mov.w	r5, #4294967295
 8004eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb2:	07da      	lsls	r2, r3, #31
 8004eb4:	d405      	bmi.n	8004ec2 <_puts_r+0x9a>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	059b      	lsls	r3, r3, #22
 8004eba:	d402      	bmi.n	8004ec2 <_puts_r+0x9a>
 8004ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ebe:	f000 fb22 	bl	8005506 <__retarget_lock_release_recursive>
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da04      	bge.n	8004ed4 <_puts_r+0xac>
 8004eca:	69a2      	ldr	r2, [r4, #24]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	dc06      	bgt.n	8004ede <_puts_r+0xb6>
 8004ed0:	290a      	cmp	r1, #10
 8004ed2:	d004      	beq.n	8004ede <_puts_r+0xb6>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	6022      	str	r2, [r4, #0]
 8004eda:	7019      	strb	r1, [r3, #0]
 8004edc:	e7c5      	b.n	8004e6a <_puts_r+0x42>
 8004ede:	4622      	mov	r2, r4
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f000 f867 	bl	8004fb4 <__swbuf_r>
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d1bf      	bne.n	8004e6a <_puts_r+0x42>
 8004eea:	e7df      	b.n	8004eac <_puts_r+0x84>
 8004eec:	250a      	movs	r5, #10
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	6022      	str	r2, [r4, #0]
 8004ef4:	701d      	strb	r5, [r3, #0]
 8004ef6:	e7db      	b.n	8004eb0 <_puts_r+0x88>
 8004ef8:	0800e2b8 	.word	0x0800e2b8
 8004efc:	0800e2d8 	.word	0x0800e2d8
 8004f00:	0800e298 	.word	0x0800e298

08004f04 <puts>:
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <puts+0xc>)
 8004f06:	4601      	mov	r1, r0
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	f7ff bf8d 	b.w	8004e28 <_puts_r>
 8004f0e:	bf00      	nop
 8004f10:	20000078 	.word	0x20000078

08004f14 <random>:
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <random+0x60>)
 8004f16:	b510      	push	{r4, lr}
 8004f18:	681c      	ldr	r4, [r3, #0]
 8004f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f1c:	b9b3      	cbnz	r3, 8004f4c <random+0x38>
 8004f1e:	2018      	movs	r0, #24
 8004f20:	f000 fb56 	bl	80055d0 <malloc>
 8004f24:	4602      	mov	r2, r0
 8004f26:	63a0      	str	r0, [r4, #56]	; 0x38
 8004f28:	b920      	cbnz	r0, 8004f34 <random+0x20>
 8004f2a:	214c      	movs	r1, #76	; 0x4c
 8004f2c:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <random+0x64>)
 8004f2e:	4813      	ldr	r0, [pc, #76]	; (8004f7c <random+0x68>)
 8004f30:	f000 f900 	bl	8005134 <__assert_func>
 8004f34:	4912      	ldr	r1, [pc, #72]	; (8004f80 <random+0x6c>)
 8004f36:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <random+0x70>)
 8004f38:	e9c0 1300 	strd	r1, r3, [r0]
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <random+0x74>)
 8004f3e:	2100      	movs	r1, #0
 8004f40:	6083      	str	r3, [r0, #8]
 8004f42:	230b      	movs	r3, #11
 8004f44:	8183      	strh	r3, [r0, #12]
 8004f46:	2001      	movs	r0, #1
 8004f48:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004f4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f4e:	480f      	ldr	r0, [pc, #60]	; (8004f8c <random+0x78>)
 8004f50:	690a      	ldr	r2, [r1, #16]
 8004f52:	694b      	ldr	r3, [r1, #20]
 8004f54:	4350      	muls	r0, r2
 8004f56:	4c0e      	ldr	r4, [pc, #56]	; (8004f90 <random+0x7c>)
 8004f58:	fb04 0003 	mla	r0, r4, r3, r0
 8004f5c:	fba2 3404 	umull	r3, r4, r2, r4
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	4404      	add	r4, r0
 8004f64:	f144 0000 	adc.w	r0, r4, #0
 8004f68:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004f6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f70:	bd10      	pop	{r4, pc}
 8004f72:	bf00      	nop
 8004f74:	20000078 	.word	0x20000078
 8004f78:	0800e1e4 	.word	0x0800e1e4
 8004f7c:	0800e1fb 	.word	0x0800e1fb
 8004f80:	abcd330e 	.word	0xabcd330e
 8004f84:	e66d1234 	.word	0xe66d1234
 8004f88:	0005deec 	.word	0x0005deec
 8004f8c:	5851f42d 	.word	0x5851f42d
 8004f90:	4c957f2d 	.word	0x4c957f2d

08004f94 <strcat>:
 8004f94:	4602      	mov	r2, r0
 8004f96:	b510      	push	{r4, lr}
 8004f98:	7814      	ldrb	r4, [r2, #0]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	3201      	adds	r2, #1
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	d1fa      	bne.n	8004f98 <strcat+0x4>
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fac:	2a00      	cmp	r2, #0
 8004fae:	d1f9      	bne.n	8004fa4 <strcat+0x10>
 8004fb0:	bd10      	pop	{r4, pc}
	...

08004fb4 <__swbuf_r>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	460e      	mov	r6, r1
 8004fb8:	4614      	mov	r4, r2
 8004fba:	4605      	mov	r5, r0
 8004fbc:	b118      	cbz	r0, 8004fc6 <__swbuf_r+0x12>
 8004fbe:	6983      	ldr	r3, [r0, #24]
 8004fc0:	b90b      	cbnz	r3, 8004fc6 <__swbuf_r+0x12>
 8004fc2:	f000 f9ef 	bl	80053a4 <__sinit>
 8004fc6:	4b21      	ldr	r3, [pc, #132]	; (800504c <__swbuf_r+0x98>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	d12b      	bne.n	8005024 <__swbuf_r+0x70>
 8004fcc:	686c      	ldr	r4, [r5, #4]
 8004fce:	69a3      	ldr	r3, [r4, #24]
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	071a      	lsls	r2, r3, #28
 8004fd6:	d52f      	bpl.n	8005038 <__swbuf_r+0x84>
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	b36b      	cbz	r3, 8005038 <__swbuf_r+0x84>
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	6820      	ldr	r0, [r4, #0]
 8004fe0:	b2f6      	uxtb	r6, r6
 8004fe2:	1ac0      	subs	r0, r0, r3
 8004fe4:	6963      	ldr	r3, [r4, #20]
 8004fe6:	4637      	mov	r7, r6
 8004fe8:	4283      	cmp	r3, r0
 8004fea:	dc04      	bgt.n	8004ff6 <__swbuf_r+0x42>
 8004fec:	4621      	mov	r1, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 f944 	bl	800527c <_fflush_r>
 8004ff4:	bb30      	cbnz	r0, 8005044 <__swbuf_r+0x90>
 8004ff6:	68a3      	ldr	r3, [r4, #8]
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	60a3      	str	r3, [r4, #8]
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	6022      	str	r2, [r4, #0]
 8005004:	701e      	strb	r6, [r3, #0]
 8005006:	6963      	ldr	r3, [r4, #20]
 8005008:	4283      	cmp	r3, r0
 800500a:	d004      	beq.n	8005016 <__swbuf_r+0x62>
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	07db      	lsls	r3, r3, #31
 8005010:	d506      	bpl.n	8005020 <__swbuf_r+0x6c>
 8005012:	2e0a      	cmp	r6, #10
 8005014:	d104      	bne.n	8005020 <__swbuf_r+0x6c>
 8005016:	4621      	mov	r1, r4
 8005018:	4628      	mov	r0, r5
 800501a:	f000 f92f 	bl	800527c <_fflush_r>
 800501e:	b988      	cbnz	r0, 8005044 <__swbuf_r+0x90>
 8005020:	4638      	mov	r0, r7
 8005022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <__swbuf_r+0x9c>)
 8005026:	429c      	cmp	r4, r3
 8005028:	d101      	bne.n	800502e <__swbuf_r+0x7a>
 800502a:	68ac      	ldr	r4, [r5, #8]
 800502c:	e7cf      	b.n	8004fce <__swbuf_r+0x1a>
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <__swbuf_r+0xa0>)
 8005030:	429c      	cmp	r4, r3
 8005032:	bf08      	it	eq
 8005034:	68ec      	ldreq	r4, [r5, #12]
 8005036:	e7ca      	b.n	8004fce <__swbuf_r+0x1a>
 8005038:	4621      	mov	r1, r4
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f80c 	bl	8005058 <__swsetup_r>
 8005040:	2800      	cmp	r0, #0
 8005042:	d0cb      	beq.n	8004fdc <__swbuf_r+0x28>
 8005044:	f04f 37ff 	mov.w	r7, #4294967295
 8005048:	e7ea      	b.n	8005020 <__swbuf_r+0x6c>
 800504a:	bf00      	nop
 800504c:	0800e2b8 	.word	0x0800e2b8
 8005050:	0800e2d8 	.word	0x0800e2d8
 8005054:	0800e298 	.word	0x0800e298

08005058 <__swsetup_r>:
 8005058:	4b32      	ldr	r3, [pc, #200]	; (8005124 <__swsetup_r+0xcc>)
 800505a:	b570      	push	{r4, r5, r6, lr}
 800505c:	681d      	ldr	r5, [r3, #0]
 800505e:	4606      	mov	r6, r0
 8005060:	460c      	mov	r4, r1
 8005062:	b125      	cbz	r5, 800506e <__swsetup_r+0x16>
 8005064:	69ab      	ldr	r3, [r5, #24]
 8005066:	b913      	cbnz	r3, 800506e <__swsetup_r+0x16>
 8005068:	4628      	mov	r0, r5
 800506a:	f000 f99b 	bl	80053a4 <__sinit>
 800506e:	4b2e      	ldr	r3, [pc, #184]	; (8005128 <__swsetup_r+0xd0>)
 8005070:	429c      	cmp	r4, r3
 8005072:	d10f      	bne.n	8005094 <__swsetup_r+0x3c>
 8005074:	686c      	ldr	r4, [r5, #4]
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800507c:	0719      	lsls	r1, r3, #28
 800507e:	d42c      	bmi.n	80050da <__swsetup_r+0x82>
 8005080:	06dd      	lsls	r5, r3, #27
 8005082:	d411      	bmi.n	80050a8 <__swsetup_r+0x50>
 8005084:	2309      	movs	r3, #9
 8005086:	6033      	str	r3, [r6, #0]
 8005088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800508c:	f04f 30ff 	mov.w	r0, #4294967295
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	e03e      	b.n	8005112 <__swsetup_r+0xba>
 8005094:	4b25      	ldr	r3, [pc, #148]	; (800512c <__swsetup_r+0xd4>)
 8005096:	429c      	cmp	r4, r3
 8005098:	d101      	bne.n	800509e <__swsetup_r+0x46>
 800509a:	68ac      	ldr	r4, [r5, #8]
 800509c:	e7eb      	b.n	8005076 <__swsetup_r+0x1e>
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <__swsetup_r+0xd8>)
 80050a0:	429c      	cmp	r4, r3
 80050a2:	bf08      	it	eq
 80050a4:	68ec      	ldreq	r4, [r5, #12]
 80050a6:	e7e6      	b.n	8005076 <__swsetup_r+0x1e>
 80050a8:	0758      	lsls	r0, r3, #29
 80050aa:	d512      	bpl.n	80050d2 <__swsetup_r+0x7a>
 80050ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ae:	b141      	cbz	r1, 80050c2 <__swsetup_r+0x6a>
 80050b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b4:	4299      	cmp	r1, r3
 80050b6:	d002      	beq.n	80050be <__swsetup_r+0x66>
 80050b8:	4630      	mov	r0, r6
 80050ba:	f000 fa91 	bl	80055e0 <_free_r>
 80050be:	2300      	movs	r3, #0
 80050c0:	6363      	str	r3, [r4, #52]	; 0x34
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	2300      	movs	r3, #0
 80050cc:	6063      	str	r3, [r4, #4]
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	f043 0308 	orr.w	r3, r3, #8
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	b94b      	cbnz	r3, 80050f2 <__swsetup_r+0x9a>
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d003      	beq.n	80050f2 <__swsetup_r+0x9a>
 80050ea:	4621      	mov	r1, r4
 80050ec:	4630      	mov	r0, r6
 80050ee:	f000 fa2f 	bl	8005550 <__smakebuf_r>
 80050f2:	89a0      	ldrh	r0, [r4, #12]
 80050f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050f8:	f010 0301 	ands.w	r3, r0, #1
 80050fc:	d00a      	beq.n	8005114 <__swsetup_r+0xbc>
 80050fe:	2300      	movs	r3, #0
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	6963      	ldr	r3, [r4, #20]
 8005104:	425b      	negs	r3, r3
 8005106:	61a3      	str	r3, [r4, #24]
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	b943      	cbnz	r3, 800511e <__swsetup_r+0xc6>
 800510c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005110:	d1ba      	bne.n	8005088 <__swsetup_r+0x30>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	0781      	lsls	r1, r0, #30
 8005116:	bf58      	it	pl
 8005118:	6963      	ldrpl	r3, [r4, #20]
 800511a:	60a3      	str	r3, [r4, #8]
 800511c:	e7f4      	b.n	8005108 <__swsetup_r+0xb0>
 800511e:	2000      	movs	r0, #0
 8005120:	e7f7      	b.n	8005112 <__swsetup_r+0xba>
 8005122:	bf00      	nop
 8005124:	20000078 	.word	0x20000078
 8005128:	0800e2b8 	.word	0x0800e2b8
 800512c:	0800e2d8 	.word	0x0800e2d8
 8005130:	0800e298 	.word	0x0800e298

08005134 <__assert_func>:
 8005134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005136:	4614      	mov	r4, r2
 8005138:	461a      	mov	r2, r3
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <__assert_func+0x2c>)
 800513c:	4605      	mov	r5, r0
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68d8      	ldr	r0, [r3, #12]
 8005142:	b14c      	cbz	r4, 8005158 <__assert_func+0x24>
 8005144:	4b07      	ldr	r3, [pc, #28]	; (8005164 <__assert_func+0x30>)
 8005146:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800514a:	9100      	str	r1, [sp, #0]
 800514c:	462b      	mov	r3, r5
 800514e:	4906      	ldr	r1, [pc, #24]	; (8005168 <__assert_func+0x34>)
 8005150:	f000 f9a6 	bl	80054a0 <fiprintf>
 8005154:	f000 fe3e 	bl	8005dd4 <abort>
 8005158:	4b04      	ldr	r3, [pc, #16]	; (800516c <__assert_func+0x38>)
 800515a:	461c      	mov	r4, r3
 800515c:	e7f3      	b.n	8005146 <__assert_func+0x12>
 800515e:	bf00      	nop
 8005160:	20000078 	.word	0x20000078
 8005164:	0800e25c 	.word	0x0800e25c
 8005168:	0800e269 	.word	0x0800e269
 800516c:	0800e297 	.word	0x0800e297

08005170 <__sflush_r>:
 8005170:	898a      	ldrh	r2, [r1, #12]
 8005172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005176:	4605      	mov	r5, r0
 8005178:	0710      	lsls	r0, r2, #28
 800517a:	460c      	mov	r4, r1
 800517c:	d458      	bmi.n	8005230 <__sflush_r+0xc0>
 800517e:	684b      	ldr	r3, [r1, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	dc05      	bgt.n	8005190 <__sflush_r+0x20>
 8005184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	dc02      	bgt.n	8005190 <__sflush_r+0x20>
 800518a:	2000      	movs	r0, #0
 800518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005192:	2e00      	cmp	r6, #0
 8005194:	d0f9      	beq.n	800518a <__sflush_r+0x1a>
 8005196:	2300      	movs	r3, #0
 8005198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800519c:	682f      	ldr	r7, [r5, #0]
 800519e:	602b      	str	r3, [r5, #0]
 80051a0:	d032      	beq.n	8005208 <__sflush_r+0x98>
 80051a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	075a      	lsls	r2, r3, #29
 80051a8:	d505      	bpl.n	80051b6 <__sflush_r+0x46>
 80051aa:	6863      	ldr	r3, [r4, #4]
 80051ac:	1ac0      	subs	r0, r0, r3
 80051ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051b0:	b10b      	cbz	r3, 80051b6 <__sflush_r+0x46>
 80051b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051b4:	1ac0      	subs	r0, r0, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	4602      	mov	r2, r0
 80051ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051bc:	4628      	mov	r0, r5
 80051be:	6a21      	ldr	r1, [r4, #32]
 80051c0:	47b0      	blx	r6
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	d106      	bne.n	80051d6 <__sflush_r+0x66>
 80051c8:	6829      	ldr	r1, [r5, #0]
 80051ca:	291d      	cmp	r1, #29
 80051cc:	d82c      	bhi.n	8005228 <__sflush_r+0xb8>
 80051ce:	4a2a      	ldr	r2, [pc, #168]	; (8005278 <__sflush_r+0x108>)
 80051d0:	40ca      	lsrs	r2, r1
 80051d2:	07d6      	lsls	r6, r2, #31
 80051d4:	d528      	bpl.n	8005228 <__sflush_r+0xb8>
 80051d6:	2200      	movs	r2, #0
 80051d8:	6062      	str	r2, [r4, #4]
 80051da:	6922      	ldr	r2, [r4, #16]
 80051dc:	04d9      	lsls	r1, r3, #19
 80051de:	6022      	str	r2, [r4, #0]
 80051e0:	d504      	bpl.n	80051ec <__sflush_r+0x7c>
 80051e2:	1c42      	adds	r2, r0, #1
 80051e4:	d101      	bne.n	80051ea <__sflush_r+0x7a>
 80051e6:	682b      	ldr	r3, [r5, #0]
 80051e8:	b903      	cbnz	r3, 80051ec <__sflush_r+0x7c>
 80051ea:	6560      	str	r0, [r4, #84]	; 0x54
 80051ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ee:	602f      	str	r7, [r5, #0]
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d0ca      	beq.n	800518a <__sflush_r+0x1a>
 80051f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051f8:	4299      	cmp	r1, r3
 80051fa:	d002      	beq.n	8005202 <__sflush_r+0x92>
 80051fc:	4628      	mov	r0, r5
 80051fe:	f000 f9ef 	bl	80055e0 <_free_r>
 8005202:	2000      	movs	r0, #0
 8005204:	6360      	str	r0, [r4, #52]	; 0x34
 8005206:	e7c1      	b.n	800518c <__sflush_r+0x1c>
 8005208:	6a21      	ldr	r1, [r4, #32]
 800520a:	2301      	movs	r3, #1
 800520c:	4628      	mov	r0, r5
 800520e:	47b0      	blx	r6
 8005210:	1c41      	adds	r1, r0, #1
 8005212:	d1c7      	bne.n	80051a4 <__sflush_r+0x34>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0c4      	beq.n	80051a4 <__sflush_r+0x34>
 800521a:	2b1d      	cmp	r3, #29
 800521c:	d001      	beq.n	8005222 <__sflush_r+0xb2>
 800521e:	2b16      	cmp	r3, #22
 8005220:	d101      	bne.n	8005226 <__sflush_r+0xb6>
 8005222:	602f      	str	r7, [r5, #0]
 8005224:	e7b1      	b.n	800518a <__sflush_r+0x1a>
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	e7ad      	b.n	800518c <__sflush_r+0x1c>
 8005230:	690f      	ldr	r7, [r1, #16]
 8005232:	2f00      	cmp	r7, #0
 8005234:	d0a9      	beq.n	800518a <__sflush_r+0x1a>
 8005236:	0793      	lsls	r3, r2, #30
 8005238:	bf18      	it	ne
 800523a:	2300      	movne	r3, #0
 800523c:	680e      	ldr	r6, [r1, #0]
 800523e:	bf08      	it	eq
 8005240:	694b      	ldreq	r3, [r1, #20]
 8005242:	eba6 0807 	sub.w	r8, r6, r7
 8005246:	600f      	str	r7, [r1, #0]
 8005248:	608b      	str	r3, [r1, #8]
 800524a:	f1b8 0f00 	cmp.w	r8, #0
 800524e:	dd9c      	ble.n	800518a <__sflush_r+0x1a>
 8005250:	4643      	mov	r3, r8
 8005252:	463a      	mov	r2, r7
 8005254:	4628      	mov	r0, r5
 8005256:	6a21      	ldr	r1, [r4, #32]
 8005258:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800525a:	47b0      	blx	r6
 800525c:	2800      	cmp	r0, #0
 800525e:	dc06      	bgt.n	800526e <__sflush_r+0xfe>
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	f04f 30ff 	mov.w	r0, #4294967295
 8005266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800526a:	81a3      	strh	r3, [r4, #12]
 800526c:	e78e      	b.n	800518c <__sflush_r+0x1c>
 800526e:	4407      	add	r7, r0
 8005270:	eba8 0800 	sub.w	r8, r8, r0
 8005274:	e7e9      	b.n	800524a <__sflush_r+0xda>
 8005276:	bf00      	nop
 8005278:	20400001 	.word	0x20400001

0800527c <_fflush_r>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	690b      	ldr	r3, [r1, #16]
 8005280:	4605      	mov	r5, r0
 8005282:	460c      	mov	r4, r1
 8005284:	b913      	cbnz	r3, 800528c <_fflush_r+0x10>
 8005286:	2500      	movs	r5, #0
 8005288:	4628      	mov	r0, r5
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	b118      	cbz	r0, 8005296 <_fflush_r+0x1a>
 800528e:	6983      	ldr	r3, [r0, #24]
 8005290:	b90b      	cbnz	r3, 8005296 <_fflush_r+0x1a>
 8005292:	f000 f887 	bl	80053a4 <__sinit>
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <_fflush_r+0x6c>)
 8005298:	429c      	cmp	r4, r3
 800529a:	d11b      	bne.n	80052d4 <_fflush_r+0x58>
 800529c:	686c      	ldr	r4, [r5, #4]
 800529e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ef      	beq.n	8005286 <_fflush_r+0xa>
 80052a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052a8:	07d0      	lsls	r0, r2, #31
 80052aa:	d404      	bmi.n	80052b6 <_fflush_r+0x3a>
 80052ac:	0599      	lsls	r1, r3, #22
 80052ae:	d402      	bmi.n	80052b6 <_fflush_r+0x3a>
 80052b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b2:	f000 f927 	bl	8005504 <__retarget_lock_acquire_recursive>
 80052b6:	4628      	mov	r0, r5
 80052b8:	4621      	mov	r1, r4
 80052ba:	f7ff ff59 	bl	8005170 <__sflush_r>
 80052be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c0:	4605      	mov	r5, r0
 80052c2:	07da      	lsls	r2, r3, #31
 80052c4:	d4e0      	bmi.n	8005288 <_fflush_r+0xc>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	059b      	lsls	r3, r3, #22
 80052ca:	d4dd      	bmi.n	8005288 <_fflush_r+0xc>
 80052cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ce:	f000 f91a 	bl	8005506 <__retarget_lock_release_recursive>
 80052d2:	e7d9      	b.n	8005288 <_fflush_r+0xc>
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <_fflush_r+0x70>)
 80052d6:	429c      	cmp	r4, r3
 80052d8:	d101      	bne.n	80052de <_fflush_r+0x62>
 80052da:	68ac      	ldr	r4, [r5, #8]
 80052dc:	e7df      	b.n	800529e <_fflush_r+0x22>
 80052de:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <_fflush_r+0x74>)
 80052e0:	429c      	cmp	r4, r3
 80052e2:	bf08      	it	eq
 80052e4:	68ec      	ldreq	r4, [r5, #12]
 80052e6:	e7da      	b.n	800529e <_fflush_r+0x22>
 80052e8:	0800e2b8 	.word	0x0800e2b8
 80052ec:	0800e2d8 	.word	0x0800e2d8
 80052f0:	0800e298 	.word	0x0800e298

080052f4 <std>:
 80052f4:	2300      	movs	r3, #0
 80052f6:	b510      	push	{r4, lr}
 80052f8:	4604      	mov	r4, r0
 80052fa:	e9c0 3300 	strd	r3, r3, [r0]
 80052fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005302:	6083      	str	r3, [r0, #8]
 8005304:	8181      	strh	r1, [r0, #12]
 8005306:	6643      	str	r3, [r0, #100]	; 0x64
 8005308:	81c2      	strh	r2, [r0, #14]
 800530a:	6183      	str	r3, [r0, #24]
 800530c:	4619      	mov	r1, r3
 800530e:	2208      	movs	r2, #8
 8005310:	305c      	adds	r0, #92	; 0x5c
 8005312:	f7ff fd69 	bl	8004de8 <memset>
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <std+0x38>)
 8005318:	6224      	str	r4, [r4, #32]
 800531a:	6263      	str	r3, [r4, #36]	; 0x24
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <std+0x3c>)
 800531e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <std+0x40>)
 8005322:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <std+0x44>)
 8005326:	6323      	str	r3, [r4, #48]	; 0x30
 8005328:	bd10      	pop	{r4, pc}
 800532a:	bf00      	nop
 800532c:	08005d29 	.word	0x08005d29
 8005330:	08005d4b 	.word	0x08005d4b
 8005334:	08005d83 	.word	0x08005d83
 8005338:	08005da7 	.word	0x08005da7

0800533c <_cleanup_r>:
 800533c:	4901      	ldr	r1, [pc, #4]	; (8005344 <_cleanup_r+0x8>)
 800533e:	f000 b8c1 	b.w	80054c4 <_fwalk_reent>
 8005342:	bf00      	nop
 8005344:	0800527d 	.word	0x0800527d

08005348 <__sfmoreglue>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	2568      	movs	r5, #104	; 0x68
 800534c:	1e4a      	subs	r2, r1, #1
 800534e:	4355      	muls	r5, r2
 8005350:	460e      	mov	r6, r1
 8005352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005356:	f000 f98f 	bl	8005678 <_malloc_r>
 800535a:	4604      	mov	r4, r0
 800535c:	b140      	cbz	r0, 8005370 <__sfmoreglue+0x28>
 800535e:	2100      	movs	r1, #0
 8005360:	e9c0 1600 	strd	r1, r6, [r0]
 8005364:	300c      	adds	r0, #12
 8005366:	60a0      	str	r0, [r4, #8]
 8005368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800536c:	f7ff fd3c 	bl	8004de8 <memset>
 8005370:	4620      	mov	r0, r4
 8005372:	bd70      	pop	{r4, r5, r6, pc}

08005374 <__sfp_lock_acquire>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__sfp_lock_acquire+0x8>)
 8005376:	f000 b8c5 	b.w	8005504 <__retarget_lock_acquire_recursive>
 800537a:	bf00      	nop
 800537c:	2000340c 	.word	0x2000340c

08005380 <__sfp_lock_release>:
 8005380:	4801      	ldr	r0, [pc, #4]	; (8005388 <__sfp_lock_release+0x8>)
 8005382:	f000 b8c0 	b.w	8005506 <__retarget_lock_release_recursive>
 8005386:	bf00      	nop
 8005388:	2000340c 	.word	0x2000340c

0800538c <__sinit_lock_acquire>:
 800538c:	4801      	ldr	r0, [pc, #4]	; (8005394 <__sinit_lock_acquire+0x8>)
 800538e:	f000 b8b9 	b.w	8005504 <__retarget_lock_acquire_recursive>
 8005392:	bf00      	nop
 8005394:	20003407 	.word	0x20003407

08005398 <__sinit_lock_release>:
 8005398:	4801      	ldr	r0, [pc, #4]	; (80053a0 <__sinit_lock_release+0x8>)
 800539a:	f000 b8b4 	b.w	8005506 <__retarget_lock_release_recursive>
 800539e:	bf00      	nop
 80053a0:	20003407 	.word	0x20003407

080053a4 <__sinit>:
 80053a4:	b510      	push	{r4, lr}
 80053a6:	4604      	mov	r4, r0
 80053a8:	f7ff fff0 	bl	800538c <__sinit_lock_acquire>
 80053ac:	69a3      	ldr	r3, [r4, #24]
 80053ae:	b11b      	cbz	r3, 80053b8 <__sinit+0x14>
 80053b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b4:	f7ff bff0 	b.w	8005398 <__sinit_lock_release>
 80053b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053bc:	6523      	str	r3, [r4, #80]	; 0x50
 80053be:	4b13      	ldr	r3, [pc, #76]	; (800540c <__sinit+0x68>)
 80053c0:	4a13      	ldr	r2, [pc, #76]	; (8005410 <__sinit+0x6c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	bf08      	it	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	4620      	mov	r0, r4
 80053ce:	bf08      	it	eq
 80053d0:	61a3      	streq	r3, [r4, #24]
 80053d2:	f000 f81f 	bl	8005414 <__sfp>
 80053d6:	6060      	str	r0, [r4, #4]
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 f81b 	bl	8005414 <__sfp>
 80053de:	60a0      	str	r0, [r4, #8]
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 f817 	bl	8005414 <__sfp>
 80053e6:	2200      	movs	r2, #0
 80053e8:	2104      	movs	r1, #4
 80053ea:	60e0      	str	r0, [r4, #12]
 80053ec:	6860      	ldr	r0, [r4, #4]
 80053ee:	f7ff ff81 	bl	80052f4 <std>
 80053f2:	2201      	movs	r2, #1
 80053f4:	2109      	movs	r1, #9
 80053f6:	68a0      	ldr	r0, [r4, #8]
 80053f8:	f7ff ff7c 	bl	80052f4 <std>
 80053fc:	2202      	movs	r2, #2
 80053fe:	2112      	movs	r1, #18
 8005400:	68e0      	ldr	r0, [r4, #12]
 8005402:	f7ff ff77 	bl	80052f4 <std>
 8005406:	2301      	movs	r3, #1
 8005408:	61a3      	str	r3, [r4, #24]
 800540a:	e7d1      	b.n	80053b0 <__sinit+0xc>
 800540c:	0800e1e0 	.word	0x0800e1e0
 8005410:	0800533d 	.word	0x0800533d

08005414 <__sfp>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	4607      	mov	r7, r0
 8005418:	f7ff ffac 	bl	8005374 <__sfp_lock_acquire>
 800541c:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <__sfp+0x84>)
 800541e:	681e      	ldr	r6, [r3, #0]
 8005420:	69b3      	ldr	r3, [r6, #24]
 8005422:	b913      	cbnz	r3, 800542a <__sfp+0x16>
 8005424:	4630      	mov	r0, r6
 8005426:	f7ff ffbd 	bl	80053a4 <__sinit>
 800542a:	3648      	adds	r6, #72	; 0x48
 800542c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005430:	3b01      	subs	r3, #1
 8005432:	d503      	bpl.n	800543c <__sfp+0x28>
 8005434:	6833      	ldr	r3, [r6, #0]
 8005436:	b30b      	cbz	r3, 800547c <__sfp+0x68>
 8005438:	6836      	ldr	r6, [r6, #0]
 800543a:	e7f7      	b.n	800542c <__sfp+0x18>
 800543c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005440:	b9d5      	cbnz	r5, 8005478 <__sfp+0x64>
 8005442:	4b16      	ldr	r3, [pc, #88]	; (800549c <__sfp+0x88>)
 8005444:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005448:	60e3      	str	r3, [r4, #12]
 800544a:	6665      	str	r5, [r4, #100]	; 0x64
 800544c:	f000 f859 	bl	8005502 <__retarget_lock_init_recursive>
 8005450:	f7ff ff96 	bl	8005380 <__sfp_lock_release>
 8005454:	2208      	movs	r2, #8
 8005456:	4629      	mov	r1, r5
 8005458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800545c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005460:	6025      	str	r5, [r4, #0]
 8005462:	61a5      	str	r5, [r4, #24]
 8005464:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005468:	f7ff fcbe 	bl	8004de8 <memset>
 800546c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005470:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005474:	4620      	mov	r0, r4
 8005476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005478:	3468      	adds	r4, #104	; 0x68
 800547a:	e7d9      	b.n	8005430 <__sfp+0x1c>
 800547c:	2104      	movs	r1, #4
 800547e:	4638      	mov	r0, r7
 8005480:	f7ff ff62 	bl	8005348 <__sfmoreglue>
 8005484:	4604      	mov	r4, r0
 8005486:	6030      	str	r0, [r6, #0]
 8005488:	2800      	cmp	r0, #0
 800548a:	d1d5      	bne.n	8005438 <__sfp+0x24>
 800548c:	f7ff ff78 	bl	8005380 <__sfp_lock_release>
 8005490:	230c      	movs	r3, #12
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	e7ee      	b.n	8005474 <__sfp+0x60>
 8005496:	bf00      	nop
 8005498:	0800e1e0 	.word	0x0800e1e0
 800549c:	ffff0001 	.word	0xffff0001

080054a0 <fiprintf>:
 80054a0:	b40e      	push	{r1, r2, r3}
 80054a2:	b503      	push	{r0, r1, lr}
 80054a4:	4601      	mov	r1, r0
 80054a6:	ab03      	add	r3, sp, #12
 80054a8:	4805      	ldr	r0, [pc, #20]	; (80054c0 <fiprintf+0x20>)
 80054aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ae:	6800      	ldr	r0, [r0, #0]
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	f000 f963 	bl	800577c <_vfiprintf_r>
 80054b6:	b002      	add	sp, #8
 80054b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054bc:	b003      	add	sp, #12
 80054be:	4770      	bx	lr
 80054c0:	20000078 	.word	0x20000078

080054c4 <_fwalk_reent>:
 80054c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c8:	4606      	mov	r6, r0
 80054ca:	4688      	mov	r8, r1
 80054cc:	2700      	movs	r7, #0
 80054ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054d6:	f1b9 0901 	subs.w	r9, r9, #1
 80054da:	d505      	bpl.n	80054e8 <_fwalk_reent+0x24>
 80054dc:	6824      	ldr	r4, [r4, #0]
 80054de:	2c00      	cmp	r4, #0
 80054e0:	d1f7      	bne.n	80054d2 <_fwalk_reent+0xe>
 80054e2:	4638      	mov	r0, r7
 80054e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054e8:	89ab      	ldrh	r3, [r5, #12]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d907      	bls.n	80054fe <_fwalk_reent+0x3a>
 80054ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054f2:	3301      	adds	r3, #1
 80054f4:	d003      	beq.n	80054fe <_fwalk_reent+0x3a>
 80054f6:	4629      	mov	r1, r5
 80054f8:	4630      	mov	r0, r6
 80054fa:	47c0      	blx	r8
 80054fc:	4307      	orrs	r7, r0
 80054fe:	3568      	adds	r5, #104	; 0x68
 8005500:	e7e9      	b.n	80054d6 <_fwalk_reent+0x12>

08005502 <__retarget_lock_init_recursive>:
 8005502:	4770      	bx	lr

08005504 <__retarget_lock_acquire_recursive>:
 8005504:	4770      	bx	lr

08005506 <__retarget_lock_release_recursive>:
 8005506:	4770      	bx	lr

08005508 <__swhatbuf_r>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	460e      	mov	r6, r1
 800550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005510:	4614      	mov	r4, r2
 8005512:	2900      	cmp	r1, #0
 8005514:	461d      	mov	r5, r3
 8005516:	b096      	sub	sp, #88	; 0x58
 8005518:	da07      	bge.n	800552a <__swhatbuf_r+0x22>
 800551a:	2300      	movs	r3, #0
 800551c:	602b      	str	r3, [r5, #0]
 800551e:	89b3      	ldrh	r3, [r6, #12]
 8005520:	061a      	lsls	r2, r3, #24
 8005522:	d410      	bmi.n	8005546 <__swhatbuf_r+0x3e>
 8005524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005528:	e00e      	b.n	8005548 <__swhatbuf_r+0x40>
 800552a:	466a      	mov	r2, sp
 800552c:	f000 fc6a 	bl	8005e04 <_fstat_r>
 8005530:	2800      	cmp	r0, #0
 8005532:	dbf2      	blt.n	800551a <__swhatbuf_r+0x12>
 8005534:	9a01      	ldr	r2, [sp, #4]
 8005536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800553a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800553e:	425a      	negs	r2, r3
 8005540:	415a      	adcs	r2, r3
 8005542:	602a      	str	r2, [r5, #0]
 8005544:	e7ee      	b.n	8005524 <__swhatbuf_r+0x1c>
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	2000      	movs	r0, #0
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	b016      	add	sp, #88	; 0x58
 800554e:	bd70      	pop	{r4, r5, r6, pc}

08005550 <__smakebuf_r>:
 8005550:	898b      	ldrh	r3, [r1, #12]
 8005552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005554:	079d      	lsls	r5, r3, #30
 8005556:	4606      	mov	r6, r0
 8005558:	460c      	mov	r4, r1
 800555a:	d507      	bpl.n	800556c <__smakebuf_r+0x1c>
 800555c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	2301      	movs	r3, #1
 8005566:	6163      	str	r3, [r4, #20]
 8005568:	b002      	add	sp, #8
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	466a      	mov	r2, sp
 800556e:	ab01      	add	r3, sp, #4
 8005570:	f7ff ffca 	bl	8005508 <__swhatbuf_r>
 8005574:	9900      	ldr	r1, [sp, #0]
 8005576:	4605      	mov	r5, r0
 8005578:	4630      	mov	r0, r6
 800557a:	f000 f87d 	bl	8005678 <_malloc_r>
 800557e:	b948      	cbnz	r0, 8005594 <__smakebuf_r+0x44>
 8005580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005584:	059a      	lsls	r2, r3, #22
 8005586:	d4ef      	bmi.n	8005568 <__smakebuf_r+0x18>
 8005588:	f023 0303 	bic.w	r3, r3, #3
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	81a3      	strh	r3, [r4, #12]
 8005592:	e7e3      	b.n	800555c <__smakebuf_r+0xc>
 8005594:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <__smakebuf_r+0x7c>)
 8005596:	62b3      	str	r3, [r6, #40]	; 0x28
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	6020      	str	r0, [r4, #0]
 800559c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	9b00      	ldr	r3, [sp, #0]
 80055a4:	6120      	str	r0, [r4, #16]
 80055a6:	6163      	str	r3, [r4, #20]
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	b15b      	cbz	r3, 80055c4 <__smakebuf_r+0x74>
 80055ac:	4630      	mov	r0, r6
 80055ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b2:	f000 fc39 	bl	8005e28 <_isatty_r>
 80055b6:	b128      	cbz	r0, 80055c4 <__smakebuf_r+0x74>
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	89a0      	ldrh	r0, [r4, #12]
 80055c6:	4305      	orrs	r5, r0
 80055c8:	81a5      	strh	r5, [r4, #12]
 80055ca:	e7cd      	b.n	8005568 <__smakebuf_r+0x18>
 80055cc:	0800533d 	.word	0x0800533d

080055d0 <malloc>:
 80055d0:	4b02      	ldr	r3, [pc, #8]	; (80055dc <malloc+0xc>)
 80055d2:	4601      	mov	r1, r0
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	f000 b84f 	b.w	8005678 <_malloc_r>
 80055da:	bf00      	nop
 80055dc:	20000078 	.word	0x20000078

080055e0 <_free_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4605      	mov	r5, r0
 80055e4:	2900      	cmp	r1, #0
 80055e6:	d043      	beq.n	8005670 <_free_r+0x90>
 80055e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ec:	1f0c      	subs	r4, r1, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bfb8      	it	lt
 80055f2:	18e4      	addlt	r4, r4, r3
 80055f4:	f000 fc48 	bl	8005e88 <__malloc_lock>
 80055f8:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <_free_r+0x94>)
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	4610      	mov	r0, r2
 80055fe:	b933      	cbnz	r3, 800560e <_free_r+0x2e>
 8005600:	6063      	str	r3, [r4, #4]
 8005602:	6014      	str	r4, [r2, #0]
 8005604:	4628      	mov	r0, r5
 8005606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800560a:	f000 bc43 	b.w	8005e94 <__malloc_unlock>
 800560e:	42a3      	cmp	r3, r4
 8005610:	d90a      	bls.n	8005628 <_free_r+0x48>
 8005612:	6821      	ldr	r1, [r4, #0]
 8005614:	1862      	adds	r2, r4, r1
 8005616:	4293      	cmp	r3, r2
 8005618:	bf01      	itttt	eq
 800561a:	681a      	ldreq	r2, [r3, #0]
 800561c:	685b      	ldreq	r3, [r3, #4]
 800561e:	1852      	addeq	r2, r2, r1
 8005620:	6022      	streq	r2, [r4, #0]
 8005622:	6063      	str	r3, [r4, #4]
 8005624:	6004      	str	r4, [r0, #0]
 8005626:	e7ed      	b.n	8005604 <_free_r+0x24>
 8005628:	461a      	mov	r2, r3
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	b10b      	cbz	r3, 8005632 <_free_r+0x52>
 800562e:	42a3      	cmp	r3, r4
 8005630:	d9fa      	bls.n	8005628 <_free_r+0x48>
 8005632:	6811      	ldr	r1, [r2, #0]
 8005634:	1850      	adds	r0, r2, r1
 8005636:	42a0      	cmp	r0, r4
 8005638:	d10b      	bne.n	8005652 <_free_r+0x72>
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	4401      	add	r1, r0
 800563e:	1850      	adds	r0, r2, r1
 8005640:	4283      	cmp	r3, r0
 8005642:	6011      	str	r1, [r2, #0]
 8005644:	d1de      	bne.n	8005604 <_free_r+0x24>
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4401      	add	r1, r0
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	6053      	str	r3, [r2, #4]
 8005650:	e7d8      	b.n	8005604 <_free_r+0x24>
 8005652:	d902      	bls.n	800565a <_free_r+0x7a>
 8005654:	230c      	movs	r3, #12
 8005656:	602b      	str	r3, [r5, #0]
 8005658:	e7d4      	b.n	8005604 <_free_r+0x24>
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	1821      	adds	r1, r4, r0
 800565e:	428b      	cmp	r3, r1
 8005660:	bf01      	itttt	eq
 8005662:	6819      	ldreq	r1, [r3, #0]
 8005664:	685b      	ldreq	r3, [r3, #4]
 8005666:	1809      	addeq	r1, r1, r0
 8005668:	6021      	streq	r1, [r4, #0]
 800566a:	6063      	str	r3, [r4, #4]
 800566c:	6054      	str	r4, [r2, #4]
 800566e:	e7c9      	b.n	8005604 <_free_r+0x24>
 8005670:	bd38      	pop	{r3, r4, r5, pc}
 8005672:	bf00      	nop
 8005674:	2000047c 	.word	0x2000047c

08005678 <_malloc_r>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	1ccd      	adds	r5, r1, #3
 800567c:	f025 0503 	bic.w	r5, r5, #3
 8005680:	3508      	adds	r5, #8
 8005682:	2d0c      	cmp	r5, #12
 8005684:	bf38      	it	cc
 8005686:	250c      	movcc	r5, #12
 8005688:	2d00      	cmp	r5, #0
 800568a:	4606      	mov	r6, r0
 800568c:	db01      	blt.n	8005692 <_malloc_r+0x1a>
 800568e:	42a9      	cmp	r1, r5
 8005690:	d903      	bls.n	800569a <_malloc_r+0x22>
 8005692:	230c      	movs	r3, #12
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	2000      	movs	r0, #0
 8005698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800569a:	f000 fbf5 	bl	8005e88 <__malloc_lock>
 800569e:	4921      	ldr	r1, [pc, #132]	; (8005724 <_malloc_r+0xac>)
 80056a0:	680a      	ldr	r2, [r1, #0]
 80056a2:	4614      	mov	r4, r2
 80056a4:	b99c      	cbnz	r4, 80056ce <_malloc_r+0x56>
 80056a6:	4f20      	ldr	r7, [pc, #128]	; (8005728 <_malloc_r+0xb0>)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	b923      	cbnz	r3, 80056b6 <_malloc_r+0x3e>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4630      	mov	r0, r6
 80056b0:	f000 fb2a 	bl	8005d08 <_sbrk_r>
 80056b4:	6038      	str	r0, [r7, #0]
 80056b6:	4629      	mov	r1, r5
 80056b8:	4630      	mov	r0, r6
 80056ba:	f000 fb25 	bl	8005d08 <_sbrk_r>
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	d123      	bne.n	800570a <_malloc_r+0x92>
 80056c2:	230c      	movs	r3, #12
 80056c4:	4630      	mov	r0, r6
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	f000 fbe4 	bl	8005e94 <__malloc_unlock>
 80056cc:	e7e3      	b.n	8005696 <_malloc_r+0x1e>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	1b5b      	subs	r3, r3, r5
 80056d2:	d417      	bmi.n	8005704 <_malloc_r+0x8c>
 80056d4:	2b0b      	cmp	r3, #11
 80056d6:	d903      	bls.n	80056e0 <_malloc_r+0x68>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	441c      	add	r4, r3
 80056dc:	6025      	str	r5, [r4, #0]
 80056de:	e004      	b.n	80056ea <_malloc_r+0x72>
 80056e0:	6863      	ldr	r3, [r4, #4]
 80056e2:	42a2      	cmp	r2, r4
 80056e4:	bf0c      	ite	eq
 80056e6:	600b      	streq	r3, [r1, #0]
 80056e8:	6053      	strne	r3, [r2, #4]
 80056ea:	4630      	mov	r0, r6
 80056ec:	f000 fbd2 	bl	8005e94 <__malloc_unlock>
 80056f0:	f104 000b 	add.w	r0, r4, #11
 80056f4:	1d23      	adds	r3, r4, #4
 80056f6:	f020 0007 	bic.w	r0, r0, #7
 80056fa:	1ac2      	subs	r2, r0, r3
 80056fc:	d0cc      	beq.n	8005698 <_malloc_r+0x20>
 80056fe:	1a1b      	subs	r3, r3, r0
 8005700:	50a3      	str	r3, [r4, r2]
 8005702:	e7c9      	b.n	8005698 <_malloc_r+0x20>
 8005704:	4622      	mov	r2, r4
 8005706:	6864      	ldr	r4, [r4, #4]
 8005708:	e7cc      	b.n	80056a4 <_malloc_r+0x2c>
 800570a:	1cc4      	adds	r4, r0, #3
 800570c:	f024 0403 	bic.w	r4, r4, #3
 8005710:	42a0      	cmp	r0, r4
 8005712:	d0e3      	beq.n	80056dc <_malloc_r+0x64>
 8005714:	1a21      	subs	r1, r4, r0
 8005716:	4630      	mov	r0, r6
 8005718:	f000 faf6 	bl	8005d08 <_sbrk_r>
 800571c:	3001      	adds	r0, #1
 800571e:	d1dd      	bne.n	80056dc <_malloc_r+0x64>
 8005720:	e7cf      	b.n	80056c2 <_malloc_r+0x4a>
 8005722:	bf00      	nop
 8005724:	2000047c 	.word	0x2000047c
 8005728:	20000480 	.word	0x20000480

0800572c <__sfputc_r>:
 800572c:	6893      	ldr	r3, [r2, #8]
 800572e:	b410      	push	{r4}
 8005730:	3b01      	subs	r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	6093      	str	r3, [r2, #8]
 8005736:	da07      	bge.n	8005748 <__sfputc_r+0x1c>
 8005738:	6994      	ldr	r4, [r2, #24]
 800573a:	42a3      	cmp	r3, r4
 800573c:	db01      	blt.n	8005742 <__sfputc_r+0x16>
 800573e:	290a      	cmp	r1, #10
 8005740:	d102      	bne.n	8005748 <__sfputc_r+0x1c>
 8005742:	bc10      	pop	{r4}
 8005744:	f7ff bc36 	b.w	8004fb4 <__swbuf_r>
 8005748:	6813      	ldr	r3, [r2, #0]
 800574a:	1c58      	adds	r0, r3, #1
 800574c:	6010      	str	r0, [r2, #0]
 800574e:	7019      	strb	r1, [r3, #0]
 8005750:	4608      	mov	r0, r1
 8005752:	bc10      	pop	{r4}
 8005754:	4770      	bx	lr

08005756 <__sfputs_r>:
 8005756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005758:	4606      	mov	r6, r0
 800575a:	460f      	mov	r7, r1
 800575c:	4614      	mov	r4, r2
 800575e:	18d5      	adds	r5, r2, r3
 8005760:	42ac      	cmp	r4, r5
 8005762:	d101      	bne.n	8005768 <__sfputs_r+0x12>
 8005764:	2000      	movs	r0, #0
 8005766:	e007      	b.n	8005778 <__sfputs_r+0x22>
 8005768:	463a      	mov	r2, r7
 800576a:	4630      	mov	r0, r6
 800576c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005770:	f7ff ffdc 	bl	800572c <__sfputc_r>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d1f3      	bne.n	8005760 <__sfputs_r+0xa>
 8005778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800577c <_vfiprintf_r>:
 800577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005780:	460d      	mov	r5, r1
 8005782:	4614      	mov	r4, r2
 8005784:	4698      	mov	r8, r3
 8005786:	4606      	mov	r6, r0
 8005788:	b09d      	sub	sp, #116	; 0x74
 800578a:	b118      	cbz	r0, 8005794 <_vfiprintf_r+0x18>
 800578c:	6983      	ldr	r3, [r0, #24]
 800578e:	b90b      	cbnz	r3, 8005794 <_vfiprintf_r+0x18>
 8005790:	f7ff fe08 	bl	80053a4 <__sinit>
 8005794:	4b89      	ldr	r3, [pc, #548]	; (80059bc <_vfiprintf_r+0x240>)
 8005796:	429d      	cmp	r5, r3
 8005798:	d11b      	bne.n	80057d2 <_vfiprintf_r+0x56>
 800579a:	6875      	ldr	r5, [r6, #4]
 800579c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800579e:	07d9      	lsls	r1, r3, #31
 80057a0:	d405      	bmi.n	80057ae <_vfiprintf_r+0x32>
 80057a2:	89ab      	ldrh	r3, [r5, #12]
 80057a4:	059a      	lsls	r2, r3, #22
 80057a6:	d402      	bmi.n	80057ae <_vfiprintf_r+0x32>
 80057a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057aa:	f7ff feab 	bl	8005504 <__retarget_lock_acquire_recursive>
 80057ae:	89ab      	ldrh	r3, [r5, #12]
 80057b0:	071b      	lsls	r3, r3, #28
 80057b2:	d501      	bpl.n	80057b8 <_vfiprintf_r+0x3c>
 80057b4:	692b      	ldr	r3, [r5, #16]
 80057b6:	b9eb      	cbnz	r3, 80057f4 <_vfiprintf_r+0x78>
 80057b8:	4629      	mov	r1, r5
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7ff fc4c 	bl	8005058 <__swsetup_r>
 80057c0:	b1c0      	cbz	r0, 80057f4 <_vfiprintf_r+0x78>
 80057c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c4:	07dc      	lsls	r4, r3, #31
 80057c6:	d50e      	bpl.n	80057e6 <_vfiprintf_r+0x6a>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	b01d      	add	sp, #116	; 0x74
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <_vfiprintf_r+0x244>)
 80057d4:	429d      	cmp	r5, r3
 80057d6:	d101      	bne.n	80057dc <_vfiprintf_r+0x60>
 80057d8:	68b5      	ldr	r5, [r6, #8]
 80057da:	e7df      	b.n	800579c <_vfiprintf_r+0x20>
 80057dc:	4b79      	ldr	r3, [pc, #484]	; (80059c4 <_vfiprintf_r+0x248>)
 80057de:	429d      	cmp	r5, r3
 80057e0:	bf08      	it	eq
 80057e2:	68f5      	ldreq	r5, [r6, #12]
 80057e4:	e7da      	b.n	800579c <_vfiprintf_r+0x20>
 80057e6:	89ab      	ldrh	r3, [r5, #12]
 80057e8:	0598      	lsls	r0, r3, #22
 80057ea:	d4ed      	bmi.n	80057c8 <_vfiprintf_r+0x4c>
 80057ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ee:	f7ff fe8a 	bl	8005506 <__retarget_lock_release_recursive>
 80057f2:	e7e9      	b.n	80057c8 <_vfiprintf_r+0x4c>
 80057f4:	2300      	movs	r3, #0
 80057f6:	9309      	str	r3, [sp, #36]	; 0x24
 80057f8:	2320      	movs	r3, #32
 80057fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057fe:	2330      	movs	r3, #48	; 0x30
 8005800:	f04f 0901 	mov.w	r9, #1
 8005804:	f8cd 800c 	str.w	r8, [sp, #12]
 8005808:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80059c8 <_vfiprintf_r+0x24c>
 800580c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005810:	4623      	mov	r3, r4
 8005812:	469a      	mov	sl, r3
 8005814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005818:	b10a      	cbz	r2, 800581e <_vfiprintf_r+0xa2>
 800581a:	2a25      	cmp	r2, #37	; 0x25
 800581c:	d1f9      	bne.n	8005812 <_vfiprintf_r+0x96>
 800581e:	ebba 0b04 	subs.w	fp, sl, r4
 8005822:	d00b      	beq.n	800583c <_vfiprintf_r+0xc0>
 8005824:	465b      	mov	r3, fp
 8005826:	4622      	mov	r2, r4
 8005828:	4629      	mov	r1, r5
 800582a:	4630      	mov	r0, r6
 800582c:	f7ff ff93 	bl	8005756 <__sfputs_r>
 8005830:	3001      	adds	r0, #1
 8005832:	f000 80aa 	beq.w	800598a <_vfiprintf_r+0x20e>
 8005836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005838:	445a      	add	r2, fp
 800583a:	9209      	str	r2, [sp, #36]	; 0x24
 800583c:	f89a 3000 	ldrb.w	r3, [sl]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80a2 	beq.w	800598a <_vfiprintf_r+0x20e>
 8005846:	2300      	movs	r3, #0
 8005848:	f04f 32ff 	mov.w	r2, #4294967295
 800584c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005850:	f10a 0a01 	add.w	sl, sl, #1
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	9307      	str	r3, [sp, #28]
 8005858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800585c:	931a      	str	r3, [sp, #104]	; 0x68
 800585e:	4654      	mov	r4, sl
 8005860:	2205      	movs	r2, #5
 8005862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005866:	4858      	ldr	r0, [pc, #352]	; (80059c8 <_vfiprintf_r+0x24c>)
 8005868:	f000 fb00 	bl	8005e6c <memchr>
 800586c:	9a04      	ldr	r2, [sp, #16]
 800586e:	b9d8      	cbnz	r0, 80058a8 <_vfiprintf_r+0x12c>
 8005870:	06d1      	lsls	r1, r2, #27
 8005872:	bf44      	itt	mi
 8005874:	2320      	movmi	r3, #32
 8005876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587a:	0713      	lsls	r3, r2, #28
 800587c:	bf44      	itt	mi
 800587e:	232b      	movmi	r3, #43	; 0x2b
 8005880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005884:	f89a 3000 	ldrb.w	r3, [sl]
 8005888:	2b2a      	cmp	r3, #42	; 0x2a
 800588a:	d015      	beq.n	80058b8 <_vfiprintf_r+0x13c>
 800588c:	4654      	mov	r4, sl
 800588e:	2000      	movs	r0, #0
 8005890:	f04f 0c0a 	mov.w	ip, #10
 8005894:	9a07      	ldr	r2, [sp, #28]
 8005896:	4621      	mov	r1, r4
 8005898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800589c:	3b30      	subs	r3, #48	; 0x30
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d94e      	bls.n	8005940 <_vfiprintf_r+0x1c4>
 80058a2:	b1b0      	cbz	r0, 80058d2 <_vfiprintf_r+0x156>
 80058a4:	9207      	str	r2, [sp, #28]
 80058a6:	e014      	b.n	80058d2 <_vfiprintf_r+0x156>
 80058a8:	eba0 0308 	sub.w	r3, r0, r8
 80058ac:	fa09 f303 	lsl.w	r3, r9, r3
 80058b0:	4313      	orrs	r3, r2
 80058b2:	46a2      	mov	sl, r4
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	e7d2      	b.n	800585e <_vfiprintf_r+0xe2>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	1d19      	adds	r1, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	9103      	str	r1, [sp, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bfbb      	ittet	lt
 80058c4:	425b      	neglt	r3, r3
 80058c6:	f042 0202 	orrlt.w	r2, r2, #2
 80058ca:	9307      	strge	r3, [sp, #28]
 80058cc:	9307      	strlt	r3, [sp, #28]
 80058ce:	bfb8      	it	lt
 80058d0:	9204      	strlt	r2, [sp, #16]
 80058d2:	7823      	ldrb	r3, [r4, #0]
 80058d4:	2b2e      	cmp	r3, #46	; 0x2e
 80058d6:	d10c      	bne.n	80058f2 <_vfiprintf_r+0x176>
 80058d8:	7863      	ldrb	r3, [r4, #1]
 80058da:	2b2a      	cmp	r3, #42	; 0x2a
 80058dc:	d135      	bne.n	800594a <_vfiprintf_r+0x1ce>
 80058de:	9b03      	ldr	r3, [sp, #12]
 80058e0:	3402      	adds	r4, #2
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	9203      	str	r2, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bfb8      	it	lt
 80058ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f0:	9305      	str	r3, [sp, #20]
 80058f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059d8 <_vfiprintf_r+0x25c>
 80058f6:	2203      	movs	r2, #3
 80058f8:	4650      	mov	r0, sl
 80058fa:	7821      	ldrb	r1, [r4, #0]
 80058fc:	f000 fab6 	bl	8005e6c <memchr>
 8005900:	b140      	cbz	r0, 8005914 <_vfiprintf_r+0x198>
 8005902:	2340      	movs	r3, #64	; 0x40
 8005904:	eba0 000a 	sub.w	r0, r0, sl
 8005908:	fa03 f000 	lsl.w	r0, r3, r0
 800590c:	9b04      	ldr	r3, [sp, #16]
 800590e:	3401      	adds	r4, #1
 8005910:	4303      	orrs	r3, r0
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005918:	2206      	movs	r2, #6
 800591a:	482c      	ldr	r0, [pc, #176]	; (80059cc <_vfiprintf_r+0x250>)
 800591c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005920:	f000 faa4 	bl	8005e6c <memchr>
 8005924:	2800      	cmp	r0, #0
 8005926:	d03f      	beq.n	80059a8 <_vfiprintf_r+0x22c>
 8005928:	4b29      	ldr	r3, [pc, #164]	; (80059d0 <_vfiprintf_r+0x254>)
 800592a:	bb1b      	cbnz	r3, 8005974 <_vfiprintf_r+0x1f8>
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	3307      	adds	r3, #7
 8005930:	f023 0307 	bic.w	r3, r3, #7
 8005934:	3308      	adds	r3, #8
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593a:	443b      	add	r3, r7
 800593c:	9309      	str	r3, [sp, #36]	; 0x24
 800593e:	e767      	b.n	8005810 <_vfiprintf_r+0x94>
 8005940:	460c      	mov	r4, r1
 8005942:	2001      	movs	r0, #1
 8005944:	fb0c 3202 	mla	r2, ip, r2, r3
 8005948:	e7a5      	b.n	8005896 <_vfiprintf_r+0x11a>
 800594a:	2300      	movs	r3, #0
 800594c:	f04f 0c0a 	mov.w	ip, #10
 8005950:	4619      	mov	r1, r3
 8005952:	3401      	adds	r4, #1
 8005954:	9305      	str	r3, [sp, #20]
 8005956:	4620      	mov	r0, r4
 8005958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800595c:	3a30      	subs	r2, #48	; 0x30
 800595e:	2a09      	cmp	r2, #9
 8005960:	d903      	bls.n	800596a <_vfiprintf_r+0x1ee>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0c5      	beq.n	80058f2 <_vfiprintf_r+0x176>
 8005966:	9105      	str	r1, [sp, #20]
 8005968:	e7c3      	b.n	80058f2 <_vfiprintf_r+0x176>
 800596a:	4604      	mov	r4, r0
 800596c:	2301      	movs	r3, #1
 800596e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005972:	e7f0      	b.n	8005956 <_vfiprintf_r+0x1da>
 8005974:	ab03      	add	r3, sp, #12
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	462a      	mov	r2, r5
 800597a:	4630      	mov	r0, r6
 800597c:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <_vfiprintf_r+0x258>)
 800597e:	a904      	add	r1, sp, #16
 8005980:	f3af 8000 	nop.w
 8005984:	4607      	mov	r7, r0
 8005986:	1c78      	adds	r0, r7, #1
 8005988:	d1d6      	bne.n	8005938 <_vfiprintf_r+0x1bc>
 800598a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800598c:	07d9      	lsls	r1, r3, #31
 800598e:	d405      	bmi.n	800599c <_vfiprintf_r+0x220>
 8005990:	89ab      	ldrh	r3, [r5, #12]
 8005992:	059a      	lsls	r2, r3, #22
 8005994:	d402      	bmi.n	800599c <_vfiprintf_r+0x220>
 8005996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005998:	f7ff fdb5 	bl	8005506 <__retarget_lock_release_recursive>
 800599c:	89ab      	ldrh	r3, [r5, #12]
 800599e:	065b      	lsls	r3, r3, #25
 80059a0:	f53f af12 	bmi.w	80057c8 <_vfiprintf_r+0x4c>
 80059a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a6:	e711      	b.n	80057cc <_vfiprintf_r+0x50>
 80059a8:	ab03      	add	r3, sp, #12
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	462a      	mov	r2, r5
 80059ae:	4630      	mov	r0, r6
 80059b0:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <_vfiprintf_r+0x258>)
 80059b2:	a904      	add	r1, sp, #16
 80059b4:	f000 f882 	bl	8005abc <_printf_i>
 80059b8:	e7e4      	b.n	8005984 <_vfiprintf_r+0x208>
 80059ba:	bf00      	nop
 80059bc:	0800e2b8 	.word	0x0800e2b8
 80059c0:	0800e2d8 	.word	0x0800e2d8
 80059c4:	0800e298 	.word	0x0800e298
 80059c8:	0800e2f8 	.word	0x0800e2f8
 80059cc:	0800e302 	.word	0x0800e302
 80059d0:	00000000 	.word	0x00000000
 80059d4:	08005757 	.word	0x08005757
 80059d8:	0800e2fe 	.word	0x0800e2fe

080059dc <_printf_common>:
 80059dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e0:	4616      	mov	r6, r2
 80059e2:	4699      	mov	r9, r3
 80059e4:	688a      	ldr	r2, [r1, #8]
 80059e6:	690b      	ldr	r3, [r1, #16]
 80059e8:	4607      	mov	r7, r0
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bfb8      	it	lt
 80059ee:	4613      	movlt	r3, r2
 80059f0:	6033      	str	r3, [r6, #0]
 80059f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f6:	460c      	mov	r4, r1
 80059f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059fc:	b10a      	cbz	r2, 8005a02 <_printf_common+0x26>
 80059fe:	3301      	adds	r3, #1
 8005a00:	6033      	str	r3, [r6, #0]
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	0699      	lsls	r1, r3, #26
 8005a06:	bf42      	ittt	mi
 8005a08:	6833      	ldrmi	r3, [r6, #0]
 8005a0a:	3302      	addmi	r3, #2
 8005a0c:	6033      	strmi	r3, [r6, #0]
 8005a0e:	6825      	ldr	r5, [r4, #0]
 8005a10:	f015 0506 	ands.w	r5, r5, #6
 8005a14:	d106      	bne.n	8005a24 <_printf_common+0x48>
 8005a16:	f104 0a19 	add.w	sl, r4, #25
 8005a1a:	68e3      	ldr	r3, [r4, #12]
 8005a1c:	6832      	ldr	r2, [r6, #0]
 8005a1e:	1a9b      	subs	r3, r3, r2
 8005a20:	42ab      	cmp	r3, r5
 8005a22:	dc28      	bgt.n	8005a76 <_printf_common+0x9a>
 8005a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a28:	1e13      	subs	r3, r2, #0
 8005a2a:	6822      	ldr	r2, [r4, #0]
 8005a2c:	bf18      	it	ne
 8005a2e:	2301      	movne	r3, #1
 8005a30:	0692      	lsls	r2, r2, #26
 8005a32:	d42d      	bmi.n	8005a90 <_printf_common+0xb4>
 8005a34:	4649      	mov	r1, r9
 8005a36:	4638      	mov	r0, r7
 8005a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a3c:	47c0      	blx	r8
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d020      	beq.n	8005a84 <_printf_common+0xa8>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	68e5      	ldr	r5, [r4, #12]
 8005a46:	f003 0306 	and.w	r3, r3, #6
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	bf18      	it	ne
 8005a4e:	2500      	movne	r5, #0
 8005a50:	6832      	ldr	r2, [r6, #0]
 8005a52:	f04f 0600 	mov.w	r6, #0
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	bf08      	it	eq
 8005a5a:	1aad      	subeq	r5, r5, r2
 8005a5c:	6922      	ldr	r2, [r4, #16]
 8005a5e:	bf08      	it	eq
 8005a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a64:	4293      	cmp	r3, r2
 8005a66:	bfc4      	itt	gt
 8005a68:	1a9b      	subgt	r3, r3, r2
 8005a6a:	18ed      	addgt	r5, r5, r3
 8005a6c:	341a      	adds	r4, #26
 8005a6e:	42b5      	cmp	r5, r6
 8005a70:	d11a      	bne.n	8005aa8 <_printf_common+0xcc>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e008      	b.n	8005a88 <_printf_common+0xac>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4652      	mov	r2, sl
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	47c0      	blx	r8
 8005a80:	3001      	adds	r0, #1
 8005a82:	d103      	bne.n	8005a8c <_printf_common+0xb0>
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	e7c4      	b.n	8005a1a <_printf_common+0x3e>
 8005a90:	2030      	movs	r0, #48	; 0x30
 8005a92:	18e1      	adds	r1, r4, r3
 8005a94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a9e:	4422      	add	r2, r4
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aa6:	e7c5      	b.n	8005a34 <_printf_common+0x58>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4622      	mov	r2, r4
 8005aac:	4649      	mov	r1, r9
 8005aae:	4638      	mov	r0, r7
 8005ab0:	47c0      	blx	r8
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d0e6      	beq.n	8005a84 <_printf_common+0xa8>
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7d9      	b.n	8005a6e <_printf_common+0x92>
	...

08005abc <_printf_i>:
 8005abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	7e27      	ldrb	r7, [r4, #24]
 8005ac4:	4691      	mov	r9, r2
 8005ac6:	2f78      	cmp	r7, #120	; 0x78
 8005ac8:	4680      	mov	r8, r0
 8005aca:	469a      	mov	sl, r3
 8005acc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad2:	d807      	bhi.n	8005ae4 <_printf_i+0x28>
 8005ad4:	2f62      	cmp	r7, #98	; 0x62
 8005ad6:	d80a      	bhi.n	8005aee <_printf_i+0x32>
 8005ad8:	2f00      	cmp	r7, #0
 8005ada:	f000 80d9 	beq.w	8005c90 <_printf_i+0x1d4>
 8005ade:	2f58      	cmp	r7, #88	; 0x58
 8005ae0:	f000 80a4 	beq.w	8005c2c <_printf_i+0x170>
 8005ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aec:	e03a      	b.n	8005b64 <_printf_i+0xa8>
 8005aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005af2:	2b15      	cmp	r3, #21
 8005af4:	d8f6      	bhi.n	8005ae4 <_printf_i+0x28>
 8005af6:	a001      	add	r0, pc, #4	; (adr r0, 8005afc <_printf_i+0x40>)
 8005af8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005afc:	08005b55 	.word	0x08005b55
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005ae5 	.word	0x08005ae5
 8005b08:	08005ae5 	.word	0x08005ae5
 8005b0c:	08005ae5 	.word	0x08005ae5
 8005b10:	08005ae5 	.word	0x08005ae5
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005ae5 	.word	0x08005ae5
 8005b1c:	08005ae5 	.word	0x08005ae5
 8005b20:	08005ae5 	.word	0x08005ae5
 8005b24:	08005ae5 	.word	0x08005ae5
 8005b28:	08005c77 	.word	0x08005c77
 8005b2c:	08005b99 	.word	0x08005b99
 8005b30:	08005c59 	.word	0x08005c59
 8005b34:	08005ae5 	.word	0x08005ae5
 8005b38:	08005ae5 	.word	0x08005ae5
 8005b3c:	08005c99 	.word	0x08005c99
 8005b40:	08005ae5 	.word	0x08005ae5
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005ae5 	.word	0x08005ae5
 8005b4c:	08005ae5 	.word	0x08005ae5
 8005b50:	08005c61 	.word	0x08005c61
 8005b54:	680b      	ldr	r3, [r1, #0]
 8005b56:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b5a:	1d1a      	adds	r2, r3, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	600a      	str	r2, [r1, #0]
 8005b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0a4      	b.n	8005cb2 <_printf_i+0x1f6>
 8005b68:	6825      	ldr	r5, [r4, #0]
 8005b6a:	6808      	ldr	r0, [r1, #0]
 8005b6c:	062e      	lsls	r6, r5, #24
 8005b6e:	f100 0304 	add.w	r3, r0, #4
 8005b72:	d50a      	bpl.n	8005b8a <_printf_i+0xce>
 8005b74:	6805      	ldr	r5, [r0, #0]
 8005b76:	600b      	str	r3, [r1, #0]
 8005b78:	2d00      	cmp	r5, #0
 8005b7a:	da03      	bge.n	8005b84 <_printf_i+0xc8>
 8005b7c:	232d      	movs	r3, #45	; 0x2d
 8005b7e:	426d      	negs	r5, r5
 8005b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b84:	230a      	movs	r3, #10
 8005b86:	485e      	ldr	r0, [pc, #376]	; (8005d00 <_printf_i+0x244>)
 8005b88:	e019      	b.n	8005bbe <_printf_i+0x102>
 8005b8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b8e:	6805      	ldr	r5, [r0, #0]
 8005b90:	600b      	str	r3, [r1, #0]
 8005b92:	bf18      	it	ne
 8005b94:	b22d      	sxthne	r5, r5
 8005b96:	e7ef      	b.n	8005b78 <_printf_i+0xbc>
 8005b98:	680b      	ldr	r3, [r1, #0]
 8005b9a:	6825      	ldr	r5, [r4, #0]
 8005b9c:	1d18      	adds	r0, r3, #4
 8005b9e:	6008      	str	r0, [r1, #0]
 8005ba0:	0628      	lsls	r0, r5, #24
 8005ba2:	d501      	bpl.n	8005ba8 <_printf_i+0xec>
 8005ba4:	681d      	ldr	r5, [r3, #0]
 8005ba6:	e002      	b.n	8005bae <_printf_i+0xf2>
 8005ba8:	0669      	lsls	r1, r5, #25
 8005baa:	d5fb      	bpl.n	8005ba4 <_printf_i+0xe8>
 8005bac:	881d      	ldrh	r5, [r3, #0]
 8005bae:	2f6f      	cmp	r7, #111	; 0x6f
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2308      	moveq	r3, #8
 8005bb4:	230a      	movne	r3, #10
 8005bb6:	4852      	ldr	r0, [pc, #328]	; (8005d00 <_printf_i+0x244>)
 8005bb8:	2100      	movs	r1, #0
 8005bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bbe:	6866      	ldr	r6, [r4, #4]
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	bfa8      	it	ge
 8005bc4:	6821      	ldrge	r1, [r4, #0]
 8005bc6:	60a6      	str	r6, [r4, #8]
 8005bc8:	bfa4      	itt	ge
 8005bca:	f021 0104 	bicge.w	r1, r1, #4
 8005bce:	6021      	strge	r1, [r4, #0]
 8005bd0:	b90d      	cbnz	r5, 8005bd6 <_printf_i+0x11a>
 8005bd2:	2e00      	cmp	r6, #0
 8005bd4:	d04d      	beq.n	8005c72 <_printf_i+0x1b6>
 8005bd6:	4616      	mov	r6, r2
 8005bd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bdc:	fb03 5711 	mls	r7, r3, r1, r5
 8005be0:	5dc7      	ldrb	r7, [r0, r7]
 8005be2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005be6:	462f      	mov	r7, r5
 8005be8:	42bb      	cmp	r3, r7
 8005bea:	460d      	mov	r5, r1
 8005bec:	d9f4      	bls.n	8005bd8 <_printf_i+0x11c>
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d10b      	bne.n	8005c0a <_printf_i+0x14e>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	07df      	lsls	r7, r3, #31
 8005bf6:	d508      	bpl.n	8005c0a <_printf_i+0x14e>
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	6861      	ldr	r1, [r4, #4]
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	bfde      	ittt	le
 8005c00:	2330      	movle	r3, #48	; 0x30
 8005c02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c0a:	1b92      	subs	r2, r2, r6
 8005c0c:	6122      	str	r2, [r4, #16]
 8005c0e:	464b      	mov	r3, r9
 8005c10:	4621      	mov	r1, r4
 8005c12:	4640      	mov	r0, r8
 8005c14:	f8cd a000 	str.w	sl, [sp]
 8005c18:	aa03      	add	r2, sp, #12
 8005c1a:	f7ff fedf 	bl	80059dc <_printf_common>
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d14c      	bne.n	8005cbc <_printf_i+0x200>
 8005c22:	f04f 30ff 	mov.w	r0, #4294967295
 8005c26:	b004      	add	sp, #16
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	4834      	ldr	r0, [pc, #208]	; (8005d00 <_printf_i+0x244>)
 8005c2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c32:	680e      	ldr	r6, [r1, #0]
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c3a:	061f      	lsls	r7, r3, #24
 8005c3c:	600e      	str	r6, [r1, #0]
 8005c3e:	d514      	bpl.n	8005c6a <_printf_i+0x1ae>
 8005c40:	07d9      	lsls	r1, r3, #31
 8005c42:	bf44      	itt	mi
 8005c44:	f043 0320 	orrmi.w	r3, r3, #32
 8005c48:	6023      	strmi	r3, [r4, #0]
 8005c4a:	b91d      	cbnz	r5, 8005c54 <_printf_i+0x198>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	f023 0320 	bic.w	r3, r3, #32
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	2310      	movs	r3, #16
 8005c56:	e7af      	b.n	8005bb8 <_printf_i+0xfc>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	f043 0320 	orr.w	r3, r3, #32
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	2378      	movs	r3, #120	; 0x78
 8005c62:	4828      	ldr	r0, [pc, #160]	; (8005d04 <_printf_i+0x248>)
 8005c64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c68:	e7e3      	b.n	8005c32 <_printf_i+0x176>
 8005c6a:	065e      	lsls	r6, r3, #25
 8005c6c:	bf48      	it	mi
 8005c6e:	b2ad      	uxthmi	r5, r5
 8005c70:	e7e6      	b.n	8005c40 <_printf_i+0x184>
 8005c72:	4616      	mov	r6, r2
 8005c74:	e7bb      	b.n	8005bee <_printf_i+0x132>
 8005c76:	680b      	ldr	r3, [r1, #0]
 8005c78:	6826      	ldr	r6, [r4, #0]
 8005c7a:	1d1d      	adds	r5, r3, #4
 8005c7c:	6960      	ldr	r0, [r4, #20]
 8005c7e:	600d      	str	r5, [r1, #0]
 8005c80:	0635      	lsls	r5, r6, #24
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	d501      	bpl.n	8005c8a <_printf_i+0x1ce>
 8005c86:	6018      	str	r0, [r3, #0]
 8005c88:	e002      	b.n	8005c90 <_printf_i+0x1d4>
 8005c8a:	0671      	lsls	r1, r6, #25
 8005c8c:	d5fb      	bpl.n	8005c86 <_printf_i+0x1ca>
 8005c8e:	8018      	strh	r0, [r3, #0]
 8005c90:	2300      	movs	r3, #0
 8005c92:	4616      	mov	r6, r2
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	e7ba      	b.n	8005c0e <_printf_i+0x152>
 8005c98:	680b      	ldr	r3, [r1, #0]
 8005c9a:	1d1a      	adds	r2, r3, #4
 8005c9c:	600a      	str	r2, [r1, #0]
 8005c9e:	681e      	ldr	r6, [r3, #0]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	6862      	ldr	r2, [r4, #4]
 8005ca6:	f000 f8e1 	bl	8005e6c <memchr>
 8005caa:	b108      	cbz	r0, 8005cb0 <_printf_i+0x1f4>
 8005cac:	1b80      	subs	r0, r0, r6
 8005cae:	6060      	str	r0, [r4, #4]
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cba:	e7a8      	b.n	8005c0e <_printf_i+0x152>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	47d0      	blx	sl
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d0ab      	beq.n	8005c22 <_printf_i+0x166>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	079b      	lsls	r3, r3, #30
 8005cce:	d413      	bmi.n	8005cf8 <_printf_i+0x23c>
 8005cd0:	68e0      	ldr	r0, [r4, #12]
 8005cd2:	9b03      	ldr	r3, [sp, #12]
 8005cd4:	4298      	cmp	r0, r3
 8005cd6:	bfb8      	it	lt
 8005cd8:	4618      	movlt	r0, r3
 8005cda:	e7a4      	b.n	8005c26 <_printf_i+0x16a>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4632      	mov	r2, r6
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	47d0      	blx	sl
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d09b      	beq.n	8005c22 <_printf_i+0x166>
 8005cea:	3501      	adds	r5, #1
 8005cec:	68e3      	ldr	r3, [r4, #12]
 8005cee:	9903      	ldr	r1, [sp, #12]
 8005cf0:	1a5b      	subs	r3, r3, r1
 8005cf2:	42ab      	cmp	r3, r5
 8005cf4:	dcf2      	bgt.n	8005cdc <_printf_i+0x220>
 8005cf6:	e7eb      	b.n	8005cd0 <_printf_i+0x214>
 8005cf8:	2500      	movs	r5, #0
 8005cfa:	f104 0619 	add.w	r6, r4, #25
 8005cfe:	e7f5      	b.n	8005cec <_printf_i+0x230>
 8005d00:	0800e309 	.word	0x0800e309
 8005d04:	0800e31a 	.word	0x0800e31a

08005d08 <_sbrk_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4d05      	ldr	r5, [pc, #20]	; (8005d24 <_sbrk_r+0x1c>)
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fd fafe 	bl	8003314 <_sbrk>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_sbrk_r+0x1a>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_sbrk_r+0x1a>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20003410 	.word	0x20003410

08005d28 <__sread>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d30:	f000 f8b6 	bl	8005ea0 <_read_r>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	bfab      	itete	ge
 8005d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d3c:	181b      	addge	r3, r3, r0
 8005d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d42:	bfac      	ite	ge
 8005d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d46:	81a3      	strhlt	r3, [r4, #12]
 8005d48:	bd10      	pop	{r4, pc}

08005d4a <__swrite>:
 8005d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4e:	461f      	mov	r7, r3
 8005d50:	898b      	ldrh	r3, [r1, #12]
 8005d52:	4605      	mov	r5, r0
 8005d54:	05db      	lsls	r3, r3, #23
 8005d56:	460c      	mov	r4, r1
 8005d58:	4616      	mov	r6, r2
 8005d5a:	d505      	bpl.n	8005d68 <__swrite+0x1e>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	f000 f870 	bl	8005e48 <_lseek_r>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	4632      	mov	r2, r6
 8005d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d70:	81a3      	strh	r3, [r4, #12]
 8005d72:	4628      	mov	r0, r5
 8005d74:	463b      	mov	r3, r7
 8005d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7e:	f000 b817 	b.w	8005db0 <_write_r>

08005d82 <__sseek>:
 8005d82:	b510      	push	{r4, lr}
 8005d84:	460c      	mov	r4, r1
 8005d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8a:	f000 f85d 	bl	8005e48 <_lseek_r>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	bf15      	itete	ne
 8005d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d9e:	81a3      	strheq	r3, [r4, #12]
 8005da0:	bf18      	it	ne
 8005da2:	81a3      	strhne	r3, [r4, #12]
 8005da4:	bd10      	pop	{r4, pc}

08005da6 <__sclose>:
 8005da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005daa:	f000 b81b 	b.w	8005de4 <_close_r>
	...

08005db0 <_write_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	2200      	movs	r2, #0
 8005dba:	4d05      	ldr	r5, [pc, #20]	; (8005dd0 <_write_r+0x20>)
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f7fd f836 	bl	8002e30 <_write>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_write_r+0x1e>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_write_r+0x1e>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20003410 	.word	0x20003410

08005dd4 <abort>:
 8005dd4:	2006      	movs	r0, #6
 8005dd6:	b508      	push	{r3, lr}
 8005dd8:	f000 f89c 	bl	8005f14 <raise>
 8005ddc:	2001      	movs	r0, #1
 8005dde:	f7fd fa42 	bl	8003266 <_exit>
	...

08005de4 <_close_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	2300      	movs	r3, #0
 8005de8:	4d05      	ldr	r5, [pc, #20]	; (8005e00 <_close_r+0x1c>)
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f7fd fa60 	bl	80032b4 <_close>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_close_r+0x1a>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_close_r+0x1a>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20003410 	.word	0x20003410

08005e04 <_fstat_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	2300      	movs	r3, #0
 8005e08:	4d06      	ldr	r5, [pc, #24]	; (8005e24 <_fstat_r+0x20>)
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	602b      	str	r3, [r5, #0]
 8005e12:	f7fd fa5a 	bl	80032ca <_fstat>
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	d102      	bne.n	8005e20 <_fstat_r+0x1c>
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	b103      	cbz	r3, 8005e20 <_fstat_r+0x1c>
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	bd38      	pop	{r3, r4, r5, pc}
 8005e22:	bf00      	nop
 8005e24:	20003410 	.word	0x20003410

08005e28 <_isatty_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4d05      	ldr	r5, [pc, #20]	; (8005e44 <_isatty_r+0x1c>)
 8005e2e:	4604      	mov	r4, r0
 8005e30:	4608      	mov	r0, r1
 8005e32:	602b      	str	r3, [r5, #0]
 8005e34:	f7fd fa58 	bl	80032e8 <_isatty>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <_isatty_r+0x1a>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	b103      	cbz	r3, 8005e42 <_isatty_r+0x1a>
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	20003410 	.word	0x20003410

08005e48 <_lseek_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	2200      	movs	r2, #0
 8005e52:	4d05      	ldr	r5, [pc, #20]	; (8005e68 <_lseek_r+0x20>)
 8005e54:	602a      	str	r2, [r5, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f7fd fa50 	bl	80032fc <_lseek>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d102      	bne.n	8005e66 <_lseek_r+0x1e>
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	b103      	cbz	r3, 8005e66 <_lseek_r+0x1e>
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	bd38      	pop	{r3, r4, r5, pc}
 8005e68:	20003410 	.word	0x20003410

08005e6c <memchr>:
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	b2c9      	uxtb	r1, r1
 8005e72:	4402      	add	r2, r0
 8005e74:	4293      	cmp	r3, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	d101      	bne.n	8005e7e <memchr+0x12>
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e003      	b.n	8005e86 <memchr+0x1a>
 8005e7e:	7804      	ldrb	r4, [r0, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	428c      	cmp	r4, r1
 8005e84:	d1f6      	bne.n	8005e74 <memchr+0x8>
 8005e86:	bd10      	pop	{r4, pc}

08005e88 <__malloc_lock>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__malloc_lock+0x8>)
 8005e8a:	f7ff bb3b 	b.w	8005504 <__retarget_lock_acquire_recursive>
 8005e8e:	bf00      	nop
 8005e90:	20003408 	.word	0x20003408

08005e94 <__malloc_unlock>:
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <__malloc_unlock+0x8>)
 8005e96:	f7ff bb36 	b.w	8005506 <__retarget_lock_release_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	20003408 	.word	0x20003408

08005ea0 <_read_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4d05      	ldr	r5, [pc, #20]	; (8005ec0 <_read_r+0x20>)
 8005eac:	602a      	str	r2, [r5, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f7fd f9e3 	bl	800327a <_read>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_read_r+0x1e>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_read_r+0x1e>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	20003410 	.word	0x20003410

08005ec4 <_raise_r>:
 8005ec4:	291f      	cmp	r1, #31
 8005ec6:	b538      	push	{r3, r4, r5, lr}
 8005ec8:	4604      	mov	r4, r0
 8005eca:	460d      	mov	r5, r1
 8005ecc:	d904      	bls.n	8005ed8 <_raise_r+0x14>
 8005ece:	2316      	movs	r3, #22
 8005ed0:	6003      	str	r3, [r0, #0]
 8005ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005eda:	b112      	cbz	r2, 8005ee2 <_raise_r+0x1e>
 8005edc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ee0:	b94b      	cbnz	r3, 8005ef6 <_raise_r+0x32>
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f830 	bl	8005f48 <_getpid_r>
 8005ee8:	462a      	mov	r2, r5
 8005eea:	4601      	mov	r1, r0
 8005eec:	4620      	mov	r0, r4
 8005eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ef2:	f000 b817 	b.w	8005f24 <_kill_r>
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d00a      	beq.n	8005f10 <_raise_r+0x4c>
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	d103      	bne.n	8005f06 <_raise_r+0x42>
 8005efe:	2316      	movs	r3, #22
 8005f00:	6003      	str	r3, [r0, #0]
 8005f02:	2001      	movs	r0, #1
 8005f04:	e7e7      	b.n	8005ed6 <_raise_r+0x12>
 8005f06:	2400      	movs	r4, #0
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f0e:	4798      	blx	r3
 8005f10:	2000      	movs	r0, #0
 8005f12:	e7e0      	b.n	8005ed6 <_raise_r+0x12>

08005f14 <raise>:
 8005f14:	4b02      	ldr	r3, [pc, #8]	; (8005f20 <raise+0xc>)
 8005f16:	4601      	mov	r1, r0
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	f7ff bfd3 	b.w	8005ec4 <_raise_r>
 8005f1e:	bf00      	nop
 8005f20:	20000078 	.word	0x20000078

08005f24 <_kill_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	2300      	movs	r3, #0
 8005f28:	4d06      	ldr	r5, [pc, #24]	; (8005f44 <_kill_r+0x20>)
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	4611      	mov	r1, r2
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	f7fd f988 	bl	8003246 <_kill>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	d102      	bne.n	8005f40 <_kill_r+0x1c>
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	b103      	cbz	r3, 8005f40 <_kill_r+0x1c>
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	bf00      	nop
 8005f44:	20003410 	.word	0x20003410

08005f48 <_getpid_r>:
 8005f48:	f7fd b976 	b.w	8003238 <_getpid>

08005f4c <_init>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr

08005f58 <_fini>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr
